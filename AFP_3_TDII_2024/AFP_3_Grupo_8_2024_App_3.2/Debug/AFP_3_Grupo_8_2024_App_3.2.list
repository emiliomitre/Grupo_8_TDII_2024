
AFP_3_Grupo_8_2024_App_3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e80  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003058  08003058  00004058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  00005018  2**0
                  CONTENTS
  4 .ARM          00000008  08003088  08003088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003090  08003090  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003090  08003090  00004090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003094  08003094  00004094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003098  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000018  080030b0  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  080030b0  0000557c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c512  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f67  00000000  00000000  0001155a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000134c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e2  00000000  00000000  00013f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020531  00000000  00000000  00014702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbe7  00000000  00000000  00034c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c456d  00000000  00000000  0004281a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106d87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  00106dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000be  00000000  00000000  00109808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003040 	.word	0x08003040

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08003040 	.word	0x08003040

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fbd8 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 fa62 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fb26 	bl	8000b64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000518:	f000 faca 	bl	8000ab0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 faf2 	bl	8000b04 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */
  delayInit(&delaySecuencia, 200); //definir el tiempo de retardo
 8000520:	21c8      	movs	r1, #200	@ 0xc8
 8000522:	4816      	ldr	r0, [pc, #88]	@ (800057c <main+0x74>)
 8000524:	f000 f9fb 	bl	800091e <delayInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/* Programa para prender secuencialmente leds 1,2,3 y de manera invertida 3,2,1. Alternando entre secuencias cuando se presiona el pulsador */
	  estado_boton=readButton_GPIO();		//Compruebo si el boton esta presionado
 8000528:	f000 fa44 	bl	80009b4 <readButton_GPIO>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <main+0x78>)
 8000532:	601a      	str	r2, [r3, #0]

	  if(estado_boton==GPIO_PIN_SET && estado_anterior==GPIO_PIN_RESET){//	Cambia el estado de la secuencia - Evita que alterne una y otra vez si se lo mantiene presionado
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <main+0x78>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d10b      	bne.n	8000554 <main+0x4c>
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <main+0x7c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d107      	bne.n	8000554 <main+0x4c>
		  estado_secuencia=-estado_secuencia;							//	Los valores para las 2 secuencias son 1 y -1
 8000544:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <main+0x80>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	425b      	negs	r3, r3
 800054a:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <main+0x80>)
 800054c:	6013      	str	r3, [r2, #0]
		  estado = ENCENDER_LED0;										// Reinicia al primer estado en cada cambio de secuencia
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <main+0x84>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
	  }
	  estado_anterior=estado_boton;										// Guarda el estado anterior para asegurar si el boton esta pulsado o no cuando se hizo el control
 8000554:	4b0a      	ldr	r3, [pc, #40]	@ (8000580 <main+0x78>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <main+0x7c>)
 800055a:	6013      	str	r3, [r2, #0]

	  	  switch (estado_secuencia){										// Selecciona cual secuencia se ejecutara
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <main+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000564:	d005      	beq.n	8000572 <main+0x6a>
 8000566:	2b01      	cmp	r3, #1
 8000568:	d1de      	bne.n	8000528 <main+0x20>
	  	  	  case 1:
	  	  		  control_leds(secuencia_normal);
 800056a:	4809      	ldr	r0, [pc, #36]	@ (8000590 <main+0x88>)
 800056c:	f000 f814 	bl	8000598 <control_leds>
	  	  		  break;
 8000570:	e003      	b.n	800057a <main+0x72>
	  	  	  case -1:
	  	  		  control_leds(secuencia_invertida);
 8000572:	4808      	ldr	r0, [pc, #32]	@ (8000594 <main+0x8c>)
 8000574:	f000 f810 	bl	8000598 <control_leds>
	  	  		  break;
 8000578:	bf00      	nop
	  estado_boton=readButton_GPIO();		//Compruebo si el boton esta presionado
 800057a:	e7d5      	b.n	8000528 <main+0x20>
 800057c:	20000040 	.word	0x20000040
 8000580:	20000038 	.word	0x20000038
 8000584:	2000003c 	.word	0x2000003c
 8000588:	20000000 	.word	0x20000000
 800058c:	20000034 	.word	0x20000034
 8000590:	08003058 	.word	0x08003058
 8000594:	08003064 	.word	0x08003064

08000598 <control_leds>:




/* USER CODE BEGIN 4 */
void control_leds(const int* secuencia){		/* Funciona para secuencia en orden ascendente y descendente*/
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    if (delayRead(&delaySecuencia)) {
 80005a0:	4834      	ldr	r0, [pc, #208]	@ (8000674 <control_leds+0xdc>)
 80005a2:	f000 f9d0 	bl	8000946 <delayRead>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d05f      	beq.n	800066c <control_leds+0xd4>
         // Cambiar estado según la máquina de estados
         switch (estado) {
 80005ac:	4b32      	ldr	r3, [pc, #200]	@ (8000678 <control_leds+0xe0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d85b      	bhi.n	800066c <control_leds+0xd4>
 80005b4:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <control_leds+0x24>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005d5 	.word	0x080005d5
 80005c0:	080005ed 	.word	0x080005ed
 80005c4:	08000605 	.word	0x08000605
 80005c8:	0800061f 	.word	0x0800061f
 80005cc:	08000639 	.word	0x08000639
 80005d0:	08000653 	.word	0x08000653
             case ENCENDER_LED0:
            	 toggleLed_GPIO(LED[secuencia[0]]);  // Encender LED 0
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a28      	ldr	r2, [pc, #160]	@ (800067c <control_leds+0xe4>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f9d8 	bl	8000994 <toggleLed_GPIO>
                 estado = ESPERAR_LED0_OFF;
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <control_leds+0xe0>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
                 break;
 80005ea:	e03f      	b.n	800066c <control_leds+0xd4>

             case ESPERAR_LED0_OFF:
            	 toggleLed_GPIO(LED[secuencia[0]]);  // Apagar LED 0
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a22      	ldr	r2, [pc, #136]	@ (800067c <control_leds+0xe4>)
 80005f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f9cc 	bl	8000994 <toggleLed_GPIO>
                 estado = ENCENDER_LED1;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <control_leds+0xe0>)
 80005fe:	2202      	movs	r2, #2
 8000600:	701a      	strb	r2, [r3, #0]
                 break;
 8000602:	e033      	b.n	800066c <control_leds+0xd4>

             case ENCENDER_LED1:
            	 toggleLed_GPIO(LED[secuencia[1]]);  // Encender LED 1
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3304      	adds	r3, #4
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <control_leds+0xe4>)
 800060c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f9bf 	bl	8000994 <toggleLed_GPIO>
                 estado = ESPERAR_LED1_OFF;
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <control_leds+0xe0>)
 8000618:	2203      	movs	r2, #3
 800061a:	701a      	strb	r2, [r3, #0]
                 break;
 800061c:	e026      	b.n	800066c <control_leds+0xd4>

             case ESPERAR_LED1_OFF:
            	 toggleLed_GPIO(LED[secuencia[1]]);  // Apagar LED 1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3304      	adds	r3, #4
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a15      	ldr	r2, [pc, #84]	@ (800067c <control_leds+0xe4>)
 8000626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f9b2 	bl	8000994 <toggleLed_GPIO>
                 estado = ENCENDER_LED2;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <control_leds+0xe0>)
 8000632:	2204      	movs	r2, #4
 8000634:	701a      	strb	r2, [r3, #0]
                 break;
 8000636:	e019      	b.n	800066c <control_leds+0xd4>

             case ENCENDER_LED2:
            	 toggleLed_GPIO(LED[secuencia[2]]);  // Encender LED 2
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3308      	adds	r3, #8
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <control_leds+0xe4>)
 8000640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f9a5 	bl	8000994 <toggleLed_GPIO>
                 estado = ESPERAR_LED2_OFF;
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <control_leds+0xe0>)
 800064c:	2205      	movs	r2, #5
 800064e:	701a      	strb	r2, [r3, #0]
                 break;
 8000650:	e00c      	b.n	800066c <control_leds+0xd4>

             case ESPERAR_LED2_OFF:
            	 toggleLed_GPIO(LED[secuencia[2]]);  // Apagar LED 2
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3308      	adds	r3, #8
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a08      	ldr	r2, [pc, #32]	@ (800067c <control_leds+0xe4>)
 800065a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f998 	bl	8000994 <toggleLed_GPIO>
                 estado = ENCENDER_LED0;  // Reiniciar la secuencia
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <control_leds+0xe0>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
                 break;
 800066a:	bf00      	nop
         }

    }
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000040 	.word	0x20000040
 8000678:	20000034 	.word	0x20000034
 800067c:	20000004 	.word	0x20000004

08000680 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <Error_Handler+0x8>

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069a:	4a0f      	ldr	r2, [pc, #60]	@ (80006d8 <HAL_MspInit+0x4c>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <HAL_MspInit+0x4c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a19      	ldr	r2, [pc, #100]	@ (8000760 <HAL_UART_MspInit+0x84>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d12c      	bne.n	8000758 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <HAL_UART_MspInit+0x88>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	4a17      	ldr	r2, [pc, #92]	@ (8000764 <HAL_UART_MspInit+0x88>)
 8000708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800070c:	6413      	str	r3, [r2, #64]	@ 0x40
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <HAL_UART_MspInit+0x88>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <HAL_UART_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <HAL_UART_MspInit+0x88>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <HAL_UART_MspInit+0x88>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000736:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000748:	2307      	movs	r3, #7
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <HAL_UART_MspInit+0x8c>)
 8000754:	f000 fc30 	bl	8000fb8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	@ 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40004800 	.word	0x40004800
 8000764:	40023800 	.word	0x40023800
 8000768:	40020c00 	.word	0x40020c00

0800076c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0a0      	sub	sp, #128	@ 0x80
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2258      	movs	r2, #88	@ 0x58
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fc2a 	bl	8002fe6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800079a:	d14d      	bne.n	8000838 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800079c:	2320      	movs	r3, #32
 800079e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80007a0:	2300      	movs	r3, #0
 80007a2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f93f 	bl	8001a2c <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80007b4:	f7ff ff64 	bl	8000680 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80007d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007e6:	230a      	movs	r3, #10
 80007e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007ee:	4619      	mov	r1, r3
 80007f0:	4814      	ldr	r0, [pc, #80]	@ (8000844 <HAL_PCD_MspInit+0xd8>)
 80007f2:	f000 fbe1 	bl	8000fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000808:	4619      	mov	r1, r3
 800080a:	480e      	ldr	r0, [pc, #56]	@ (8000844 <HAL_PCD_MspInit+0xd8>)
 800080c:	f000 fbd4 	bl	8000fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 8000812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000814:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 8000816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081a:	6353      	str	r3, [r2, #52]	@ 0x34
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 8000822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082a:	6453      	str	r3, [r2, #68]	@ 0x44
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <HAL_PCD_MspInit+0xd4>)
 800082e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000838:	bf00      	nop
 800083a:	3780      	adds	r7, #128	@ 0x80
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <NMI_Handler+0x4>

08000850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <MemManage_Handler+0x4>

08000860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <UsageFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 fa61 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008d0:	f7ff ffea 	bl	80008a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480c      	ldr	r0, [pc, #48]	@ (8000908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d6:	490d      	ldr	r1, [pc, #52]	@ (800090c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f002 fb7d 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fe03 	bl	8000508 <main>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000904:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000910:	08003098 	.word	0x08003098
  ldr r2, =_sbss
 8000914:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000918:	2000057c 	.word	0x2000057c

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>

0800091e <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 8000928:	f000 fa30 	bl	8000d8c <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	605a      	str	r2, [r3, #4]
	delay->running=false;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	721a      	strb	r2, [r3, #8]

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <delayRead>:



bool_t delayRead(delay_t *delay){
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7a1b      	ldrb	r3, [r3, #8]
 8000952:	f083 0301 	eor.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d007      	beq.n	800096c <delayRead+0x26>
		delay->startTime=HAL_GetTick();
 800095c:	f000 fa16 	bl	8000d8c <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
		delay->running=true;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	721a      	strb	r2, [r3, #8]
	}

	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 800096c:	f000 fa0e 	bl	8000d8c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	1ad2      	subs	r2, r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d304      	bcc.n	800098a <delayRead+0x44>
		delay->running=false;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	721a      	strb	r2, [r3, #8]
		return true;
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <delayRead+0x46>
	}

	return false;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <toggleLed_GPIO>:
 * @brief Alternar LED GPIO
 * @param led_t LDx
 * @retval ninguno
 */

void toggleLed_GPIO(led_t LDx){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LDx);
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <toggleLed_GPIO+0x1c>)
 80009a4:	f000 fccd 	bl	8001342 <HAL_GPIO_TogglePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40020400 	.word	0x40020400

080009b4 <readButton_GPIO>:

buttonStatus_t readButton_GPIO(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin);
 80009b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <readButton_GPIO+0x20>)
 80009be:	f000 fc8f 	bl	80012e0 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf14      	ite	ne
 80009c8:	2301      	movne	r3, #1
 80009ca:	2300      	moveq	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020800 	.word	0x40020800

080009d8 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2234      	movs	r2, #52	@ 0x34
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fafd 	bl	8002fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <SystemClock_Config+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <SystemClock_Config+0xd4>)
 8000a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <SystemClock_Config+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000a4c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a56:	2308      	movs	r3, #8
 8000a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fa6e 	bl	8001f44 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a6e:	f7ff fe07 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fdac 	bl	80015ec <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a9a:	f7ff fdf1 	bl	8000680 <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3750      	adds	r7, #80	@ 0x50
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_USART3_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae8:	f001 fcb0 	bl	800244c <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f7ff fdc5 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000004c 	.word	0x2000004c
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b12:	2206      	movs	r2, #6
 8000b14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4e:	f000 fc12 	bl	8001376 <HAL_PCD_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000b58:	f7ff fd92 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000094 	.word	0x20000094

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a4b      	ldr	r2, [pc, #300]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b49      	ldr	r3, [pc, #292]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	4b45      	ldr	r3, [pc, #276]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a44      	ldr	r2, [pc, #272]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b42      	ldr	r3, [pc, #264]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a3d      	ldr	r2, [pc, #244]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b37      	ldr	r3, [pc, #220]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a36      	ldr	r2, [pc, #216]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a28      	ldr	r2, [pc, #160]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c28:	4822      	ldr	r0, [pc, #136]	@ (8000cb4 <MX_GPIO_Init+0x150>)
 8000c2a:	f000 fb71 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	4821      	ldr	r0, [pc, #132]	@ (8000cb8 <MX_GPIO_Init+0x154>)
 8000c34:	f000 fb6c 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481b      	ldr	r0, [pc, #108]	@ (8000cbc <MX_GPIO_Init+0x158>)
 8000c50:	f000 f9b2 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c54:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <MX_GPIO_Init+0x150>)
 8000c6e:	f000 f9a3 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c72:	2340      	movs	r3, #64	@ 0x40
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <MX_GPIO_Init+0x154>)
 8000c8a:	f000 f995 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_GPIO_Init+0x154>)
 8000ca2:	f000 f989 	bl	8000fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	@ 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40021800 	.word	0x40021800
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f931 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fcca 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f93b 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f911 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	20000014 	.word	0x20000014
 8000d60:	20000010 	.word	0x20000010

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000578 	.word	0x20000578

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000578 	.word	0x20000578

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000014 	.word	0x20000014

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff47 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff5c 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffb0 	bl	8000f0c <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e165      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8154 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	2b02      	cmp	r3, #2
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80ae 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <HAL_GPIO_Init+0x300>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	4a5c      	ldr	r2, [pc, #368]	@ (80012b8 <HAL_GPIO_Init+0x300>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114c:	6453      	str	r3, [r2, #68]	@ 0x44
 800114e:	4b5a      	ldr	r3, [pc, #360]	@ (80012b8 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115a:	4a58      	ldr	r2, [pc, #352]	@ (80012bc <HAL_GPIO_Init+0x304>)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4f      	ldr	r2, [pc, #316]	@ (80012c0 <HAL_GPIO_Init+0x308>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x21a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4e      	ldr	r2, [pc, #312]	@ (80012c4 <HAL_GPIO_Init+0x30c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x216>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4d      	ldr	r2, [pc, #308]	@ (80012c8 <HAL_GPIO_Init+0x310>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x212>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x20e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4b      	ldr	r2, [pc, #300]	@ (80012d0 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x20a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4a      	ldr	r2, [pc, #296]	@ (80012d4 <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x206>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a49      	ldr	r2, [pc, #292]	@ (80012d8 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x202>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	@ (80012bc <HAL_GPIO_Init+0x304>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b3a      	ldr	r3, [pc, #232]	@ (80012dc <HAL_GPIO_Init+0x324>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <HAL_GPIO_Init+0x324>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a26      	ldr	r2, [pc, #152]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001246:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <HAL_GPIO_Init+0x324>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001270:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001294:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f ae96 	bls.w	8000fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	041a      	lsls	r2, r3, #16
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43d9      	mvns	r1, r3
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	400b      	ands	r3, r1
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af02      	add	r7, sp, #8
 800137c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e108      	b.n	800159a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff f9e2 	bl	800076c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013b6:	d102      	bne.n	80013be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fb7a 	bl	8002abc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7c1a      	ldrb	r2, [r3, #16]
 80013d0:	f88d 2000 	strb.w	r2, [sp]
 80013d4:	3304      	adds	r3, #4
 80013d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d8:	f001 fb0c 	bl	80029f4 <USB_CoreInit>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2202      	movs	r2, #2
 80013e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0d5      	b.n	800159a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fb72 	bl	8002ade <USB_SetCurrentMode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0c6      	b.n	800159a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e04a      	b.n	80014a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	3315      	adds	r3, #21
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3314      	adds	r3, #20
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	b298      	uxth	r0, r3
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	332e      	adds	r3, #46	@ 0x2e
 800144e:	4602      	mov	r2, r0
 8001450:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3318      	adds	r3, #24
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	331c      	adds	r3, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	3320      	adds	r3, #32
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3324      	adds	r3, #36	@ 0x24
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3af      	bcc.n	8001412 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e044      	b.n	8001542 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	3301      	adds	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3b5      	bcc.n	80014b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7c1a      	ldrb	r2, [r3, #16]
 8001554:	f88d 2000 	strb.w	r2, [sp]
 8001558:	3304      	adds	r3, #4
 800155a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155c:	f001 fb0c 	bl	8002b78 <USB_DevInit>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e013      	b.n	800159a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7b1b      	ldrb	r3, [r3, #12]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d102      	bne.n	800158e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f80a 	bl	80015a2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fcc7 	bl	8002f26 <USB_DevDisconnect>

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	f043 0303 	orr.w	r3, r3, #3
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fb56 	bl	8000d8c <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fb52 	bl	8000d8c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fab6 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08003070 	.word	0x08003070
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	20000010 	.word	0x20000010

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017bc:	b094      	sub	sp, #80	@ 0x50
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b79      	ldr	r3, [pc, #484]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80e1 	bhi.w	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e0db      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b73      	ldr	r3, [pc, #460]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80017ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017f0:	e0db      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b73      	ldr	r3, [pc, #460]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80017f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017f6:	e0d8      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001800:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b6d      	ldr	r3, [pc, #436]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d063      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	2200      	movs	r2, #0
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001818:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800181c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001820:	633b      	str	r3, [r7, #48]	@ 0x30
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	@ 0x34
 8001826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800182a:	4622      	mov	r2, r4
 800182c:	462b      	mov	r3, r5
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4621      	mov	r1, r4
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	6139      	str	r1, [r7, #16]
 8001848:	4629      	mov	r1, r5
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800185c:	4659      	mov	r1, fp
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4651      	mov	r1, sl
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4651      	mov	r1, sl
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4651      	mov	r1, sl
 800186c:	ebb2 0801 	subs.w	r8, r2, r1
 8001870:	4659      	mov	r1, fp
 8001872:	eb63 0901 	sbc.w	r9, r3, r1
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188a:	4690      	mov	r8, r2
 800188c:	4699      	mov	r9, r3
 800188e:	4623      	mov	r3, r4
 8001890:	eb18 0303 	adds.w	r3, r8, r3
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	462b      	mov	r3, r5
 8001898:	eb49 0303 	adc.w	r3, r9, r3
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018aa:	4629      	mov	r1, r5
 80018ac:	024b      	lsls	r3, r1, #9
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b4:	4621      	mov	r1, r4
 80018b6:	024a      	lsls	r2, r1, #9
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018be:	2200      	movs	r2, #0
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018c8:	f7fe fca6 	bl	8000218 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018d4:	e058      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d6:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	2200      	movs	r2, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	4611      	mov	r1, r2
 80018e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e6:	623b      	str	r3, [r7, #32]
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f0:	4642      	mov	r2, r8
 80018f2:	464b      	mov	r3, r9
 80018f4:	f04f 0000 	mov.w	r0, #0
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	0159      	lsls	r1, r3, #5
 80018fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001902:	0150      	lsls	r0, r2, #5
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4641      	mov	r1, r8
 800190a:	ebb2 0a01 	subs.w	sl, r2, r1
 800190e:	4649      	mov	r1, r9
 8001910:	eb63 0b01 	sbc.w	fp, r3, r1
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001928:	ebb2 040a 	subs.w	r4, r2, sl
 800192c:	eb63 050b 	sbc.w	r5, r3, fp
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	00eb      	lsls	r3, r5, #3
 800193a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193e:	00e2      	lsls	r2, r4, #3
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	4643      	mov	r3, r8
 8001946:	18e3      	adds	r3, r4, r3
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	464b      	mov	r3, r9
 800194c:	eb45 0303 	adc.w	r3, r5, r3
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195e:	4629      	mov	r1, r5
 8001960:	028b      	lsls	r3, r1, #10
 8001962:	4621      	mov	r1, r4
 8001964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001968:	4621      	mov	r1, r4
 800196a:	028a      	lsls	r2, r1, #10
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001972:	2200      	movs	r2, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	61fa      	str	r2, [r7, #28]
 8001978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197c:	f7fe fc4c 	bl	8000218 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800199a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80019a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3750      	adds	r7, #80	@ 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000000c 	.word	0x2000000c

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e0:	f7ff fff0 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0a9b      	lsrs	r3, r3, #10
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	@ (8001a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08003080 	.word	0x08003080

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a08:	f7ff ffdc 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0b5b      	lsrs	r3, r3, #13
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	@ (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08003080 	.word	0x08003080

08001a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a50:	4b7a      	ldr	r3, [pc, #488]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a56:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4977      	ldr	r1, [pc, #476]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d010      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a84:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	496b      	ldr	r1, [pc, #428]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d022      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001aac:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aba:	4960      	ldr	r1, [pc, #384]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ad6:	d10c      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001ad8:	4b58      	ldr	r3, [pc, #352]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ade:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	4954      	ldr	r1, [pc, #336]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d022      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001afe:	4b4f      	ldr	r3, [pc, #316]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0c:	494b      	ldr	r1, [pc, #300]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001b2a:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	493f      	ldr	r1, [pc, #252]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 808a 	beq.w	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b39      	ldr	r3, [pc, #228]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a38      	ldr	r2, [pc, #224]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a33      	ldr	r2, [pc, #204]	@ (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b7a:	f7ff f907 	bl	8000d8c <HAL_GetTick>
 8001b7e:	61b8      	str	r0, [r7, #24]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b82:	f7ff f903 	bl	8000d8c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1d1      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ba0:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba8:	617b      	str	r3, [r7, #20]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d02f      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d028      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bc6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001bd4:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d114      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff f8d1 	bl	8000d8c <HAL_GetTick>
 8001bea:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff f8cd 	bl	8000d8c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e199      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c1c:	d114      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c32:	4902      	ldr	r1, [pc, #8]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
 8001c38:	e00c      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000
 8001c44:	42470e40 	.word	0x42470e40
 8001c48:	4b89      	ldr	r3, [pc, #548]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a88      	ldr	r2, [pc, #544]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c4e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001c52:	6093      	str	r3, [r2, #8]
 8001c54:	4b86      	ldr	r3, [pc, #536]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	4983      	ldr	r1, [pc, #524]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8001c78:	4b7e      	ldr	r3, [pc, #504]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001c7a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00a      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c88:	4b79      	ldr	r3, [pc, #484]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	4976      	ldr	r1, [pc, #472]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d011      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001caa:	4b71      	ldr	r3, [pc, #452]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	496d      	ldr	r1, [pc, #436]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001cc8:	d101      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001cda:	4b65      	ldr	r3, [pc, #404]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	4961      	ldr	r1, [pc, #388]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d004      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b80      	cmp	r3, #128	@ 0x80
 8001cfc:	f040 80c6 	bne.w	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d00:	4b5d      	ldr	r3, [pc, #372]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d06:	f7ff f841 	bl	8000d8c <HAL_GetTick>
 8001d0a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d0e:	f7ff f83d 	bl	8000d8c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e10b      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d20:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001d2c:	4a53      	ldr	r2, [pc, #332]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d32:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x31c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d023      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x330>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x346>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d70:	d00e      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d019      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d115      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d8e:	d110      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	071b      	lsls	r3, r3, #28
 8001daa:	4931      	ldr	r1, [pc, #196]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d026      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d122      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dda:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001de0:	0e1b      	lsrs	r3, r3, #24
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	431a      	orrs	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	061b      	lsls	r3, r3, #24
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	071b      	lsls	r3, r3, #28
 8001e00:	491b      	ldr	r1, [pc, #108]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e0e:	f023 021f 	bic.w	r2, r3, #31
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	4915      	ldr	r1, [pc, #84]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	071b      	lsls	r3, r3, #28
 8001e46:	490a      	ldr	r1, [pc, #40]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e54:	f7fe ff9a 	bl	8000d8c <HAL_GetTick>
 8001e58:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e5a:	e011      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e5c:	f7fe ff96 	bl	8000d8c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d90a      	bls.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e064      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	424711e0 	.word	0x424711e0
 8001e78:	42470068 	.word	0x42470068
 8001e7c:	424710d8 	.word	0x424710d8
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e80:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0e7      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e98:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea6:	4926      	ldr	r1, [pc, #152]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec8:	491d      	ldr	r1, [pc, #116]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001edc:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eea:	4915      	ldr	r1, [pc, #84]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f04:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	490c      	ldr	r1, [pc, #48]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f20:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e273      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d075      	beq.n	800204e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f62:	4b88      	ldr	r3, [pc, #544]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d00c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6e:	4b85      	ldr	r3, [pc, #532]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d112      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7a:	4b82      	ldr	r3, [pc, #520]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f86:	d10b      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	4b7e      	ldr	r3, [pc, #504]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d05b      	beq.n	800204c <HAL_RCC_OscConfig+0x108>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d157      	bne.n	800204c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e24e      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x74>
 8001faa:	4b76      	ldr	r3, [pc, #472]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a75      	ldr	r2, [pc, #468]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xb0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x98>
 8001fc2:	4b70      	ldr	r3, [pc, #448]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b6d      	ldr	r3, [pc, #436]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6c      	ldr	r2, [pc, #432]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	4b69      	ldr	r3, [pc, #420]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a68      	ldr	r2, [pc, #416]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a65      	ldr	r2, [pc, #404]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fec6 	bl	8000d8c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe fec2 	bl	8000d8c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e213      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b5b      	ldr	r3, [pc, #364]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xc0>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7fe feb2 	bl	8000d8c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7fe feae 	bl	8000d8c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1ff      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b51      	ldr	r3, [pc, #324]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0xe8>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800205a:	4b4a      	ldr	r3, [pc, #296]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002066:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
        || \
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002072:	4b44      	ldr	r3, [pc, #272]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x152>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1d3      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4937      	ldr	r1, [pc, #220]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <HAL_RCC_OscConfig+0x244>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7fe fe67 	bl	8000d8c <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe fe63 	bl	8000d8c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1b4      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4925      	ldr	r1, [pc, #148]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <HAL_RCC_OscConfig+0x244>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fe46 	bl	8000d8c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7fe fe42 	bl	8000d8c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e193      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d036      	beq.n	800219c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_RCC_OscConfig+0x248>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7fe fe26 	bl	8000d8c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fe22 	bl	8000d8c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e173      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_OscConfig+0x240>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x200>
 8002162:	e01b      	b.n	800219c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_RCC_OscConfig+0x248>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7fe fe0f 	bl	8000d8c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	e00e      	b.n	8002190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002172:	f7fe fe0b 	bl	8000d8c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d907      	bls.n	8002190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e15c      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
 8002184:	40023800 	.word	0x40023800
 8002188:	42470000 	.word	0x42470000
 800218c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	4b8a      	ldr	r3, [pc, #552]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ea      	bne.n	8002172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8097 	beq.w	80022d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b83      	ldr	r3, [pc, #524]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	4a7e      	ldr	r2, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ca:	4b7c      	ldr	r3, [pc, #496]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b79      	ldr	r3, [pc, #484]	@ (80023c0 <HAL_RCC_OscConfig+0x47c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d118      	bne.n	8002218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e6:	4b76      	ldr	r3, [pc, #472]	@ (80023c0 <HAL_RCC_OscConfig+0x47c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	@ (80023c0 <HAL_RCC_OscConfig+0x47c>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fdcb 	bl	8000d8c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7fe fdc7 	bl	8000d8c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e118      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	4b6c      	ldr	r3, [pc, #432]	@ (80023c0 <HAL_RCC_OscConfig+0x47c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x2ea>
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6713      	str	r3, [r2, #112]	@ 0x70
 800222c:	e01c      	b.n	8002268 <HAL_RCC_OscConfig+0x324>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x30c>
 8002236:	4b61      	ldr	r3, [pc, #388]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	4a60      	ldr	r2, [pc, #384]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6713      	str	r3, [r2, #112]	@ 0x70
 8002242:	4b5e      	ldr	r3, [pc, #376]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	4a5d      	ldr	r2, [pc, #372]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6713      	str	r3, [r2, #112]	@ 0x70
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0x324>
 8002250:	4b5a      	ldr	r3, [pc, #360]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	4a59      	ldr	r2, [pc, #356]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	@ 0x70
 800225c:	4b57      	ldr	r3, [pc, #348]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002260:	4a56      	ldr	r2, [pc, #344]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002262:	f023 0304 	bic.w	r3, r3, #4
 8002266:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7fe fd8c 	bl	8000d8c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	e00a      	b.n	800228e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe fd88 	bl	8000d8c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0d7      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	4b4b      	ldr	r3, [pc, #300]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ee      	beq.n	8002278 <HAL_RCC_OscConfig+0x334>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7fe fd76 	bl	8000d8c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7fe fd72 	bl	8000d8c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0c1      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ba:	4b40      	ldr	r3, [pc, #256]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ee      	bne.n	80022a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	4a3a      	ldr	r2, [pc, #232]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80022d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80ad 	beq.w	800243c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e2:	4b36      	ldr	r3, [pc, #216]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d060      	beq.n	80023b0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d145      	bne.n	8002382 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <HAL_RCC_OscConfig+0x480>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fd46 	bl	8000d8c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fd42 	bl	8000d8c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e093      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b29      	ldr	r3, [pc, #164]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	491b      	ldr	r1, [pc, #108]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_RCC_OscConfig+0x480>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fd17 	bl	8000d8c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7fe fd13 	bl	8000d8c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e064      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x41e>
 8002380:	e05c      	b.n	800243c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_RCC_OscConfig+0x480>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fd00 	bl	8000d8c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fcfc 	bl	8000d8c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e04d      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_RCC_OscConfig+0x478>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x44c>
 80023ae:	e045      	b.n	800243c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e040      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000
 80023c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <HAL_RCC_OscConfig+0x504>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d030      	beq.n	8002438 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d129      	bne.n	8002438 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d122      	bne.n	8002438 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002400:	4293      	cmp	r3, r2
 8002402:	d119      	bne.n	8002438 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	3b01      	subs	r3, #1
 8002412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d10f      	bne.n	8002438 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800

0800244c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e042      	b.n	80024e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe f932 	bl	80006dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	@ 0x24
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800248e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f82b 	bl	80024ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f0:	b0c0      	sub	sp, #256	@ 0x100
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	68d9      	ldr	r1, [r3, #12]
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	ea40 0301 	orr.w	r3, r0, r1
 8002514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	431a      	orrs	r2, r3
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	431a      	orrs	r2, r3
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002544:	f021 010c 	bic.w	r1, r1, #12
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002552:	430b      	orrs	r3, r1
 8002554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	6999      	ldr	r1, [r3, #24]
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	ea40 0301 	orr.w	r3, r0, r1
 8002572:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b95      	ldr	r3, [pc, #596]	@ (80027d0 <UART_SetConfig+0x2e4>)
 800257c:	429a      	cmp	r2, r3
 800257e:	d011      	beq.n	80025a4 <UART_SetConfig+0xb8>
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b93      	ldr	r3, [pc, #588]	@ (80027d4 <UART_SetConfig+0x2e8>)
 8002588:	429a      	cmp	r2, r3
 800258a:	d00b      	beq.n	80025a4 <UART_SetConfig+0xb8>
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b91      	ldr	r3, [pc, #580]	@ (80027d8 <UART_SetConfig+0x2ec>)
 8002594:	429a      	cmp	r2, r3
 8002596:	d005      	beq.n	80025a4 <UART_SetConfig+0xb8>
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b8f      	ldr	r3, [pc, #572]	@ (80027dc <UART_SetConfig+0x2f0>)
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d104      	bne.n	80025ae <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025a4:	f7ff fa2e 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 80025a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025ac:	e003      	b.n	80025b6 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ae:	f7ff fa15 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 80025b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025c0:	f040 8110 	bne.w	80027e4 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80025d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80025d6:	4622      	mov	r2, r4
 80025d8:	462b      	mov	r3, r5
 80025da:	1891      	adds	r1, r2, r2
 80025dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025de:	415b      	adcs	r3, r3
 80025e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025e6:	4621      	mov	r1, r4
 80025e8:	eb12 0801 	adds.w	r8, r2, r1
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb43 0901 	adc.w	r9, r3, r1
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002606:	4690      	mov	r8, r2
 8002608:	4699      	mov	r9, r3
 800260a:	4623      	mov	r3, r4
 800260c:	eb18 0303 	adds.w	r3, r8, r3
 8002610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002614:	462b      	mov	r3, r5
 8002616:	eb49 0303 	adc.w	r3, r9, r3
 800261a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800261e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800262a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800262e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002632:	460b      	mov	r3, r1
 8002634:	18db      	adds	r3, r3, r3
 8002636:	653b      	str	r3, [r7, #80]	@ 0x50
 8002638:	4613      	mov	r3, r2
 800263a:	eb42 0303 	adc.w	r3, r2, r3
 800263e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002648:	f7fd fde6 	bl	8000218 <__aeabi_uldivmod>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <UART_SetConfig+0x2f4>)
 8002652:	fba3 2302 	umull	r2, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	011c      	lsls	r4, r3, #4
 800265a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800265e:	2200      	movs	r2, #0
 8002660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002664:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800266c:	4642      	mov	r2, r8
 800266e:	464b      	mov	r3, r9
 8002670:	1891      	adds	r1, r2, r2
 8002672:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002674:	415b      	adcs	r3, r3
 8002676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800267c:	4641      	mov	r1, r8
 800267e:	eb12 0a01 	adds.w	sl, r2, r1
 8002682:	4649      	mov	r1, r9
 8002684:	eb43 0b01 	adc.w	fp, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800269c:	4692      	mov	sl, r2
 800269e:	469b      	mov	fp, r3
 80026a0:	4643      	mov	r3, r8
 80026a2:	eb1a 0303 	adds.w	r3, sl, r3
 80026a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026aa:	464b      	mov	r3, r9
 80026ac:	eb4b 0303 	adc.w	r3, fp, r3
 80026b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80026c8:	460b      	mov	r3, r1
 80026ca:	18db      	adds	r3, r3, r3
 80026cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80026ce:	4613      	mov	r3, r2
 80026d0:	eb42 0303 	adc.w	r3, r2, r3
 80026d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026de:	f7fd fd9b 	bl	8000218 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <UART_SetConfig+0x2f4>)
 80026ea:	fba3 2301 	umull	r2, r3, r3, r1
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2264      	movs	r2, #100	@ 0x64
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	1acb      	subs	r3, r1, r3
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026fe:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <UART_SetConfig+0x2f4>)
 8002700:	fba3 2302 	umull	r2, r3, r3, r2
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800270c:	441c      	add	r4, r3
 800270e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002718:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800271c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	1891      	adds	r1, r2, r2
 8002726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002728:	415b      	adcs	r3, r3
 800272a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800272c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002730:	4641      	mov	r1, r8
 8002732:	1851      	adds	r1, r2, r1
 8002734:	6339      	str	r1, [r7, #48]	@ 0x30
 8002736:	4649      	mov	r1, r9
 8002738:	414b      	adcs	r3, r1
 800273a:	637b      	str	r3, [r7, #52]	@ 0x34
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002748:	4659      	mov	r1, fp
 800274a:	00cb      	lsls	r3, r1, #3
 800274c:	4651      	mov	r1, sl
 800274e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002752:	4651      	mov	r1, sl
 8002754:	00ca      	lsls	r2, r1, #3
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	4603      	mov	r3, r0
 800275c:	4642      	mov	r2, r8
 800275e:	189b      	adds	r3, r3, r2
 8002760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002764:	464b      	mov	r3, r9
 8002766:	460a      	mov	r2, r1
 8002768:	eb42 0303 	adc.w	r3, r2, r3
 800276c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800277c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002784:	460b      	mov	r3, r1
 8002786:	18db      	adds	r3, r3, r3
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800278a:	4613      	mov	r3, r2
 800278c:	eb42 0303 	adc.w	r3, r2, r3
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800279a:	f7fd fd3d 	bl	8000218 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <UART_SetConfig+0x2f4>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	@ 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	3332      	adds	r3, #50	@ 0x32
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <UART_SetConfig+0x2f4>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	f003 0207 	and.w	r2, r3, #7
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4422      	add	r2, r4
 80027ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027cc:	e10a      	b.n	80029e4 <UART_SetConfig+0x4f8>
 80027ce:	bf00      	nop
 80027d0:	40011000 	.word	0x40011000
 80027d4:	40011400 	.word	0x40011400
 80027d8:	40011800 	.word	0x40011800
 80027dc:	40011c00 	.word	0x40011c00
 80027e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027f6:	4642      	mov	r2, r8
 80027f8:	464b      	mov	r3, r9
 80027fa:	1891      	adds	r1, r2, r2
 80027fc:	6239      	str	r1, [r7, #32]
 80027fe:	415b      	adcs	r3, r3
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
 8002802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002806:	4641      	mov	r1, r8
 8002808:	1854      	adds	r4, r2, r1
 800280a:	4649      	mov	r1, r9
 800280c:	eb43 0501 	adc.w	r5, r3, r1
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	00eb      	lsls	r3, r5, #3
 800281a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281e:	00e2      	lsls	r2, r4, #3
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	4643      	mov	r3, r8
 8002826:	18e3      	adds	r3, r4, r3
 8002828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800282c:	464b      	mov	r3, r9
 800282e:	eb45 0303 	adc.w	r3, r5, r3
 8002832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002842:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002852:	4629      	mov	r1, r5
 8002854:	008b      	lsls	r3, r1, #2
 8002856:	4621      	mov	r1, r4
 8002858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800285c:	4621      	mov	r1, r4
 800285e:	008a      	lsls	r2, r1, #2
 8002860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002864:	f7fd fcd8 	bl	8000218 <__aeabi_uldivmod>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4b60      	ldr	r3, [pc, #384]	@ (80029f0 <UART_SetConfig+0x504>)
 800286e:	fba3 2302 	umull	r2, r3, r3, r2
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	011c      	lsls	r4, r3, #4
 8002876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002888:	4642      	mov	r2, r8
 800288a:	464b      	mov	r3, r9
 800288c:	1891      	adds	r1, r2, r2
 800288e:	61b9      	str	r1, [r7, #24]
 8002890:	415b      	adcs	r3, r3
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002898:	4641      	mov	r1, r8
 800289a:	1851      	adds	r1, r2, r1
 800289c:	6139      	str	r1, [r7, #16]
 800289e:	4649      	mov	r1, r9
 80028a0:	414b      	adcs	r3, r1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b0:	4659      	mov	r1, fp
 80028b2:	00cb      	lsls	r3, r1, #3
 80028b4:	4651      	mov	r1, sl
 80028b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ba:	4651      	mov	r1, sl
 80028bc:	00ca      	lsls	r2, r1, #3
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	4642      	mov	r2, r8
 80028c6:	189b      	adds	r3, r3, r2
 80028c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028cc:	464b      	mov	r3, r9
 80028ce:	460a      	mov	r2, r1
 80028d0:	eb42 0303 	adc.w	r3, r2, r3
 80028d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028f0:	4649      	mov	r1, r9
 80028f2:	008b      	lsls	r3, r1, #2
 80028f4:	4641      	mov	r1, r8
 80028f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028fa:	4641      	mov	r1, r8
 80028fc:	008a      	lsls	r2, r1, #2
 80028fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002902:	f7fd fc89 	bl	8000218 <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4611      	mov	r1, r2
 800290c:	4b38      	ldr	r3, [pc, #224]	@ (80029f0 <UART_SetConfig+0x504>)
 800290e:	fba3 2301 	umull	r2, r3, r3, r1
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2264      	movs	r2, #100	@ 0x64
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	1acb      	subs	r3, r1, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	3332      	adds	r3, #50	@ 0x32
 8002920:	4a33      	ldr	r2, [pc, #204]	@ (80029f0 <UART_SetConfig+0x504>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292c:	441c      	add	r4, r3
 800292e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002932:	2200      	movs	r2, #0
 8002934:	673b      	str	r3, [r7, #112]	@ 0x70
 8002936:	677a      	str	r2, [r7, #116]	@ 0x74
 8002938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800293c:	4642      	mov	r2, r8
 800293e:	464b      	mov	r3, r9
 8002940:	1891      	adds	r1, r2, r2
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	415b      	adcs	r3, r3
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800294c:	4641      	mov	r1, r8
 800294e:	1851      	adds	r1, r2, r1
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	4649      	mov	r1, r9
 8002954:	414b      	adcs	r3, r1
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002964:	4659      	mov	r1, fp
 8002966:	00cb      	lsls	r3, r1, #3
 8002968:	4651      	mov	r1, sl
 800296a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800296e:	4651      	mov	r1, sl
 8002970:	00ca      	lsls	r2, r1, #3
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	4603      	mov	r3, r0
 8002978:	4642      	mov	r2, r8
 800297a:	189b      	adds	r3, r3, r2
 800297c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800297e:	464b      	mov	r3, r9
 8002980:	460a      	mov	r2, r1
 8002982:	eb42 0303 	adc.w	r3, r2, r3
 8002986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	663b      	str	r3, [r7, #96]	@ 0x60
 8002992:	667a      	str	r2, [r7, #100]	@ 0x64
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029a0:	4649      	mov	r1, r9
 80029a2:	008b      	lsls	r3, r1, #2
 80029a4:	4641      	mov	r1, r8
 80029a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029aa:	4641      	mov	r1, r8
 80029ac:	008a      	lsls	r2, r1, #2
 80029ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029b2:	f7fd fc31 	bl	8000218 <__aeabi_uldivmod>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <UART_SetConfig+0x504>)
 80029bc:	fba3 1302 	umull	r1, r3, r3, r2
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	2164      	movs	r1, #100	@ 0x64
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	3332      	adds	r3, #50	@ 0x32
 80029ce:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <UART_SetConfig+0x504>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4422      	add	r2, r4
 80029e2:	609a      	str	r2, [r3, #8]
}
 80029e4:	bf00      	nop
 80029e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029ea:	46bd      	mov	sp, r7
 80029ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f0:	51eb851f 	.word	0x51eb851f

080029f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029f4:	b084      	sub	sp, #16
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	f107 001c 	add.w	r0, r7, #28
 8002a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d123      	bne.n	8002a56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa9a 	bl	8002f84 <USB_CoreReset>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e01b      	b.n	8002a8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa8e 	bl	8002f84 <USB_CoreReset>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a80:	e005      	b.n	8002a8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a8e:	7fbb      	ldrb	r3, [r7, #30]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10b      	bne.n	8002aac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f043 0206 	orr.w	r2, r3, #6
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ab8:	b004      	add	sp, #16
 8002aba:	4770      	bx	lr

08002abc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 0201 	bic.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d115      	bne.n	8002b2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002b0c:	200a      	movs	r0, #10
 8002b0e:	f7fe f949 	bl	8000da4 <HAL_Delay>
      ms += 10U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	330a      	adds	r3, #10
 8002b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa25 	bl	8002f68 <USB_GetMode>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d01e      	beq.n	8002b62 <USB_SetCurrentMode+0x84>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b28:	d9f0      	bls.n	8002b0c <USB_SetCurrentMode+0x2e>
 8002b2a:	e01a      	b.n	8002b62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d115      	bne.n	8002b5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002b3e:	200a      	movs	r0, #10
 8002b40:	f7fe f930 	bl	8000da4 <HAL_Delay>
      ms += 10U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	330a      	adds	r3, #10
 8002b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa0c 	bl	8002f68 <USB_GetMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <USB_SetCurrentMode+0x84>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b5a:	d9f0      	bls.n	8002b3e <USB_SetCurrentMode+0x60>
 8002b5c:	e001      	b.n	8002b62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e005      	b.n	8002b6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b66:	d101      	bne.n	8002b6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b78:	b084      	sub	sp, #16
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	e009      	b.n	8002bac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	3340      	adds	r3, #64	@ 0x40
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b0e      	cmp	r3, #14
 8002bb0:	d9f2      	bls.n	8002b98 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002bb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11c      	bne.n	8002bf4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e005      	b.n	8002c00 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002c06:	461a      	mov	r2, r3
 8002c08:	2300      	movs	r3, #0
 8002c0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10d      	bne.n	8002c30 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f968 	bl	8002ef4 <USB_SetDevSpeed>
 8002c24:	e008      	b.n	8002c38 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c26:	2101      	movs	r1, #1
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f963 	bl	8002ef4 <USB_SetDevSpeed>
 8002c2e:	e003      	b.n	8002c38 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c30:	2103      	movs	r1, #3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f95e 	bl	8002ef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002c38:	2110      	movs	r1, #16
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8fa 	bl	8002e34 <USB_FlushTxFifo>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f924 	bl	8002e98 <USB_FlushRxFifo>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c60:	461a      	mov	r2, r3
 8002c62:	2300      	movs	r3, #0
 8002c64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2300      	movs	r3, #0
 8002c70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e043      	b.n	8002d0c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c9a:	d118      	bne.n	8002cce <USB_DevInit+0x156>
    {
      if (i == 0U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e013      	b.n	8002ce0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e008      	b.n	8002ce0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cec:	461a      	mov	r2, r3
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d10:	461a      	mov	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d3b5      	bcc.n	8002c84 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	e043      	b.n	8002da6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d34:	d118      	bne.n	8002d68 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e013      	b.n	8002d7a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e008      	b.n	8002d7a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d74:	461a      	mov	r2, r3
 8002d76:	2300      	movs	r3, #0
 8002d78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d86:	461a      	mov	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	3301      	adds	r3, #1
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002daa:	461a      	mov	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d3b5      	bcc.n	8002d1e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002dd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f043 0210 	orr.w	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <USB_DevInit+0x2b8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002df4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f043 0208 	orr.w	r2, r3, #8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002e08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e2c:	b004      	add	sp, #16
 8002e2e:	4770      	bx	lr
 8002e30:	803c3800 	.word	0x803c3800

08002e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3301      	adds	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e4e:	d901      	bls.n	8002e54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e01b      	b.n	8002e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	daf2      	bge.n	8002e42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	019b      	lsls	r3, r3, #6
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e78:	d901      	bls.n	8002e7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e006      	b.n	8002e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d0f0      	beq.n	8002e6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002eb0:	d901      	bls.n	8002eb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e018      	b.n	8002ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	daf2      	bge.n	8002ea4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ed4:	d901      	bls.n	8002eda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e006      	b.n	8002ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d0f0      	beq.n	8002ec8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002f40:	f023 0303 	bic.w	r3, r3, #3
 8002f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0301 	and.w	r3, r3, #1
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f9c:	d901      	bls.n	8002fa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e01b      	b.n	8002fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	daf2      	bge.n	8002f90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002fc6:	d901      	bls.n	8002fcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e006      	b.n	8002fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d0f0      	beq.n	8002fba <USB_CoreReset+0x36>

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <memset>:
 8002fe6:	4402      	add	r2, r0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d100      	bne.n	8002ff0 <memset+0xa>
 8002fee:	4770      	bx	lr
 8002ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff4:	e7f9      	b.n	8002fea <memset+0x4>
	...

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8003030 <__libc_init_array+0x38>)
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	@ (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	2600      	movs	r6, #0
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	4d0b      	ldr	r5, [pc, #44]	@ (8003038 <__libc_init_array+0x40>)
 800300a:	4c0c      	ldr	r4, [pc, #48]	@ (800303c <__libc_init_array+0x44>)
 800300c:	f000 f818 	bl	8003040 <_init>
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	2600      	movs	r6, #0
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	08003090 	.word	0x08003090
 8003034:	08003090 	.word	0x08003090
 8003038:	08003090 	.word	0x08003090
 800303c:	08003094 	.word	0x08003094

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
