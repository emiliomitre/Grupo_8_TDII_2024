/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "API_GPIO.h"
#include "API_Delay.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {SECUENCIA_NORMAL, SECUENCIA_INVERSA} Secuencia_t;
typedef enum {ESPERA_BOTON, DEBOUNCE, CAMBIO_SECUENCIA} EstadoBoton_t;
typedef enum {LED_ON, LED_OFF} EstadoLED_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define N 3 				//variable N para definir el tamaño del vector LED
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
Secuencia_t secuenciaActual = SECUENCIA_NORMAL;
EstadoBoton_t estadoBoton = ESPERA_BOTON;
EstadoLED_t estadoLED = LED_ON;

delay_t ledDelay;
delay_t buttonDebounceDelay;
int ledIndex = 0;

//delay_t delays[N]={delay_t delayLed1, delayLed2, delayLed3};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/


/* USER CODE BEGIN PFP */
// Inicialización de delays
void initDelays() {
    delayInit(&ledDelay, 200);          // Retardo de LEDs
    delayInit(&buttonDebounceDelay, 50); // Retardo para debounce del botón
}

// Máquina de estado para la gestión del botón
void actualizarEstadoBoton() {
    switch (estadoBoton) {
        case ESPERA_BOTON:
            if (readButton_GPIO()) { // Botón presionado
                estadoBoton = DEBOUNCE;
                delayRead(&buttonDebounceDelay); // Reiniciar el debounce
            }
            break;

        case DEBOUNCE:
            if (delayRead(&buttonDebounceDelay)) { // Tiempo de debounce transcurrido
                if (readButton_GPIO()) { // Verificar que sigue presionado
                    estadoBoton = CAMBIO_SECUENCIA;
                } else {
                    estadoBoton = ESPERA_BOTON;
                }
            }
            break;

        case CAMBIO_SECUENCIA:
            secuenciaActual = (secuenciaActual == SECUENCIA_NORMAL) ? SECUENCIA_INVERSA : SECUENCIA_NORMAL;
            estadoBoton = ESPERA_BOTON;
            break;
    }
}

// Máquina de estado para la secuencia de LEDs
void actualizarSecuenciaLED() {
    switch (estadoLED) {
        case LED_ON:
            toggleLed_GPIO(LED[(secuenciaActual == SECUENCIA_NORMAL) ? ledIndex : (LED_COUNT - 1 - ledIndex)]);
            estadoLED = LED_OFF;
            delayRead(&ledDelay); // Reiniciar el delay para la espera de apagado
            break;

        case LED_OFF:
            if (delayRead(&ledDelay)) { // Espera para apagar el LED
                toggleLed_GPIO(LED[(secuenciaActual == SECUENCIA_NORMAL) ? ledIndex : (LED_COUNT - 1 - ledIndex)]);
                estadoLED = LED_ON;
                ledIndex = (ledIndex + 1) % LED_COUNT; // Avanzar al siguiente LED
                delayRead(&ledDelay); // Reiniciar el delay para la espera de encendido
            }
            break;
    }
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();

  /* USER CODE BEGIN 2 */
  initDelays();
  //delayInit(&delayLed2, 200); //definir el tiempo de retardo
  //delayInit(&delayLed2, 200); //definir el tiempo de retardo
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  actualizarEstadoBoton(); // Verificar el estado del botón y cambiar secuencia si es necesario
	  actualizarSecuenciaLED(); // Ejecutar la secuencia de LEDs en base a la secuencia actual

  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}



/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
