
AFP_5_GRUPO_8_Alarma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a8c  08004a8c  000060a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a94  08004a94  000060a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08004a9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200000a0  08004b3c  000060a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004b3c  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caa8  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a7  00000000  00000000  00012b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00014e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00015970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217aa  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010064  00000000  00000000  000379da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8873  00000000  00000000  00047a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001102b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  001102f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00113640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004798 	.word	0x08004798

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	08004798 	.word	0x08004798

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fb08 	bl	8001bf8 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 80005e8:	f000 fffe 	bl	80015e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 ff54 	bl	8001498 <MX_USART2_UART_Init>
  keypad_init();
 80005f0:	f001 f938 	bl	8001864 <keypad_init>
  BT_Test();
 80005f4:	f000 ff90 	bl	8001518 <BT_Test>
  MX_I2C2_Init();
 80005f8:	f001 fad0 	bl	8001b9c <MX_I2C2_Init>
  HAL_Delay(30);
 80005fc:	201e      	movs	r0, #30
 80005fe:	f001 fb6d 	bl	8001cdc <HAL_Delay>
  lcd_init();
 8000602:	f001 f9f7 	bl	80019f4 <lcd_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Led_Encendido_GPIO_Port, Led_Encendido_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060c:	4822      	ldr	r0, [pc, #136]	@ (8000698 <main+0xb8>)
 800060e:	f001 fed9 	bl	80023c4 <HAL_GPIO_WritePin>
  DisplayMainMenu();
 8000612:	f000 f84f 	bl	80006b4 <DisplayMainMenu>
  delayInit(&DelayGRAL_1,20000);
 8000616:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800061a:	4820      	ldr	r0, [pc, #128]	@ (800069c <main+0xbc>)
 800061c:	f000 ffa6 	bl	800156c <delayInit>
  delayInit(&DelayGRAL_2,10000);
 8000620:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000624:	481e      	ldr	r0, [pc, #120]	@ (80006a0 <main+0xc0>)
 8000626:	f000 ffa1 	bl	800156c <delayInit>
  delayInit(&LCD_Muestro,2000);
 800062a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800062e:	481d      	ldr	r0, [pc, #116]	@ (80006a4 <main+0xc4>)
 8000630:	f000 ff9c 	bl	800156c <delayInit>
  delayInit(&Delay_Sirena,500);
 8000634:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000638:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <main+0xc8>)
 800063a:	f000 ff97 	bl	800156c <delayInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key = keypad_getkey(); // Modificacion del if dentro del switch
 800063e:	f001 f96d 	bl	800191c <keypad_getkey>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <main+0xcc>)
 8000648:	701a      	strb	r2, [r3, #0]
	  switch (currentState){
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <main+0xd0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b04      	cmp	r3, #4
 8000650:	dcf5      	bgt.n	800063e <main+0x5e>
 8000652:	2b02      	cmp	r3, #2
 8000654:	da18      	bge.n	8000688 <main+0xa8>
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <main+0x80>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d00a      	beq.n	8000674 <main+0x94>
 800065e:	e019      	b.n	8000694 <main+0xb4>
		  case MAIN_MENU:
			  	  if (key != '\0') HandleMainMenuInput(key);
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <main+0xcc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d012      	beq.n	800068e <main+0xae>
 8000668:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <main+0xcc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f83f 	bl	80006f0 <HandleMainMenuInput>
			  	  break;
 8000672:	e00c      	b.n	800068e <main+0xae>
		  case ALARM_MENU:
			  	  if (key != '\0') HandleAlarmMenuInput(key);
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <main+0xcc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00a      	beq.n	8000692 <main+0xb2>
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <main+0xcc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f86f 	bl	8000764 <HandleAlarmMenuInput>
			  	  break;
 8000686:	e004      	b.n	8000692 <main+0xb2>
		  case CHANGE_PASS_MENU:
		  case TEST_ALARM_MENU:
		  case ACTIVE_ALARM:
			  	  CheckSensors();
 8000688:	f000 fd00 	bl	800108c <CheckSensors>
			  	  break;
 800068c:	e002      	b.n	8000694 <main+0xb4>
			  	  break;
 800068e:	bf00      	nop
 8000690:	e7d5      	b.n	800063e <main+0x5e>
			  	  break;
 8000692:	bf00      	nop
	  key = keypad_getkey(); // Modificacion del if dentro del switch
 8000694:	e7d3      	b.n	800063e <main+0x5e>
 8000696:	bf00      	nop
 8000698:	40021400 	.word	0x40021400
 800069c:	20000174 	.word	0x20000174
 80006a0:	20000180 	.word	0x20000180
 80006a4:	2000018c 	.word	0x2000018c
 80006a8:	20000198 	.word	0x20000198
 80006ac:	2000015d 	.word	0x2000015d
 80006b0:	2000015e 	.word	0x2000015e

080006b4 <DisplayMainMenu>:
/*****************************************************************************************************************
 * @brief: Función para mostrar el menú principal
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayMainMenu() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
    lcd_clear();
 80006b8:	f001 f9c7 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f001 f9cd 	bl	8001a5e <lcd_set_cursor>
    lcd_print("1.Activar *.Mas");
 80006c4:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <DisplayMainMenu+0x30>)
 80006c6:	f001 f9e4 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2001      	movs	r0, #1
 80006ce:	f001 f9c6 	bl	8001a5e <lcd_set_cursor>
    lcd_print("2.Cambiar Pass");
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <DisplayMainMenu+0x34>)
 80006d4:	f001 f9dd 	bl	8001a92 <lcd_print>
    currentState = MAIN_MENU;
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <DisplayMainMenu+0x38>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	080047b0 	.word	0x080047b0
 80006e8:	080047c0 	.word	0x080047c0
 80006ec:	2000015e 	.word	0x2000015e

080006f0 <HandleMainMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú principal
 * @param: recibe una variable tipo caracter para entrar en las distintas opciones de menu
 * @retval: void
******************************************************************************************************************/
void HandleMainMenuInput(char key) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b32      	cmp	r3, #50	@ 0x32
 80006fe:	d008      	beq.n	8000712 <HandleMainMenuInput+0x22>
 8000700:	2b32      	cmp	r3, #50	@ 0x32
 8000702:	dc0c      	bgt.n	800071e <HandleMainMenuInput+0x2e>
 8000704:	2b2a      	cmp	r3, #42	@ 0x2a
 8000706:	d007      	beq.n	8000718 <HandleMainMenuInput+0x28>
 8000708:	2b31      	cmp	r3, #49	@ 0x31
 800070a:	d108      	bne.n	800071e <HandleMainMenuInput+0x2e>
        case '1':
            DisplayAlarmMenu();
 800070c:	f000 f80c 	bl	8000728 <DisplayAlarmMenu>
            break;
 8000710:	e005      	b.n	800071e <HandleMainMenuInput+0x2e>
        case '2':
            DisplayChangePassMenu();
 8000712:	f000 fadd 	bl	8000cd0 <DisplayChangePassMenu>
            break;
 8000716:	e002      	b.n	800071e <HandleMainMenuInput+0x2e>
        case '*':
            HandleSubMenu();
 8000718:	f000 fc52 	bl	8000fc0 <HandleSubMenu>
            break;
 800071c:	bf00      	nop
    }
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <DisplayAlarmMenu>:
/*****************************************************************************************************************
 * @brief: Mostrar menú para activar alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayAlarmMenu(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    lcd_clear();
 800072c:	f001 f98d 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000730:	2100      	movs	r1, #0
 8000732:	2000      	movs	r0, #0
 8000734:	f001 f993 	bl	8001a5e <lcd_set_cursor>
    lcd_print("1.Sist Completo");
 8000738:	4807      	ldr	r0, [pc, #28]	@ (8000758 <DisplayAlarmMenu+0x30>)
 800073a:	f001 f9aa 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 800073e:	2100      	movs	r1, #0
 8000740:	2001      	movs	r0, #1
 8000742:	f001 f98c 	bl	8001a5e <lcd_set_cursor>
    lcd_print("2.Sin Sensor Mov");
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <DisplayAlarmMenu+0x34>)
 8000748:	f001 f9a3 	bl	8001a92 <lcd_print>
    currentState = ALARM_MENU;
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <DisplayAlarmMenu+0x38>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	080047d0 	.word	0x080047d0
 800075c:	080047e0 	.word	0x080047e0
 8000760:	2000015e 	.word	0x2000015e

08000764 <HandleAlarmMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú de alarma
 * @param: Recibe variable tipo caracter
 * @retval:
******************************************************************************************************************/
void HandleAlarmMenuInput(char key) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b32      	cmp	r3, #50	@ 0x32
 8000772:	d013      	beq.n	800079c <HandleAlarmMenuInput+0x38>
 8000774:	2b32      	cmp	r3, #50	@ 0x32
 8000776:	dc3c      	bgt.n	80007f2 <HandleAlarmMenuInput+0x8e>
 8000778:	2b2a      	cmp	r3, #42	@ 0x2a
 800077a:	d01d      	beq.n	80007b8 <HandleAlarmMenuInput+0x54>
 800077c:	2b31      	cmp	r3, #49	@ 0x31
 800077e:	d138      	bne.n	80007f2 <HandleAlarmMenuInput+0x8e>
        case '1':  // Modo "Sistema Completo"
            includeMotionSensor = true;
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <HandleAlarmMenuInput+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(Led_Estado_GPIO_Port, Led_Estado_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800078c:	481c      	ldr	r0, [pc, #112]	@ (8000800 <HandleAlarmMenuInput+0x9c>)
 800078e:	f001 fe19 	bl	80023c4 <HAL_GPIO_WritePin>
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000792:	491c      	ldr	r1, [pc, #112]	@ (8000804 <HandleAlarmMenuInput+0xa0>)
 8000794:	481c      	ldr	r0, [pc, #112]	@ (8000808 <HandleAlarmMenuInput+0xa4>)
 8000796:	f000 f83f 	bl	8000818 <RequestPassword>
            break;
 800079a:	e02a      	b.n	80007f2 <HandleAlarmMenuInput+0x8e>
        case '2':  // Modo "Sin Sensor de Movimiento"
            includeMotionSensor = false;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <HandleAlarmMenuInput+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(Led_Estado_GPIO_Port, Led_Estado_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a8:	4815      	ldr	r0, [pc, #84]	@ (8000800 <HandleAlarmMenuInput+0x9c>)
 80007aa:	f001 fe0b 	bl	80023c4 <HAL_GPIO_WritePin>
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 80007ae:	4915      	ldr	r1, [pc, #84]	@ (8000804 <HandleAlarmMenuInput+0xa0>)
 80007b0:	4815      	ldr	r0, [pc, #84]	@ (8000808 <HandleAlarmMenuInput+0xa4>)
 80007b2:	f000 f831 	bl	8000818 <RequestPassword>
            break;
 80007b6:	e01c      	b.n	80007f2 <HandleAlarmMenuInput+0x8e>
        case '*':  // Si el usuario presiona "*", volver al menú principal
            lcd_clear();
 80007b8:	f001 f947 	bl	8001a4a <lcd_clear>
            lcd_set_cursor(0, 0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f001 f94d 	bl	8001a5e <lcd_set_cursor>
            lcd_print("Operacion");
 80007c4:	4811      	ldr	r0, [pc, #68]	@ (800080c <HandleAlarmMenuInput+0xa8>)
 80007c6:	f001 f964 	bl	8001a92 <lcd_print>
            lcd_set_cursor(1, 0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2001      	movs	r0, #1
 80007ce:	f001 f946 	bl	8001a5e <lcd_set_cursor>
            lcd_print("Cancelada");
 80007d2:	480f      	ldr	r0, [pc, #60]	@ (8000810 <HandleAlarmMenuInput+0xac>)
 80007d4:	f001 f95d 	bl	8001a92 <lcd_print>
            while(!delayRead(&LCD_Muestro)){
 80007d8:	bf00      	nop
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <HandleAlarmMenuInput+0xb0>)
 80007dc:	f000 feda 	bl	8001594 <delayRead>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f083 0301 	eor.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f6      	bne.n	80007da <HandleAlarmMenuInput+0x76>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();  		// Volver al menú principal
 80007ec:	f7ff ff62 	bl	80006b4 <DisplayMainMenu>
            break;
 80007f0:	bf00      	nop
    }
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000015f 	.word	0x2000015f
 8000800:	40021000 	.word	0x40021000
 8000804:	08000729 	.word	0x08000729
 8000808:	080009d1 	.word	0x080009d1
 800080c:	080047f4 	.word	0x080047f4
 8000810:	08004800 	.word	0x08004800
 8000814:	2000018c 	.word	0x2000018c

08000818 <RequestPassword>:
/********************************************************************************************************************************
 * @brief: Solicitud de contraseña al usuario
 * @param: Recibe funciones, posibilidades: opc1 =(Activate Alarm, DisplayAlarmMenu), opc2= (DeactivateAlarm, IncorrectPassword)
 * @retval: void
********************************************************************************************************************************/
void RequestPassword(void (*onSuccess)(void), void (*onFailure)(void)) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
    while (1) { 											// Bucle para reintentar si la contraseña es incorrecta
        lcd_clear();
 8000822:	f001 f912 	bl	8001a4a <lcd_clear>
        lcd_set_cursor(0, 0);
 8000826:	2100      	movs	r1, #0
 8000828:	2000      	movs	r0, #0
 800082a:	f001 f918 	bl	8001a5e <lcd_set_cursor>
        lcd_print("Contrasena:____");
 800082e:	485b      	ldr	r0, [pc, #364]	@ (800099c <RequestPassword+0x184>)
 8000830:	f001 f92f 	bl	8001a92 <lcd_print>
        memset(inputBuffer, 0, sizeof(inputBuffer));		// Re-incializa la variable en [0000]
 8000834:	2205      	movs	r2, #5
 8000836:	2100      	movs	r1, #0
 8000838:	4859      	ldr	r0, [pc, #356]	@ (80009a0 <RequestPassword+0x188>)
 800083a:	f003 fb25 	bl	8003e88 <memset>
        inputIndex = 0;
 800083e:	4b59      	ldr	r3, [pc, #356]	@ (80009a4 <RequestPassword+0x18c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]

        uint32_t startTime = HAL_GetTick();  				// Guardar el tiempo de inicio
 8000844:	f001 fa3e 	bl	8001cc4 <HAL_GetTick>
 8000848:	60f8      	str	r0, [r7, #12]

        while (1) {
            if (HAL_GetTick() - startTime > 20000) { 		// Si pasan más de 20 segundos sin entrada
 800084a:	f001 fa3b 	bl	8001cc4 <HAL_GetTick>
 800084e:	4602      	mov	r2, r0
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000858:	4293      	cmp	r3, r2
 800085a:	d91c      	bls.n	8000896 <RequestPassword+0x7e>
                lcd_clear();
 800085c:	f001 f8f5 	bl	8001a4a <lcd_clear>
                lcd_set_cursor(0, 0);
 8000860:	2100      	movs	r1, #0
 8000862:	2000      	movs	r0, #0
 8000864:	f001 f8fb 	bl	8001a5e <lcd_set_cursor>
                lcd_print("Tiempo agotado");
 8000868:	484f      	ldr	r0, [pc, #316]	@ (80009a8 <RequestPassword+0x190>)
 800086a:	f001 f912 	bl	8001a92 <lcd_print>
                lcd_set_cursor(1, 0);
 800086e:	2100      	movs	r1, #0
 8000870:	2001      	movs	r0, #1
 8000872:	f001 f8f4 	bl	8001a5e <lcd_set_cursor>
                lcd_print("Volviendo...");
 8000876:	484d      	ldr	r0, [pc, #308]	@ (80009ac <RequestPassword+0x194>)
 8000878:	f001 f90b 	bl	8001a92 <lcd_print>
                while(!delayRead(&LCD_Muestro)){			//Delay 2 segundos
 800087c:	bf00      	nop
 800087e:	484c      	ldr	r0, [pc, #304]	@ (80009b0 <RequestPassword+0x198>)
 8000880:	f000 fe88 	bl	8001594 <delayRead>
 8000884:	4603      	mov	r3, r0
 8000886:	f083 0301 	eor.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1f6      	bne.n	800087e <RequestPassword+0x66>
                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                DisplayMainMenu();  						// Volver al menú principal
 8000890:	f7ff ff10 	bl	80006b4 <DisplayMainMenu>
                return;
 8000894:	e07e      	b.n	8000994 <RequestPassword+0x17c>
            }
            key = keypad_getkey();
 8000896:	f001 f841 	bl	800191c <keypad_getkey>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b45      	ldr	r3, [pc, #276]	@ (80009b4 <RequestPassword+0x19c>)
 80008a0:	701a      	strb	r2, [r3, #0]
            if (key != '\0') {
 80008a2:	4b44      	ldr	r3, [pc, #272]	@ (80009b4 <RequestPassword+0x19c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0cf      	beq.n	800084a <RequestPassword+0x32>
                if (key == '*') {  							// Si presiona "*", vuelve al menú principal
 80008aa:	4b42      	ldr	r3, [pc, #264]	@ (80009b4 <RequestPassword+0x19c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80008b0:	d11c      	bne.n	80008ec <RequestPassword+0xd4>
                    lcd_clear();
 80008b2:	f001 f8ca 	bl	8001a4a <lcd_clear>
                    lcd_set_cursor(0, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 f8d0 	bl	8001a5e <lcd_set_cursor>
                    lcd_print("Operacion");
 80008be:	483e      	ldr	r0, [pc, #248]	@ (80009b8 <RequestPassword+0x1a0>)
 80008c0:	f001 f8e7 	bl	8001a92 <lcd_print>
                    lcd_set_cursor(1, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2001      	movs	r0, #1
 80008c8:	f001 f8c9 	bl	8001a5e <lcd_set_cursor>
                    lcd_print("Cancelada");
 80008cc:	483b      	ldr	r0, [pc, #236]	@ (80009bc <RequestPassword+0x1a4>)
 80008ce:	f001 f8e0 	bl	8001a92 <lcd_print>
                    while(!delayRead(&LCD_Muestro)){
 80008d2:	bf00      	nop
 80008d4:	4836      	ldr	r0, [pc, #216]	@ (80009b0 <RequestPassword+0x198>)
 80008d6:	f000 fe5d 	bl	8001594 <delayRead>
 80008da:	4603      	mov	r3, r0
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f6      	bne.n	80008d4 <RequestPassword+0xbc>
                    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                    }
                    DisplayMainMenu();  					// Volver al menú principal
 80008e6:	f7ff fee5 	bl	80006b4 <DisplayMainMenu>
                    return;
 80008ea:	e053      	b.n	8000994 <RequestPassword+0x17c>
                }
                if (key >= '0' && key <= '9' && inputIndex < 4) {
 80008ec:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <RequestPassword+0x19c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80008f2:	d91e      	bls.n	8000932 <RequestPassword+0x11a>
 80008f4:	4b2f      	ldr	r3, [pc, #188]	@ (80009b4 <RequestPassword+0x19c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b39      	cmp	r3, #57	@ 0x39
 80008fa:	d81a      	bhi.n	8000932 <RequestPassword+0x11a>
 80008fc:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <RequestPassword+0x18c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d816      	bhi.n	8000932 <RequestPassword+0x11a>
                    inputBuffer[inputIndex++] = key;
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <RequestPassword+0x18c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	b2d1      	uxtb	r1, r2
 800090c:	4a25      	ldr	r2, [pc, #148]	@ (80009a4 <RequestPassword+0x18c>)
 800090e:	7011      	strb	r1, [r2, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b28      	ldr	r3, [pc, #160]	@ (80009b4 <RequestPassword+0x19c>)
 8000914:	7819      	ldrb	r1, [r3, #0]
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <RequestPassword+0x188>)
 8000918:	5499      	strb	r1, [r3, r2]
                    lcd_set_cursor(1, 10 + inputIndex - 1);
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <RequestPassword+0x18c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3309      	adds	r3, #9
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	2001      	movs	r0, #1
 8000926:	f001 f89a 	bl	8001a5e <lcd_set_cursor>
                    lcd_print("*");
 800092a:	4825      	ldr	r0, [pc, #148]	@ (80009c0 <RequestPassword+0x1a8>)
 800092c:	f001 f8b1 	bl	8001a92 <lcd_print>
 8000930:	e02e      	b.n	8000990 <RequestPassword+0x178>
                }else if (key == '#') { 					//  Cuando se presiona "#", verifica la clave
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <RequestPassword+0x19c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b23      	cmp	r3, #35	@ 0x23
 8000938:	d187      	bne.n	800084a <RequestPassword+0x32>
                    inputBuffer[inputIndex] = '\0';
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <RequestPassword+0x18c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <RequestPassword+0x188>)
 8000942:	2100      	movs	r1, #0
 8000944:	5499      	strb	r1, [r3, r2]
                    if (strcmp(inputBuffer, currentPassword) == 0) {// strcmp compara 2 cadenas de caractares y devuelve un entero =0 si son iguales
 8000946:	491f      	ldr	r1, [pc, #124]	@ (80009c4 <RequestPassword+0x1ac>)
 8000948:	4815      	ldr	r0, [pc, #84]	@ (80009a0 <RequestPassword+0x188>)
 800094a:	f7ff fc69 	bl	8000220 <strcmp>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <RequestPassword+0x142>
                        onSuccess(); // Si la clave es correcta, sale de la función y retorna a la funcion ActivateAlarm
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4798      	blx	r3
                        return;
 8000958:	e01c      	b.n	8000994 <RequestPassword+0x17c>
                    } else {
                        //  Si la contraseña es incorrecta, mostrar mensaje y volver a pedirla
                        lcd_clear();
 800095a:	f001 f876 	bl	8001a4a <lcd_clear>
                        lcd_set_cursor(0, 0);
 800095e:	2100      	movs	r1, #0
 8000960:	2000      	movs	r0, #0
 8000962:	f001 f87c 	bl	8001a5e <lcd_set_cursor>
                        lcd_print("Contrasena");
 8000966:	4818      	ldr	r0, [pc, #96]	@ (80009c8 <RequestPassword+0x1b0>)
 8000968:	f001 f893 	bl	8001a92 <lcd_print>
                        lcd_set_cursor(1, 0);
 800096c:	2100      	movs	r1, #0
 800096e:	2001      	movs	r0, #1
 8000970:	f001 f875 	bl	8001a5e <lcd_set_cursor>
                        lcd_print("Incorrecta");
 8000974:	4815      	ldr	r0, [pc, #84]	@ (80009cc <RequestPassword+0x1b4>)
 8000976:	f001 f88c 	bl	8001a92 <lcd_print>
                        while(!delayRead(&LCD_Muestro)){
 800097a:	bf00      	nop
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <RequestPassword+0x198>)
 800097e:	f000 fe09 	bl	8001594 <delayRead>
 8000982:	4603      	mov	r3, r0
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f6      	bne.n	800097c <RequestPassword+0x164>
                        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        break;  //  Sale de este while pero vuelve al inicio del while externo dentro de RequestPassword
 800098e:	e000      	b.n	8000992 <RequestPassword+0x17a>
            if (HAL_GetTick() - startTime > 20000) { 		// Si pasan más de 20 segundos sin entrada
 8000990:	e75b      	b.n	800084a <RequestPassword+0x32>
    while (1) { 											// Bucle para reintentar si la contraseña es incorrecta
 8000992:	e746      	b.n	8000822 <RequestPassword+0xa>
                    }
                }
            }
        }
    }
}
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	0800480c 	.word	0x0800480c
 80009a0:	20000168 	.word	0x20000168
 80009a4:	2000016d 	.word	0x2000016d
 80009a8:	0800481c 	.word	0x0800481c
 80009ac:	0800482c 	.word	0x0800482c
 80009b0:	2000018c 	.word	0x2000018c
 80009b4:	2000015d 	.word	0x2000015d
 80009b8:	080047f4 	.word	0x080047f4
 80009bc:	08004800 	.word	0x08004800
 80009c0:	0800483c 	.word	0x0800483c
 80009c4:	20000000 	.word	0x20000000
 80009c8:	08004840 	.word	0x08004840
 80009cc:	0800484c 	.word	0x0800484c

080009d0 <ActivateAlarm>:
/*****************************************************************************************************************
 * @brief: Activar la alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void ActivateAlarm() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b090      	sub	sp, #64	@ 0x40
 80009d4:	af00      	add	r7, sp, #0
    lcd_clear();
 80009d6:	f001 f838 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 80009da:	2100      	movs	r1, #0
 80009dc:	2000      	movs	r0, #0
 80009de:	f001 f83e 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Alarma Activada");
 80009e2:	483c      	ldr	r0, [pc, #240]	@ (8000ad4 <ActivateAlarm+0x104>)
 80009e4:	f001 f855 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 f837 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Corran: 20 seg");
 80009f0:	4839      	ldr	r0, [pc, #228]	@ (8000ad8 <ActivateAlarm+0x108>)
 80009f2:	f001 f84e 	bl	8001a92 <lcd_print>

    BT_SendMessage("⚠️ Alarma activada. Corran 20s... \r\n");
 80009f6:	4839      	ldr	r0, [pc, #228]	@ (8000adc <ActivateAlarm+0x10c>)
 80009f8:	f000 fd78 	bl	80014ec <BT_SendMessage>

    uint32_t countdownStart = HAL_GetTick();
 80009fc:	f001 f962 	bl	8001cc4 <HAL_GetTick>
 8000a00:	63f8      	str	r0, [r7, #60]	@ 0x3c
    uint32_t remainingTime = 20;
 8000a02:	2314      	movs	r3, #20
 8000a04:	63bb      	str	r3, [r7, #56]	@ 0x38

    while (remainingTime > 0) {
 8000a06:	e02e      	b.n	8000a66 <ActivateAlarm+0x96>
        if (HAL_GetTick() - countdownStart >= 1000) {
 8000a08:	f001 f95c 	bl	8001cc4 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a16:	d326      	bcc.n	8000a66 <ActivateAlarm+0x96>
            countdownStart = HAL_GetTick();
 8000a18:	f001 f954 	bl	8001cc4 <HAL_GetTick>
 8000a1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            remainingTime--;
 8000a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a20:	3b01      	subs	r3, #1
 8000a22:	63bb      	str	r3, [r7, #56]	@ 0x38

            lcd_set_cursor(1, 7);
 8000a24:	2107      	movs	r1, #7
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 f819 	bl	8001a5e <lcd_set_cursor>
            lcd_print("   ");
 8000a2c:	482c      	ldr	r0, [pc, #176]	@ (8000ae0 <ActivateAlarm+0x110>)
 8000a2e:	f001 f830 	bl	8001a92 <lcd_print>
            lcd_set_cursor(1, 7);
 8000a32:	2107      	movs	r1, #7
 8000a34:	2001      	movs	r0, #1
 8000a36:	f001 f812 	bl	8001a5e <lcd_set_cursor>
            char buffer[3];
            sprintf(buffer, "%2lu", (unsigned long)remainingTime);
 8000a3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a40:	4928      	ldr	r1, [pc, #160]	@ (8000ae4 <ActivateAlarm+0x114>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fa00 	bl	8003e48 <siprintf>
            lcd_print(buffer);
 8000a48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 f820 	bl	8001a92 <lcd_print>

            // Envía el valor del contador por Bluetooth
              char btBuffer[50];
              snprintf(btBuffer, sizeof(btBuffer), "Corran: %02lu seg restantes\r\n", (unsigned long)remainingTime);
 8000a52:	4638      	mov	r0, r7
 8000a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a56:	4a24      	ldr	r2, [pc, #144]	@ (8000ae8 <ActivateAlarm+0x118>)
 8000a58:	2132      	movs	r1, #50	@ 0x32
 8000a5a:	f003 f9c1 	bl	8003de0 <sniprintf>
              BT_SendMessage(btBuffer);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fd43 	bl	80014ec <BT_SendMessage>
    while (remainingTime > 0) {
 8000a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1cd      	bne.n	8000a08 <ActivateAlarm+0x38>
        }
    }

    lcd_clear();
 8000a6c:	f000 ffed 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fff3 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Alarma");
 8000a78:	481c      	ldr	r0, [pc, #112]	@ (8000aec <ActivateAlarm+0x11c>)
 8000a7a:	f001 f80a 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 ffec 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Activa!");
 8000a86:	481a      	ldr	r0, [pc, #104]	@ (8000af0 <ActivateAlarm+0x120>)
 8000a88:	f001 f803 	bl	8001a92 <lcd_print>

    BT_SendMessage("🚨 Alarma activada! \r\n");
 8000a8c:	4819      	ldr	r0, [pc, #100]	@ (8000af4 <ActivateAlarm+0x124>)
 8000a8e:	f000 fd2d 	bl	80014ec <BT_SendMessage>

    alarmActivated = true;
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <ActivateAlarm+0x128>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
    currentState = ACTIVE_ALARM;
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <ActivateAlarm+0x12c>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	701a      	strb	r2, [r3, #0]

    while (alarmActivated) {
 8000a9e:	e010      	b.n	8000ac2 <ActivateAlarm+0xf2>
        key = keypad_getkey();
 8000aa0:	f000 ff3c 	bl	800191c <keypad_getkey>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <ActivateAlarm+0x130>)
 8000aaa:	701a      	strb	r2, [r3, #0]
        if (key != '\0') {
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <ActivateAlarm+0x130>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <ActivateAlarm+0xee>
            CheckAlarmDeactivation(key);  // Nueva función para manejar la desactivación con temporizador
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <ActivateAlarm+0x130>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb4b 	bl	8001154 <CheckAlarmDeactivation>
        }
        CheckSensors();
 8000abe:	f000 fae5 	bl	800108c <CheckSensors>
    while (alarmActivated) {
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <ActivateAlarm+0x128>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1ea      	bne.n	8000aa0 <ActivateAlarm+0xd0>
    }
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3740      	adds	r7, #64	@ 0x40
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	08004858 	.word	0x08004858
 8000ad8:	08004868 	.word	0x08004868
 8000adc:	08004878 	.word	0x08004878
 8000ae0:	080048a4 	.word	0x080048a4
 8000ae4:	080048a8 	.word	0x080048a8
 8000ae8:	080048b0 	.word	0x080048b0
 8000aec:	080048d0 	.word	0x080048d0
 8000af0:	080048d8 	.word	0x080048d8
 8000af4:	080048e0 	.word	0x080048e0
 8000af8:	20000163 	.word	0x20000163
 8000afc:	2000015e 	.word	0x2000015e
 8000b00:	2000015d 	.word	0x2000015d

08000b04 <DeactivateAlarm>:
/*****************************************************************************************************************
 * @brief: Desactivar la alarma si la contraseña es correcta
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DeactivateAlarm(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    lcd_clear();
 8000b08:	f000 ff9f 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 ffa5 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Alarma");
 8000b14:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <DeactivateAlarm+0x58>)
 8000b16:	f000 ffbc 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 ff9e 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Desactivada");
 8000b22:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <DeactivateAlarm+0x5c>)
 8000b24:	f000 ffb5 	bl	8001a92 <lcd_print>

    BT_SendMessage("✅ Alarma desactivada. Todo en orden. \r\n"); // 🔹 Notificación de desactivación
 8000b28:	480e      	ldr	r0, [pc, #56]	@ (8000b64 <DeactivateAlarm+0x60>)
 8000b2a:	f000 fcdf 	bl	80014ec <BT_SendMessage>

    alarmActivated = false;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <DeactivateAlarm+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

    // Asegurar que el buzzer se apaga
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2120      	movs	r1, #32
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <DeactivateAlarm+0x68>)
 8000b3a:	f001 fc43 	bl	80023c4 <HAL_GPIO_WritePin>
    while(!delayRead(&LCD_Muestro)){
 8000b3e:	bf00      	nop
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <DeactivateAlarm+0x6c>)
 8000b42:	f000 fd27 	bl	8001594 <delayRead>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f083 0301 	eor.w	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f6      	bne.n	8000b40 <DeactivateAlarm+0x3c>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000b52:	f7ff fdaf 	bl	80006b4 <DisplayMainMenu>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	080048d0 	.word	0x080048d0
 8000b60:	08004910 	.word	0x08004910
 8000b64:	0800491c 	.word	0x0800491c
 8000b68:	20000163 	.word	0x20000163
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	2000018c 	.word	0x2000018c

08000b74 <IncorrectPassword>:
/*****************************************************************************************************************
 * @brief: Contraseña incorrecta: mensaje y reinicio de intento
 * @param: void
 * @retval: void
******************************************************************************************************************/
void IncorrectPassword(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    lcd_clear();
 8000b78:	f000 ff67 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 ff6d 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Contrasena");
 8000b84:	481a      	ldr	r0, [pc, #104]	@ (8000bf0 <IncorrectPassword+0x7c>)
 8000b86:	f000 ff84 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 ff66 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Incorrecta");
 8000b92:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <IncorrectPassword+0x80>)
 8000b94:	f000 ff7d 	bl	8001a92 <lcd_print>
    while(!delayRead(&LCD_Muestro)){ 	// Mostrar mensaje durante 2 segundos
 8000b98:	e00e      	b.n	8000bb8 <IncorrectPassword+0x44>

    // Iniciar temporizador interno si aún no está activo
    if (!countdownStarted) {
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <IncorrectPassword+0x84>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	f083 0301 	eor.w	r3, r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <IncorrectPassword+0x44>
        countdownStarted = true;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <IncorrectPassword+0x84>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
        startTime = HAL_GetTick(); // Guardar tiempo actual
 8000bae:	f001 f889 	bl	8001cc4 <HAL_GetTick>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a11      	ldr	r2, [pc, #68]	@ (8000bfc <IncorrectPassword+0x88>)
 8000bb6:	6013      	str	r3, [r2, #0]
    while(!delayRead(&LCD_Muestro)){ 	// Mostrar mensaje durante 2 segundos
 8000bb8:	4811      	ldr	r0, [pc, #68]	@ (8000c00 <IncorrectPassword+0x8c>)
 8000bba:	f000 fceb 	bl	8001594 <delayRead>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1e7      	bne.n	8000b9a <IncorrectPassword+0x26>
    		delayInit(&countdownDelay, 31000); // Iniciar temporizador de 31 segundos
    	}
    	*/
    }
    // Solicitar nuevamente la contraseña
    lcd_clear();
 8000bca:	f000 ff3e 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 ff44 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Ingrese");
 8000bd6:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <IncorrectPassword+0x90>)
 8000bd8:	f000 ff5b 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 ff3d 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Contrasena:");
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <IncorrectPassword+0x94>)
 8000be6:	f000 ff54 	bl	8001a92 <lcd_print>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08004840 	.word	0x08004840
 8000bf4:	0800484c 	.word	0x0800484c
 8000bf8:	20000164 	.word	0x20000164
 8000bfc:	20000170 	.word	0x20000170
 8000c00:	2000018c 	.word	0x2000018c
 8000c04:	080048fc 	.word	0x080048fc
 8000c08:	08004904 	.word	0x08004904

08000c0c <AlarmTriggered>:
/*****************************************************************************************************************
 * @brief: Activar alarma sonora
 * @param: void
 * @retval: void
******************************************************************************************************************/
void AlarmTriggered(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
    lcd_clear();
 8000c12:	f000 ff1a 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 ff20 	bl	8001a5e <lcd_set_cursor>
    lcd_print("ALERTA!!!");
 8000c1e:	4823      	ldr	r0, [pc, #140]	@ (8000cac <AlarmTriggered+0xa0>)
 8000c20:	f000 ff37 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	2001      	movs	r0, #1
 8000c28:	f000 ff19 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Ingrese clave");
 8000c2c:	4820      	ldr	r0, [pc, #128]	@ (8000cb0 <AlarmTriggered+0xa4>)
 8000c2e:	f000 ff30 	bl	8001a92 <lcd_print>

    BT_SendMessage("⚠️ Alarma Disparada! \r\n"); // Enviar mensaje por Bluetooth
 8000c32:	4820      	ldr	r0, [pc, #128]	@ (8000cb4 <AlarmTriggered+0xa8>)
 8000c34:	f000 fc5a 	bl	80014ec <BT_SendMessage>
    uint32_t lastToggleTime = HAL_GetTick();  // Tiempo de referencia para el buzzer
 8000c38:	f001 f844 	bl	8001cc4 <HAL_GetTick>
 8000c3c:	6078      	str	r0, [r7, #4]

    while (alarmActivated) {
 8000c3e:	e021      	b.n	8000c84 <AlarmTriggered+0x78>
       // Alternar el buzzer cada 500 ms sin bloquear el sistema
    	if (HAL_GetTick() - lastToggleTime >= 500) {
 8000c40:	f001 f840 	bl	8001cc4 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c4e:	d30b      	bcc.n	8000c68 <AlarmTriggered+0x5c>
    	    lastToggleTime = HAL_GetTick();
 8000c50:	f001 f838 	bl	8001cc4 <HAL_GetTick>
 8000c54:	6078      	str	r0, [r7, #4]
    	    HAL_GPIO_TogglePin(Sirena_GPIO_Port, Sirena_Pin);
 8000c56:	2120      	movs	r1, #32
 8000c58:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <AlarmTriggered+0xac>)
 8000c5a:	f001 fbcc 	bl	80023f6 <HAL_GPIO_TogglePin>
    	    HAL_GPIO_TogglePin(Led_Alerta_GPIO_Port, Led_Alerta_Pin);
 8000c5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c62:	4816      	ldr	r0, [pc, #88]	@ (8000cbc <AlarmTriggered+0xb0>)
 8000c64:	f001 fbc7 	bl	80023f6 <HAL_GPIO_TogglePin>
    	/*if (delayRead(&Delay_Sirena)){
    		HAL_GPIO_TogglePin(Sirena_GPIO_Port, Sirena_Pin);
    	}*/

        // Permitir que el usuario intente apagar la alarma
        key = keypad_getkey();
 8000c68:	f000 fe58 	bl	800191c <keypad_getkey>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <AlarmTriggered+0xb4>)
 8000c72:	701a      	strb	r2, [r3, #0]
        if (key != '\0') {
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <AlarmTriggered+0xb4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <AlarmTriggered+0x78>
            RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000c7c:	4911      	ldr	r1, [pc, #68]	@ (8000cc4 <AlarmTriggered+0xb8>)
 8000c7e:	4812      	ldr	r0, [pc, #72]	@ (8000cc8 <AlarmTriggered+0xbc>)
 8000c80:	f7ff fdca 	bl	8000818 <RequestPassword>
    while (alarmActivated) {
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <AlarmTriggered+0xc0>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1d9      	bne.n	8000c40 <AlarmTriggered+0x34>
        }
    }

    // Apagar el buzzer cuando la alarma se desactiva
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2120      	movs	r1, #32
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <AlarmTriggered+0xac>)
 8000c92:	f001 fb97 	bl	80023c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_Alerta_GPIO_Port, Led_Alerta_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c9c:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <AlarmTriggered+0xb0>)
 8000c9e:	f001 fb91 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	08004948 	.word	0x08004948
 8000cb0:	08004954 	.word	0x08004954
 8000cb4:	08004964 	.word	0x08004964
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	2000015d 	.word	0x2000015d
 8000cc4:	08000b75 	.word	0x08000b75
 8000cc8:	08000b05 	.word	0x08000b05
 8000ccc:	20000163 	.word	0x20000163

08000cd0 <DisplayChangePassMenu>:
/*****************************************************************************************************************
 * @brief: Cambiar contraseña
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayChangePassMenu() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
    lcd_clear();
 8000cd6:	f000 feb8 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 febe 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Contrasena");
 8000ce2:	4830      	ldr	r0, [pc, #192]	@ (8000da4 <DisplayChangePassMenu+0xd4>)
 8000ce4:	f000 fed5 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 feb7 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Actual:");
 8000cf0:	482d      	ldr	r0, [pc, #180]	@ (8000da8 <DisplayChangePassMenu+0xd8>)
 8000cf2:	f000 fece 	bl	8001a92 <lcd_print>

    uint32_t startTime = HAL_GetTick();  // Guardar el tiempo actual
 8000cf6:	f000 ffe5 	bl	8001cc4 <HAL_GetTick>
 8000cfa:	6078      	str	r0, [r7, #4]
    while (1) {  // Bucle para capturar la tecla antes de solicitar la contraseña
        key = keypad_getkey();
 8000cfc:	f000 fe0e 	bl	800191c <keypad_getkey>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <DisplayChangePassMenu+0xdc>)
 8000d06:	701a      	strb	r2, [r3, #0]

        //  Si pasan más de 20 segundos sin tocar una tecla, vuelve al menú principal
        if (HAL_GetTick() - startTime > 20000){
 8000d08:	f000 ffdc 	bl	8001cc4 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d915      	bls.n	8000d46 <DisplayChangePassMenu+0x76>
            lcd_clear();
 8000d1a:	f000 fe96 	bl	8001a4a <lcd_clear>
            lcd_set_cursor(0, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fe9c 	bl	8001a5e <lcd_set_cursor>
            lcd_print("Tiempo Expirado");
 8000d26:	4822      	ldr	r0, [pc, #136]	@ (8000db0 <DisplayChangePassMenu+0xe0>)
 8000d28:	f000 feb3 	bl	8001a92 <lcd_print>
            while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 8000d2c:	bf00      	nop
 8000d2e:	4821      	ldr	r0, [pc, #132]	@ (8000db4 <DisplayChangePassMenu+0xe4>)
 8000d30:	f000 fc30 	bl	8001594 <delayRead>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f083 0301 	eor.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f6      	bne.n	8000d2e <DisplayChangePassMenu+0x5e>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();
 8000d40:	f7ff fcb8 	bl	80006b4 <DisplayMainMenu>
            return;
 8000d44:	e02a      	b.n	8000d9c <DisplayChangePassMenu+0xcc>
        }

        if (key == '*') {  //  Si el usuario presiona "*", volver al menú principal
 8000d46:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <DisplayChangePassMenu+0xdc>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d4c:	d11c      	bne.n	8000d88 <DisplayChangePassMenu+0xb8>
            lcd_clear();
 8000d4e:	f000 fe7c 	bl	8001a4a <lcd_clear>
            lcd_set_cursor(0, 0);
 8000d52:	2100      	movs	r1, #0
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 fe82 	bl	8001a5e <lcd_set_cursor>
            lcd_print("Operacion");
 8000d5a:	4817      	ldr	r0, [pc, #92]	@ (8000db8 <DisplayChangePassMenu+0xe8>)
 8000d5c:	f000 fe99 	bl	8001a92 <lcd_print>
            lcd_set_cursor(1, 0);
 8000d60:	2100      	movs	r1, #0
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 fe7b 	bl	8001a5e <lcd_set_cursor>
            lcd_print("Cancelada");
 8000d68:	4814      	ldr	r0, [pc, #80]	@ (8000dbc <DisplayChangePassMenu+0xec>)
 8000d6a:	f000 fe92 	bl	8001a92 <lcd_print>
            while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 8000d6e:	bf00      	nop
 8000d70:	4810      	ldr	r0, [pc, #64]	@ (8000db4 <DisplayChangePassMenu+0xe4>)
 8000d72:	f000 fc0f 	bl	8001594 <delayRead>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f083 0301 	eor.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f6      	bne.n	8000d70 <DisplayChangePassMenu+0xa0>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();
 8000d82:	f7ff fc97 	bl	80006b4 <DisplayMainMenu>
            return;
 8000d86:	e009      	b.n	8000d9c <DisplayChangePassMenu+0xcc>
        }

        if (key != '\0') {  // 🔹 Si presiona otra tecla, salir del bucle y continuar con la contraseña
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <DisplayChangePassMenu+0xdc>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d100      	bne.n	8000d92 <DisplayChangePassMenu+0xc2>
        key = keypad_getkey();
 8000d90:	e7b4      	b.n	8000cfc <DisplayChangePassMenu+0x2c>
            break;
 8000d92:	bf00      	nop
        }
    }

    RequestPassword(ConfirmNewPassword, DisplayChangePassMenu);  // Solicitar la contraseña actual
 8000d94:	490a      	ldr	r1, [pc, #40]	@ (8000dc0 <DisplayChangePassMenu+0xf0>)
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <DisplayChangePassMenu+0xf4>)
 8000d98:	f7ff fd3e 	bl	8000818 <RequestPassword>
}
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	08004840 	.word	0x08004840
 8000da8:	08004980 	.word	0x08004980
 8000dac:	2000015d 	.word	0x2000015d
 8000db0:	08004988 	.word	0x08004988
 8000db4:	2000018c 	.word	0x2000018c
 8000db8:	080047f4 	.word	0x080047f4
 8000dbc:	08004800 	.word	0x08004800
 8000dc0:	08000cd1 	.word	0x08000cd1
 8000dc4:	08000dc9 	.word	0x08000dc9

08000dc8 <ConfirmNewPassword>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void ConfirmNewPassword(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
    lcd_clear();
 8000dce:	f000 fe3c 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fe42 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Nueva Clave:");
 8000dda:	486a      	ldr	r0, [pc, #424]	@ (8000f84 <ConfirmNewPassword+0x1bc>)
 8000ddc:	f000 fe59 	bl	8001a92 <lcd_print>

    memset(inputBuffer, 0, sizeof(inputBuffer));
 8000de0:	2205      	movs	r2, #5
 8000de2:	2100      	movs	r1, #0
 8000de4:	4868      	ldr	r0, [pc, #416]	@ (8000f88 <ConfirmNewPassword+0x1c0>)
 8000de6:	f003 f84f 	bl	8003e88 <memset>
    inputIndex = 0;
 8000dea:	4b68      	ldr	r3, [pc, #416]	@ (8000f8c <ConfirmNewPassword+0x1c4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
    uint32_t startTime = HAL_GetTick();  // Tiempo de inicio para evitar bucles infinitos
 8000df0:	f000 ff68 	bl	8001cc4 <HAL_GetTick>
 8000df4:	60f8      	str	r0, [r7, #12]

    while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
 8000df6:	e09c      	b.n	8000f32 <ConfirmNewPassword+0x16a>
        key = keypad_getkey();
 8000df8:	f000 fd90 	bl	800191c <keypad_getkey>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b63      	ldr	r3, [pc, #396]	@ (8000f90 <ConfirmNewPassword+0x1c8>)
 8000e02:	701a      	strb	r2, [r3, #0]

        if (key >= '0' && key <= '9' && inputIndex < 4) {
 8000e04:	4b62      	ldr	r3, [pc, #392]	@ (8000f90 <ConfirmNewPassword+0x1c8>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e0a:	d91e      	bls.n	8000e4a <ConfirmNewPassword+0x82>
 8000e0c:	4b60      	ldr	r3, [pc, #384]	@ (8000f90 <ConfirmNewPassword+0x1c8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b39      	cmp	r3, #57	@ 0x39
 8000e12:	d81a      	bhi.n	8000e4a <ConfirmNewPassword+0x82>
 8000e14:	4b5d      	ldr	r3, [pc, #372]	@ (8000f8c <ConfirmNewPassword+0x1c4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d816      	bhi.n	8000e4a <ConfirmNewPassword+0x82>
            inputBuffer[inputIndex++] = key;
 8000e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f8c <ConfirmNewPassword+0x1c4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	b2d1      	uxtb	r1, r2
 8000e24:	4a59      	ldr	r2, [pc, #356]	@ (8000f8c <ConfirmNewPassword+0x1c4>)
 8000e26:	7011      	strb	r1, [r2, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b59      	ldr	r3, [pc, #356]	@ (8000f90 <ConfirmNewPassword+0x1c8>)
 8000e2c:	7819      	ldrb	r1, [r3, #0]
 8000e2e:	4b56      	ldr	r3, [pc, #344]	@ (8000f88 <ConfirmNewPassword+0x1c0>)
 8000e30:	5499      	strb	r1, [r3, r2]
            lcd_set_cursor(1, inputIndex - 1);
 8000e32:	4b56      	ldr	r3, [pc, #344]	@ (8000f8c <ConfirmNewPassword+0x1c4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f000 fe0e 	bl	8001a5e <lcd_set_cursor>
            lcd_print("*");
 8000e42:	4854      	ldr	r0, [pc, #336]	@ (8000f94 <ConfirmNewPassword+0x1cc>)
 8000e44:	f000 fe25 	bl	8001a92 <lcd_print>
 8000e48:	e073      	b.n	8000f32 <ConfirmNewPassword+0x16a>
        } else if (key == '#') {
 8000e4a:	4b51      	ldr	r3, [pc, #324]	@ (8000f90 <ConfirmNewPassword+0x1c8>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b23      	cmp	r3, #35	@ 0x23
 8000e50:	d16f      	bne.n	8000f32 <ConfirmNewPassword+0x16a>
            if (inputIndex == 4) {  // Validar que la clave tenga 4 dígitos
 8000e52:	4b4e      	ldr	r3, [pc, #312]	@ (8000f8c <ConfirmNewPassword+0x1c4>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d14e      	bne.n	8000ef8 <ConfirmNewPassword+0x130>
                inputBuffer[inputIndex] = '\0';
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f8c <ConfirmNewPassword+0x1c4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b49      	ldr	r3, [pc, #292]	@ (8000f88 <ConfirmNewPassword+0x1c0>)
 8000e62:	2100      	movs	r1, #0
 8000e64:	5499      	strb	r1, [r3, r2]
                strcpy(newPassword, inputBuffer);
 8000e66:	4948      	ldr	r1, [pc, #288]	@ (8000f88 <ConfirmNewPassword+0x1c0>)
 8000e68:	484b      	ldr	r0, [pc, #300]	@ (8000f98 <ConfirmNewPassword+0x1d0>)
 8000e6a:	f003 f841 	bl	8003ef0 <strcpy>

                lcd_clear();
 8000e6e:	f000 fdec 	bl	8001a4a <lcd_clear>
                lcd_set_cursor(0, 0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 fdf2 	bl	8001a5e <lcd_set_cursor>
                lcd_print("Confirmar: ");
 8000e7a:	4848      	ldr	r0, [pc, #288]	@ (8000f9c <ConfirmNewPassword+0x1d4>)
 8000e7c:	f000 fe09 	bl	8001a92 <lcd_print>
                lcd_set_cursor(1, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fdeb 	bl	8001a5e <lcd_set_cursor>
                lcd_print("*.Si   #.No");
 8000e88:	4845      	ldr	r0, [pc, #276]	@ (8000fa0 <ConfirmNewPassword+0x1d8>)
 8000e8a:	f000 fe02 	bl	8001a92 <lcd_print>

                uint32_t confirmStart = HAL_GetTick();
 8000e8e:	f000 ff19 	bl	8001cc4 <HAL_GetTick>
 8000e92:	60b8      	str	r0, [r7, #8]

                while (HAL_GetTick() - confirmStart < 10000) {  			// Espera 10 segundos para confirmar
 8000e94:	e026      	b.n	8000ee4 <ConfirmNewPassword+0x11c>
                    char confirmKey = keypad_getkey();
 8000e96:	f000 fd41 	bl	800191c <keypad_getkey>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
                    if (confirmKey == '*') {
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ea2:	d119      	bne.n	8000ed8 <ConfirmNewPassword+0x110>
                        strcpy(currentPassword, newPassword);
 8000ea4:	493c      	ldr	r1, [pc, #240]	@ (8000f98 <ConfirmNewPassword+0x1d0>)
 8000ea6:	483f      	ldr	r0, [pc, #252]	@ (8000fa4 <ConfirmNewPassword+0x1dc>)
 8000ea8:	f003 f822 	bl	8003ef0 <strcpy>
                        lcd_clear();
 8000eac:	f000 fdcd 	bl	8001a4a <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 fdd3 	bl	8001a5e <lcd_set_cursor>
                        lcd_print("Clave Actualizada");
 8000eb8:	483b      	ldr	r0, [pc, #236]	@ (8000fa8 <ConfirmNewPassword+0x1e0>)
 8000eba:	f000 fdea 	bl	8001a92 <lcd_print>
                        while(!delayRead(&LCD_Muestro)){
 8000ebe:	bf00      	nop
 8000ec0:	483a      	ldr	r0, [pc, #232]	@ (8000fac <ConfirmNewPassword+0x1e4>)
 8000ec2:	f000 fb67 	bl	8001594 <delayRead>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f6      	bne.n	8000ec0 <ConfirmNewPassword+0xf8>
                                 // Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        DisplayMainMenu();
 8000ed2:	f7ff fbef 	bl	80006b4 <DisplayMainMenu>
                        return;
 8000ed6:	e052      	b.n	8000f7e <ConfirmNewPassword+0x1b6>
                    } else if (confirmKey == '#') {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b23      	cmp	r3, #35	@ 0x23
 8000edc:	d102      	bne.n	8000ee4 <ConfirmNewPassword+0x11c>
                        ConfirmNewPassword();  				// Volver a solicitar la clave
 8000ede:	f7ff ff73 	bl	8000dc8 <ConfirmNewPassword>
                        return;
 8000ee2:	e04c      	b.n	8000f7e <ConfirmNewPassword+0x1b6>
                while (HAL_GetTick() - confirmStart < 10000) {  			// Espera 10 segundos para confirmar
 8000ee4:	f000 feee 	bl	8001cc4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d9cf      	bls.n	8000e96 <ConfirmNewPassword+0xce>
 8000ef6:	e01c      	b.n	8000f32 <ConfirmNewPassword+0x16a>
                    }
                }
            } else {
                lcd_clear();
 8000ef8:	f000 fda7 	bl	8001a4a <lcd_clear>
                lcd_set_cursor(0, 0);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 fdad 	bl	8001a5e <lcd_set_cursor>
                lcd_print("Debe ser 4 ");
 8000f04:	482a      	ldr	r0, [pc, #168]	@ (8000fb0 <ConfirmNewPassword+0x1e8>)
 8000f06:	f000 fdc4 	bl	8001a92 <lcd_print>
                lcd_set_cursor(1, 0);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f000 fda6 	bl	8001a5e <lcd_set_cursor>
                lcd_print("digitos ");
 8000f12:	4828      	ldr	r0, [pc, #160]	@ (8000fb4 <ConfirmNewPassword+0x1ec>)
 8000f14:	f000 fdbd 	bl	8001a92 <lcd_print>
                while(!delayRead(&LCD_Muestro)){
 8000f18:	bf00      	nop
 8000f1a:	4824      	ldr	r0, [pc, #144]	@ (8000fac <ConfirmNewPassword+0x1e4>)
 8000f1c:	f000 fb3a 	bl	8001594 <delayRead>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f083 0301 	eor.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f6      	bne.n	8000f1a <ConfirmNewPassword+0x152>
                                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                ConfirmNewPassword();  // Reiniciar el proceso
 8000f2c:	f7ff ff4c 	bl	8000dc8 <ConfirmNewPassword>
                return;  // Reiniciar el proceso
 8000f30:	e025      	b.n	8000f7e <ConfirmNewPassword+0x1b6>
    while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
 8000f32:	f000 fec7 	bl	8001cc4 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f40:	4293      	cmp	r3, r2
 8000f42:	f67f af59 	bls.w	8000df8 <ConfirmNewPassword+0x30>
            }
        }
    }

    // Si el usuario no ingresa nada en 20 segundos, volver al menú principal
    lcd_clear();
 8000f46:	f000 fd80 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 fd86 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Tiempo ");
 8000f52:	4819      	ldr	r0, [pc, #100]	@ (8000fb8 <ConfirmNewPassword+0x1f0>)
 8000f54:	f000 fd9d 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f000 fd7f 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Excedido ");
 8000f60:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <ConfirmNewPassword+0x1f4>)
 8000f62:	f000 fd96 	bl	8001a92 <lcd_print>
    while(!delayRead(&LCD_Muestro)){
 8000f66:	bf00      	nop
 8000f68:	4810      	ldr	r0, [pc, #64]	@ (8000fac <ConfirmNewPassword+0x1e4>)
 8000f6a:	f000 fb13 	bl	8001594 <delayRead>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f083 0301 	eor.w	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f6      	bne.n	8000f68 <ConfirmNewPassword+0x1a0>
        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000f7a:	f7ff fb9b 	bl	80006b4 <DisplayMainMenu>
}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08004998 	.word	0x08004998
 8000f88:	20000168 	.word	0x20000168
 8000f8c:	2000016d 	.word	0x2000016d
 8000f90:	2000015d 	.word	0x2000015d
 8000f94:	0800483c 	.word	0x0800483c
 8000f98:	20000158 	.word	0x20000158
 8000f9c:	080049a8 	.word	0x080049a8
 8000fa0:	080049b4 	.word	0x080049b4
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	080049c0 	.word	0x080049c0
 8000fac:	2000018c 	.word	0x2000018c
 8000fb0:	080049d4 	.word	0x080049d4
 8000fb4:	080049e0 	.word	0x080049e0
 8000fb8:	080049ec 	.word	0x080049ec
 8000fbc:	080049f4 	.word	0x080049f4

08000fc0 <HandleSubMenu>:
/*****************************************************************************************************************
 * @brief: Submenú "Más"
 * @param:
 * @retval:
******************************************************************************************************************/
void HandleSubMenu() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    lcd_clear();
 8000fc4:	f000 fd41 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 fd47 	bl	8001a5e <lcd_set_cursor>
    lcd_print("#.Volver ");
 8000fd0:	4810      	ldr	r0, [pc, #64]	@ (8001014 <HandleSubMenu+0x54>)
 8000fd2:	f000 fd5e 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 fd40 	bl	8001a5e <lcd_set_cursor>
    lcd_print("3.Prueba");
 8000fde:	480e      	ldr	r0, [pc, #56]	@ (8001018 <HandleSubMenu+0x58>)
 8000fe0:	f000 fd57 	bl	8001a92 <lcd_print>

    while (1) {
        key = keypad_getkey();
 8000fe4:	f000 fc9a 	bl	800191c <keypad_getkey>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HandleSubMenu+0x5c>)
 8000fee:	701a      	strb	r2, [r3, #0]

        if (key != '\0') {
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HandleSubMenu+0x5c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f5      	beq.n	8000fe4 <HandleSubMenu+0x24>
            if (key == '#') {
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <HandleSubMenu+0x5c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b23      	cmp	r3, #35	@ 0x23
 8000ffe:	d102      	bne.n	8001006 <HandleSubMenu+0x46>
                DisplayMainMenu();
 8001000:	f7ff fb58 	bl	80006b4 <DisplayMainMenu>
                return;
 8001004:	e005      	b.n	8001012 <HandleSubMenu+0x52>
            } else if (key == '3') {
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HandleSubMenu+0x5c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b33      	cmp	r3, #51	@ 0x33
 800100c:	d1ea      	bne.n	8000fe4 <HandleSubMenu+0x24>
                TestAlarm();
 800100e:	f000 f807 	bl	8001020 <TestAlarm>
                return;
            }
        }
    }
}
 8001012:	bd80      	pop	{r7, pc}
 8001014:	08004a00 	.word	0x08004a00
 8001018:	08004a0c 	.word	0x08004a0c
 800101c:	2000015d 	.word	0x2000015d

08001020 <TestAlarm>:
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
// Prueba de alarma
void TestAlarm() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    lcd_clear();
 8001024:	f000 fd11 	bl	8001a4a <lcd_clear>
    lcd_set_cursor(0, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fd17 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Prueba de");
 8001030:	4812      	ldr	r0, [pc, #72]	@ (800107c <TestAlarm+0x5c>)
 8001032:	f000 fd2e 	bl	8001a92 <lcd_print>
    lcd_set_cursor(1, 0);
 8001036:	2100      	movs	r1, #0
 8001038:	2001      	movs	r0, #1
 800103a:	f000 fd10 	bl	8001a5e <lcd_set_cursor>
    lcd_print("Alarma...");
 800103e:	4810      	ldr	r0, [pc, #64]	@ (8001080 <TestAlarm+0x60>)
 8001040:	f000 fd27 	bl	8001a92 <lcd_print>

    // Activar el buzzer en PA5
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	480e      	ldr	r0, [pc, #56]	@ (8001084 <TestAlarm+0x64>)
 800104a:	f001 f9bb 	bl	80023c4 <HAL_GPIO_WritePin>
    while(!delayRead(&LCD_Muestro)){		//Delay 2 segundos
 800104e:	bf00      	nop
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <TestAlarm+0x68>)
 8001052:	f000 fa9f 	bl	8001594 <delayRead>
 8001056:	4603      	mov	r3, r0
 8001058:	f083 0301 	eor.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f6      	bne.n	8001050 <TestAlarm+0x30>
        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2120      	movs	r1, #32
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <TestAlarm+0x64>)
 8001068:	f001 f9ac 	bl	80023c4 <HAL_GPIO_WritePin>

    HAL_Delay(1000);  // Pequeña pausa antes de volver al menú
 800106c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001070:	f000 fe34 	bl	8001cdc <HAL_Delay>
    DisplayMainMenu();
 8001074:	f7ff fb1e 	bl	80006b4 <DisplayMainMenu>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08004a18 	.word	0x08004a18
 8001080:	08004a24 	.word	0x08004a24
 8001084:	40020000 	.word	0x40020000
 8001088:	2000018c 	.word	0x2000018c

0800108c <CheckSensors>:
/*****************************************************************************************************************
 * @brief: Chequeo de sensores
 * @param: void
 * @retval: void
******************************************************************************************************************/
void CheckSensors(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
    if (alarmActivated) {
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <CheckSensors+0xac>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d04a      	beq.n	8001130 <CheckSensors+0xa4>
        // Verificar si se abre una puerta o ventana (Sensor_Magnetico_1)
        bool doorOpened_1 = (HAL_GPIO_ReadPin(GPIOA, Sensor_Magnetico_1_Pin) == GPIO_PIN_RESET);
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	4827      	ldr	r0, [pc, #156]	@ (800113c <CheckSensors+0xb0>)
 800109e:	f001 f979 	bl	8002394 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	71fb      	strb	r3, [r7, #7]
        MotionDetected_1 = false;
 80010ae:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <CheckSensors+0xb4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]

        // Verificar si se abre una puerta o ventana (Sensor_Magnetico_2)
        bool doorOpened_2 = (HAL_GPIO_ReadPin(Sensor_Magnetico_2_GPIO_Port, Sensor_Magnetico_2_Pin) == GPIO_PIN_RESET);
 80010b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010b8:	4822      	ldr	r0, [pc, #136]	@ (8001144 <CheckSensors+0xb8>)
 80010ba:	f001 f96b 	bl	8002394 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	71bb      	strb	r3, [r7, #6]
        MotionDetected_2 = false;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <CheckSensors+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]

        // Verificar el sensor PIR si está activado en "Sist Completo"
        if (includeMotionSensor) {
 80010d0:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <CheckSensors+0xc0>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01b      	beq.n	8001110 <CheckSensors+0x84>
        	MotionDectected_PIR = HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin);
 80010d8:	2140      	movs	r1, #64	@ 0x40
 80010da:	4818      	ldr	r0, [pc, #96]	@ (800113c <CheckSensors+0xb0>)
 80010dc:	f001 f95a 	bl	8002394 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bf14      	ite	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	2300      	moveq	r3, #0
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <CheckSensors+0xc4>)
 80010ee:	701a      	strb	r2, [r3, #0]

            // Filtro por software para evitar falsas detecciones
            HAL_Delay(50);
 80010f0:	2032      	movs	r0, #50	@ 0x32
 80010f2:	f000 fdf3 	bl	8001cdc <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOA, Sensor_PIR_Pin) != MotionDectected_PIR) {
 80010f6:	2140      	movs	r1, #64	@ 0x40
 80010f8:	4810      	ldr	r0, [pc, #64]	@ (800113c <CheckSensors+0xb0>)
 80010fa:	f001 f94b 	bl	8002394 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <CheckSensors+0xc4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d002      	beq.n	8001110 <CheckSensors+0x84>
            	MotionDectected_PIR = false; // Ignorar si el estado cambió muy rápido
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <CheckSensors+0xc4>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Evaluar si se debe activar la alarma
        if (doorOpened_1 || doorOpened_2 || (includeMotionSensor && MotionDectected_PIR)) {
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10a      	bne.n	800112c <CheckSensors+0xa0>
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d107      	bne.n	800112c <CheckSensors+0xa0>
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <CheckSensors+0xc0>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <CheckSensors+0xa4>
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <CheckSensors+0xc4>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <CheckSensors+0xa4>
            AlarmTriggered();
 800112c:	f7ff fd6e 	bl	8000c0c <AlarmTriggered>
        }
    }
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000163 	.word	0x20000163
 800113c:	40020000 	.word	0x40020000
 8001140:	20000160 	.word	0x20000160
 8001144:	40020c00 	.word	0x40020c00
 8001148:	20000161 	.word	0x20000161
 800114c:	2000015f 	.word	0x2000015f
 8001150:	20000162 	.word	0x20000162

08001154 <CheckAlarmDeactivation>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void CheckAlarmDeactivation(char key) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	//static delay_t countdownDelay;
	static bool countdownStarted = false;

	if (!countdownStarted) {
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <CheckAlarmDeactivation+0x50>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f083 0301 	eor.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <CheckAlarmDeactivation+0x28>
		countdownStarted = true;
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <CheckAlarmDeactivation+0x50>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
		startTime = HAL_GetTick(); // Iniciar temporizador de 31 segundos
 8001172:	f000 fda7 	bl	8001cc4 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <CheckAlarmDeactivation+0x54>)
 800117a:	6013      	str	r3, [r2, #0]
	}

	RequestPassword(DeactivateAlarm, IncorrectPassword);
 800117c:	490b      	ldr	r1, [pc, #44]	@ (80011ac <CheckAlarmDeactivation+0x58>)
 800117e:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <CheckAlarmDeactivation+0x5c>)
 8001180:	f7ff fb4a 	bl	8000818 <RequestPassword>

	// Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
	if (HAL_GetTick() - startTime >= 31000) {
 8001184:	f000 fd9e 	bl	8001cc4 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <CheckAlarmDeactivation+0x54>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f647 1217 	movw	r2, #30999	@ 0x7917
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <CheckAlarmDeactivation+0x48>
		AlarmTriggered();
 8001198:	f7ff fd38 	bl	8000c0c <AlarmTriggered>
	}
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001a4 	.word	0x200001a4
 80011a8:	20000170 	.word	0x20000170
 80011ac:	08000b75 	.word	0x08000b75
 80011b0:	08000b05 	.word	0x08000b05

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <Error_Handler+0x8>

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	@ (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800124e:	2303      	movs	r3, #3
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800125e:	2304      	movs	r3, #4
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <HAL_I2C_MspInit+0x8c>)
 800126a:	f000 feff 	bl	800206c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_I2C_MspInit+0x88>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40005800 	.word	0x40005800
 8001298:	40023800 	.word	0x40023800
 800129c:	40021400 	.word	0x40021400

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001334 <HAL_UART_MspInit+0x94>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d133      	bne.n	800132a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012fa:	2360      	movs	r3, #96	@ 0x60
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130a:	2307      	movs	r3, #7
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4809      	ldr	r0, [pc, #36]	@ (800133c <HAL_UART_MspInit+0x9c>)
 8001316:	f000 fea9 	bl	800206c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2026      	movs	r0, #38	@ 0x26
 8001320:	f000 fddb 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001324:	2026      	movs	r0, #38	@ 0x26
 8001326:	f000 fdf4 	bl	8001f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004400 	.word	0x40004400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020c00 	.word	0x40020c00

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 fc81 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <USART2_IRQHandler+0x10>)
 80013a6:	f001 fdef 	bl	8002f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000110 	.word	0x20000110

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f002 fd58 	bl	8003e98 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20050000 	.word	0x20050000
 8001414:	00000400 	.word	0x00000400
 8001418:	200001a8 	.word	0x200001a8
 800141c:	20000300 	.word	0x20000300

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800147c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001448:	f7ff ffea 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001472:	f002 fd17 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff f8b3 	bl	80005e0 <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800147c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001488:	08004a9c 	.word	0x08004a9c
  ldr r2, =_sbss
 800148c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001490:	200002fc 	.word	0x200002fc

08001494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <MX_USART2_UART_Init>:
 * @brief Inicializacion USART2 (Asincrona)
 * @param void
 * @retval void
******************************************************************************************************************/
void MX_USART2_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_USART2_UART_Init+0x50>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f001 fc7e 	bl	8002dd0 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014da:	f7ff fe6b 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000110 	.word	0x20000110
 80014e8:	40004400 	.word	0x40004400

080014ec <BT_SendMessage>:
 * @brief: 	Enviar un mensaje a HC-05
 * @param:	char message (cadena de carecteres)
 * @retval:	void
******************************************************************************************************************/

void BT_SendMessage(char *message) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7fe fe9d 	bl	8000234 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <BT_SendMessage+0x28>)
 8001506:	f001 fcb3 	bl	8002e70 <HAL_UART_Transmit>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000110 	.word	0x20000110

08001518 <BT_Test>:
/*****************************************************************************************************************
 * @brief: Para probar si el STM32 está enviando datos correctamente al módulo Bluetooth HC-05
 * @param: void
 * @retval: void
******************************************************************************************************************/
void BT_Test() {
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
    char message[] = "✅ HC-05 conectado con STM32\r\n";
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <BT_Test+0x38>)
 8001520:	463c      	mov	r4, r7
 8001522:	461d      	mov	r5, r3
 8001524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001528:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800152c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001530:	463b      	mov	r3, r7
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fe7e 	bl	8000234 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	4639      	mov	r1, r7
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <BT_Test+0x3c>)
 8001544:	f001 fc94 	bl	8002e70 <HAL_UART_Transmit>
}
 8001548:	bf00      	nop
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bdb0      	pop	{r4, r5, r7, pc}
 8001550:	08004a30 	.word	0x08004a30
 8001554:	20000110 	.word	0x20000110

08001558 <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
******************************************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 8001576:	f000 fba5 	bl	8001cc4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	605a      	str	r2, [r3, #4]
	delay->running=false;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	721a      	strb	r2, [r3, #8]
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <delayRead>:
bool_t delayRead(delay_t *delay){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a1b      	ldrb	r3, [r3, #8]
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <delayRead+0x2a>
		delay->startTime=HAL_GetTick();
 80015aa:	f000 fb8b 	bl	8001cc4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	601a      	str	r2, [r3, #0]
		delay->running=true;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	721a      	strb	r2, [r3, #8]
		return false;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e00f      	b.n	80015de <delayRead+0x4a>
	}
	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 80015be:	f000 fb81 	bl	8001cc4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	1ad2      	subs	r2, r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d304      	bcc.n	80015dc <delayRead+0x48>
		delay->running=false;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	721a      	strb	r2, [r3, #8]
		return true;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <delayRead+0x4a>
	}
	return false;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	@ 0x38
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	4b90      	ldr	r3, [pc, #576]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a8f      	ldr	r2, [pc, #572]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b8d      	ldr	r3, [pc, #564]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	623b      	str	r3, [r7, #32]
 8001618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	4b89      	ldr	r3, [pc, #548]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a88      	ldr	r2, [pc, #544]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b86      	ldr	r3, [pc, #536]	@ (8001844 <MX_GPIO_Init+0x25c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	4b82      	ldr	r3, [pc, #520]	@ (8001844 <MX_GPIO_Init+0x25c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a81      	ldr	r2, [pc, #516]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b7f      	ldr	r3, [pc, #508]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	4b7b      	ldr	r3, [pc, #492]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a7a      	ldr	r2, [pc, #488]	@ (8001844 <MX_GPIO_Init+0x25c>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b78      	ldr	r3, [pc, #480]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b74      	ldr	r3, [pc, #464]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a73      	ldr	r2, [pc, #460]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b71      	ldr	r3, [pc, #452]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b6d      	ldr	r3, [pc, #436]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a6c      	ldr	r2, [pc, #432]	@ (8001844 <MX_GPIO_Init+0x25c>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b6a      	ldr	r3, [pc, #424]	@ (8001844 <MX_GPIO_Init+0x25c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b66      	ldr	r3, [pc, #408]	@ (8001844 <MX_GPIO_Init+0x25c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a65      	ldr	r2, [pc, #404]	@ (8001844 <MX_GPIO_Init+0x25c>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b63      	ldr	r3, [pc, #396]	@ (8001844 <MX_GPIO_Init+0x25c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001844 <MX_GPIO_Init+0x25c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001844 <MX_GPIO_Init+0x25c>)
 80016cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001844 <MX_GPIO_Init+0x25c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R2_Pin|R1_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	2148      	movs	r1, #72	@ 0x48
 80016e2:	4859      	ldr	r0, [pc, #356]	@ (8001848 <MX_GPIO_Init+0x260>)
 80016e4:	f000 fe6e 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80016ee:	4857      	ldr	r0, [pc, #348]	@ (800184c <MX_GPIO_Init+0x264>)
 80016f0:	f000 fe68 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2120      	movs	r1, #32
 80016f8:	4855      	ldr	r0, [pc, #340]	@ (8001850 <MX_GPIO_Init+0x268>)
 80016fa:	f000 fe63 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001704:	4853      	ldr	r0, [pc, #332]	@ (8001854 <MX_GPIO_Init+0x26c>)
 8001706:	f000 fe5d 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Encendido_GPIO_Port, Led_Encendido_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001710:	484e      	ldr	r0, [pc, #312]	@ (800184c <MX_GPIO_Init+0x264>)
 8001712:	f000 fe57 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Alerta_Pin|Led_Estado_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 800171c:	484a      	ldr	r0, [pc, #296]	@ (8001848 <MX_GPIO_Init+0x260>)
 800171e:	f000 fe51 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2140      	movs	r1, #64	@ 0x40
 8001726:	484c      	ldr	r0, [pc, #304]	@ (8001858 <MX_GPIO_Init+0x270>)
 8001728:	f000 fe4c 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin;
 800172c:	2334      	movs	r3, #52	@ 0x34
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	4842      	ldr	r0, [pc, #264]	@ (8001848 <MX_GPIO_Init+0x260>)
 8001740:	f000 fc94 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R1_Pin Led_Alerta_Pin Led_Estado_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R1_Pin|Led_Alerta_Pin|Led_Estado_Pin;
 8001744:	f640 2348 	movw	r3, #2632	@ 0xa48
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	483a      	ldr	r0, [pc, #232]	@ (8001848 <MX_GPIO_Init+0x260>)
 800175e:	f000 fc85 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001762:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001768:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4838      	ldr	r0, [pc, #224]	@ (800185c <MX_GPIO_Init+0x274>)
 800177a:	f000 fc77 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin Led_Encendido_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|Led_Encendido_Pin;
 800177e:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	482d      	ldr	r0, [pc, #180]	@ (800184c <MX_GPIO_Init+0x264>)
 8001798:	f000 fc68 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : Sirena_Pin */
  GPIO_InitStruct.Pin = Sirena_Pin;
 800179c:	2320      	movs	r3, #32
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Sirena_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4827      	ldr	r0, [pc, #156]	@ (8001850 <MX_GPIO_Init+0x268>)
 80017b4:	f000 fc5a 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_PIR_Pin Sensor_Magnetico_1_Pin */
  GPIO_InitStruct.Pin = Sensor_PIR_Pin|Sensor_Magnetico_1_Pin;
 80017b8:	23c0      	movs	r3, #192	@ 0xc0
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	4821      	ldr	r0, [pc, #132]	@ (8001850 <MX_GPIO_Init+0x268>)
 80017cc:	f000 fc4e 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017d0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	481a      	ldr	r0, [pc, #104]	@ (8001854 <MX_GPIO_Init+0x26c>)
 80017ea:	f000 fc3f 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Magnetico_2_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_2_Pin;
 80017ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_2_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	4817      	ldr	r0, [pc, #92]	@ (8001860 <MX_GPIO_Init+0x278>)
 8001804:	f000 fc32 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001808:	2340      	movs	r3, #64	@ 0x40
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	480e      	ldr	r0, [pc, #56]	@ (8001858 <MX_GPIO_Init+0x270>)
 8001820:	f000 fc24 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	4808      	ldr	r0, [pc, #32]	@ (8001858 <MX_GPIO_Init+0x270>)
 8001838:	f000 fc18 	bl	800206c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800183c:	bf00      	nop
 800183e:	3738      	adds	r7, #56	@ 0x38
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40021800 	.word	0x40021800
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00

08001864 <keypad_init>:
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
};

void keypad_init() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

    // Configurar filas como salidas en estado ALTO
    for (int i = 0; i < ROWS; i++) {
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	e022      	b.n	80018c4 <keypad_init+0x60>
        GPIO_InitStruct.Pin = rowPins[i];
 800187e:	4a23      	ldr	r2, [pc, #140]	@ (800190c <keypad_init+0xa8>)
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001886:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(rowPorts[i], &GPIO_InitStruct);
 8001894:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <keypad_init+0xac>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	1d3a      	adds	r2, r7, #4
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fbe3 	bl	800206c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 80018a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001910 <keypad_init+0xac>)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ae:	4a17      	ldr	r2, [pc, #92]	@ (800190c <keypad_init+0xa8>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	f000 fd83 	bl	80023c4 <HAL_GPIO_WritePin>
    for (int i = 0; i < ROWS; i++) {
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	ddd9      	ble.n	800187e <keypad_init+0x1a>
    }

    // Configurar columnas como entradas con pull-up
    for (int j = 0; j < COLS; j++) {
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	e014      	b.n	80018fa <keypad_init+0x96>
        GPIO_InitStruct.Pin = colPins[j];
 80018d0:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <keypad_init+0xb0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d8:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018de:	2301      	movs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(colPorts[j], &GPIO_InitStruct);
 80018e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <keypad_init+0xb4>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	1d3a      	adds	r2, r7, #4
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fbbc 	bl	800206c <HAL_GPIO_Init>
    for (int j = 0; j < COLS; j++) {
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	3301      	adds	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	dde7      	ble.n	80018d0 <keypad_init+0x6c>
    }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000001c 	.word	0x2000001c
 8001910:	2000000c 	.word	0x2000000c
 8001914:	20000030 	.word	0x20000030
 8001918:	20000024 	.word	0x20000024

0800191c <keypad_getkey>:

char keypad_getkey() {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
    for (int i = 0; i < ROWS; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e052      	b.n	80019ce <keypad_getkey+0xb2>
        // Poner todas las filas en alto excepto la actual
        for (int k = 0; k < ROWS; k++) {
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	e014      	b.n	8001958 <keypad_getkey+0x3c>
            HAL_GPIO_WritePin(rowPorts[k], rowPins[k], (i == k) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800192e:	4a2c      	ldr	r2, [pc, #176]	@ (80019e0 <keypad_getkey+0xc4>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001936:	4a2b      	ldr	r2, [pc, #172]	@ (80019e4 <keypad_getkey+0xc8>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	f000 fd39 	bl	80023c4 <HAL_GPIO_WritePin>
        for (int k = 0; k < ROWS; k++) {
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3301      	adds	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b03      	cmp	r3, #3
 800195c:	dde7      	ble.n	800192e <keypad_getkey+0x12>
        }

        // Leer columnas
        for (int j = 0; j < COLS; j++) {
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	e02e      	b.n	80019c2 <keypad_getkey+0xa6>
            if (HAL_GPIO_ReadPin(colPorts[j], colPins[j]) == GPIO_PIN_RESET) {
 8001964:	4a20      	ldr	r2, [pc, #128]	@ (80019e8 <keypad_getkey+0xcc>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800196c:	491f      	ldr	r1, [pc, #124]	@ (80019ec <keypad_getkey+0xd0>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 fd0c 	bl	8002394 <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11c      	bne.n	80019bc <keypad_getkey+0xa0>
                HAL_Delay(50); // Anti-rebote
 8001982:	2032      	movs	r0, #50	@ 0x32
 8001984:	f000 f9aa 	bl	8001cdc <HAL_Delay>
                while (HAL_GPIO_ReadPin(colPorts[j], colPins[j]) == GPIO_PIN_RESET);
 8001988:	bf00      	nop
 800198a:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <keypad_getkey+0xcc>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001992:	4916      	ldr	r1, [pc, #88]	@ (80019ec <keypad_getkey+0xd0>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800199a:	4619      	mov	r1, r3
 800199c:	4610      	mov	r0, r2
 800199e:	f000 fcf9 	bl	8002394 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <keypad_getkey+0x6e>
                return keymap[i][j];
 80019a8:	4911      	ldr	r1, [pc, #68]	@ (80019f0 <keypad_getkey+0xd4>)
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	18ca      	adds	r2, r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	e00c      	b.n	80019d6 <keypad_getkey+0xba>
        for (int j = 0; j < COLS; j++) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	ddcd      	ble.n	8001964 <keypad_getkey+0x48>
    for (int i = 0; i < ROWS; i++) {
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	dda9      	ble.n	8001928 <keypad_getkey+0xc>
            }
        }
    }
    return '\0'; // No se presionó ninguna tecla
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	2000001c 	.word	0x2000001c
 80019e8:	20000024 	.word	0x20000024
 80019ec:	20000030 	.word	0x20000030
 80019f0:	20000038 	.word	0x20000038

080019f4 <lcd_init>:
/*****************************************************************************************************************
 * @brief: Inicializar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_init() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Tiempo de inicio según especificación HD44780
 80019f8:	2032      	movs	r0, #50	@ 0x32
 80019fa:	f000 f96f 	bl	8001cdc <HAL_Delay>
    lcd_send_command(0x30);
 80019fe:	2030      	movs	r0, #48	@ 0x30
 8001a00:	f000 f85c 	bl	8001abc <lcd_send_command>
    HAL_Delay(5);
 8001a04:	2005      	movs	r0, #5
 8001a06:	f000 f969 	bl	8001cdc <HAL_Delay>
    lcd_send_command(0x30);
 8001a0a:	2030      	movs	r0, #48	@ 0x30
 8001a0c:	f000 f856 	bl	8001abc <lcd_send_command>
    HAL_Delay(1);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f000 f963 	bl	8001cdc <HAL_Delay>
    lcd_send_command(0x30);
 8001a16:	2030      	movs	r0, #48	@ 0x30
 8001a18:	f000 f850 	bl	8001abc <lcd_send_command>
    lcd_send_command(0x20); // Cambiar a modo 4 bits
 8001a1c:	2020      	movs	r0, #32
 8001a1e:	f000 f84d 	bl	8001abc <lcd_send_command>

    lcd_send_command(0x28); // Configuración: LCD 2 líneas, matriz 5x8
 8001a22:	2028      	movs	r0, #40	@ 0x28
 8001a24:	f000 f84a 	bl	8001abc <lcd_send_command>
    lcd_send_command(0x08); // Apagar display
 8001a28:	2008      	movs	r0, #8
 8001a2a:	f000 f847 	bl	8001abc <lcd_send_command>
    lcd_send_command(0x01); // Limpiar pantalla
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f000 f844 	bl	8001abc <lcd_send_command>
    HAL_Delay(2);
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 f951 	bl	8001cdc <HAL_Delay>
    lcd_send_command(0x06); // Configurar modo de entrada
 8001a3a:	2006      	movs	r0, #6
 8001a3c:	f000 f83e 	bl	8001abc <lcd_send_command>
    lcd_send_command(0x0C); // Encender display, cursor apagado
 8001a40:	200c      	movs	r0, #12
 8001a42:	f000 f83b 	bl	8001abc <lcd_send_command>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <lcd_clear>:
/*****************************************************************************************************************
 * @brief: Limpiar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_clear() {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
    lcd_send_command(0x01); // Limpiar pantalla
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f000 f834 	bl	8001abc <lcd_send_command>
    HAL_Delay(2);
 8001a54:	2002      	movs	r0, #2
 8001a56:	f000 f941 	bl	8001cdc <HAL_Delay>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <lcd_set_cursor>:
 * @brief: Posicionar el cursor en la pantalla LCD
 * @param row: Fila de la pantalla
 * @param col: Columna de la pantalla
 * @retval void
******************************************************************************************************************/
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	460a      	mov	r2, r1
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	71bb      	strb	r3, [r7, #6]
    uint8_t addresses[] = {0x80, 0xC0}; // Dirección DDRAM para la primera y segunda línea
 8001a6e:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8001a72:	81bb      	strh	r3, [r7, #12]
    lcd_send_command(addresses[row] + col);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	3310      	adds	r3, #16
 8001a78:	443b      	add	r3, r7
 8001a7a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	4413      	add	r3, r2
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f819 	bl	8001abc <lcd_send_command>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <lcd_print>:
/*****************************************************************************************************************
 * @brief: Imprimir un texto en la pantalla LCD
 * @param str: Cadena de caracteres a imprimir
 * @retval void
******************************************************************************************************************/
void lcd_print(const char *str) {
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001a9a:	e006      	b.n	8001aaa <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f817 	bl	8001ad8 <lcd_send_data>
    while (*str) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f4      	bne.n	8001a9c <lcd_print+0xa>
    }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <lcd_send_command>:
/*****************************************************************************************************************
 * @brief: Enviar un comando a la pantalla LCD
 * @param cmd: Comando a enviar // entero de 8bits sin signo
 * @retval void
******************************************************************************************************************/
static void lcd_send_command(uint8_t cmd) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0x00);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f812 	bl	8001af4 <lcd_send>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <lcd_send_data>:
/*****************************************************************************************************************
 * @brief: Enviar un dato a la pantalla LCD
 * @param data: Dato a enviar // Entero sin signo de 8bits
 * @retval void
******************************************************************************************************************/
static void lcd_send_data(uint8_t data) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 0x01);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f804 	bl	8001af4 <lcd_send>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <lcd_send>:
 * @brief: Enviar datos a la pantalla LCD
 * @param value: Valor a enviar
 * @param mode: Modo de operación (comando o datos)
 * @retval void
******************************************************************************************************************/
static void lcd_send(uint8_t value, uint8_t mode) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	460a      	mov	r2, r1
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	4613      	mov	r3, r2
 8001b02:	71bb      	strb	r3, [r7, #6]
    lcd_control = lcd_backlight | mode;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <lcd_send+0x40>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <lcd_send+0x44>)
 8001b10:	701a      	strb	r2, [r3, #0]
    lcd_write_nibble(value & 0xF0);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f023 030f 	bic.w	r3, r3, #15
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f80e 	bl	8001b3c <lcd_write_nibble>
    lcd_write_nibble((value << 4) & 0xF0);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f808 	bl	8001b3c <lcd_write_nibble>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000044 	.word	0x20000044
 8001b38:	200001ac 	.word	0x200001ac

08001b3c <lcd_write_nibble>:
/*****************************************************************************************************************
 * @brief: Escribir un nibble en la pantalla LCD
 * @param nibble: Parte alta o baja del byte a enviar
 * @retval void
******************************************************************************************************************/
static void lcd_write_nibble(uint8_t nibble) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
    uint8_t data = nibble | lcd_control | 0x04; // Habilitar bit Enable
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <lcd_write_nibble+0x58>)
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001b58:	f107 020f 	add.w	r2, r7, #15
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2301      	movs	r3, #1
 8001b64:	214e      	movs	r1, #78	@ 0x4e
 8001b66:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <lcd_write_nibble+0x5c>)
 8001b68:	f000 fda4 	bl	80026b4 <HAL_I2C_Master_Transmit>
    data &= ~0x04; // Deshabilitar bit Enable
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	f023 0304 	bic.w	r3, r3, #4
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001b76:	f107 020f 	add.w	r2, r7, #15
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	214e      	movs	r1, #78	@ 0x4e
 8001b84:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <lcd_write_nibble+0x5c>)
 8001b86:	f000 fd95 	bl	80026b4 <HAL_I2C_Master_Transmit>
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200001ac 	.word	0x200001ac
 8001b98:	200000bc 	.word	0x200000bc

08001b9c <MX_I2C2_Init>:
  * @param None
  * @retval None
  */
/******************************************************************************************************************/
void MX_I2C2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001ba2:	4a13      	ldr	r2, [pc, #76]	@ (8001bf0 <MX_I2C2_Init+0x54>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001ba8:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <MX_I2C2_Init+0x58>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bbe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	@ (8001bec <MX_I2C2_Init+0x50>)
 8001bda:	f000 fc27 	bl	800242c <HAL_I2C_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001be4:	f7ff fae6 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200000bc 	.word	0x200000bc
 8001bf0:	40005800 	.word	0x40005800
 8001bf4:	000186a0 	.word	0x000186a0

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <HAL_Init+0x40>)
 8001c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_Init+0x40>)
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_Init+0x40>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f94f 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fac8 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f967 	bl	8001f2e <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f000 f92f 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	@ (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000008 	.word	0x20000008
 8001c94:	2000004c 	.word	0x2000004c
 8001c98:	20000048 	.word	0x20000048

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000004c 	.word	0x2000004c
 8001cc0:	200001b0 	.word	0x200001b0

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200001b0 	.word	0x200001b0

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000004c 	.word	0x2000004c

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	@ (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff29 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff3e 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff8e 	bl	8001e18 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5d 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff31 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff feb6 	bl	8001cc4 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e052      	b.n	800201e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0216 	bic.w	r2, r2, #22
 8001f86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d103      	bne.n	8001fa8 <HAL_DMA_Abort+0x62>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0208 	bic.w	r2, r2, #8
 8001fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc8:	e013      	b.n	8001ff2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fca:	f7ff fe7b 	bl	8001cc4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d90c      	bls.n	8001ff2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e015      	b.n	800201e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e4      	bne.n	8001fca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	223f      	movs	r2, #63	@ 0x3f
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d004      	beq.n	8002044 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2280      	movs	r2, #128	@ 0x80
 800203e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e00c      	b.n	800205e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2205      	movs	r2, #5
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e165      	b.n	8002354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8154 	bne.w	800234e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d005      	beq.n	80020be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d130      	bne.n	8002120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b03      	cmp	r3, #3
 800212a:	d017      	beq.n	800215c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d123      	bne.n	80021b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ae 	beq.w	800234e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_GPIO_Init+0x300>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_GPIO_Init+0x300>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002200:	6453      	str	r3, [r2, #68]	@ 0x44
 8002202:	4b5a      	ldr	r3, [pc, #360]	@ (800236c <HAL_GPIO_Init+0x300>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a58      	ldr	r2, [pc, #352]	@ (8002370 <HAL_GPIO_Init+0x304>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	@ (8002374 <HAL_GPIO_Init+0x308>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	@ (8002378 <HAL_GPIO_Init+0x30c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	@ (800237c <HAL_GPIO_Init+0x310>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	@ (8002380 <HAL_GPIO_Init+0x314>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	@ (8002384 <HAL_GPIO_Init+0x318>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x20a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	@ (8002388 <HAL_GPIO_Init+0x31c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x206>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a49      	ldr	r2, [pc, #292]	@ (800238c <HAL_GPIO_Init+0x320>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x202>
 800226a:	2306      	movs	r3, #6
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800226e:	2307      	movs	r3, #7
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	@ (8002370 <HAL_GPIO_Init+0x304>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a31      	ldr	r2, [pc, #196]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a26      	ldr	r2, [pc, #152]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <HAL_GPIO_Init+0x324>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_GPIO_Init+0x324>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_GPIO_Init+0x324>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae96 	bls.w	8002088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002408:	887a      	ldrh	r2, [r7, #2]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	041a      	lsls	r2, r3, #16
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43d9      	mvns	r1, r3
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	400b      	ands	r3, r1
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e12b      	b.n	8002696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fedc 	bl	8001210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	@ 0x24
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800247e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800248e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002490:	f000 fc76 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a81      	ldr	r2, [pc, #516]	@ (80026a0 <HAL_I2C_Init+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d807      	bhi.n	80024b0 <HAL_I2C_Init+0x84>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a80      	ldr	r2, [pc, #512]	@ (80026a4 <HAL_I2C_Init+0x278>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e006      	b.n	80024be <HAL_I2C_Init+0x92>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a7d      	ldr	r2, [pc, #500]	@ (80026a8 <HAL_I2C_Init+0x27c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0e7      	b.n	8002696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a78      	ldr	r2, [pc, #480]	@ (80026ac <HAL_I2C_Init+0x280>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0c9b      	lsrs	r3, r3, #18
 80024d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a6a      	ldr	r2, [pc, #424]	@ (80026a0 <HAL_I2C_Init+0x274>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <HAL_I2C_Init+0xd4>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	e009      	b.n	8002514 <HAL_I2C_Init+0xe8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	4a69      	ldr	r2, [pc, #420]	@ (80026b0 <HAL_I2C_Init+0x284>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	3301      	adds	r3, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002526:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	495c      	ldr	r1, [pc, #368]	@ (80026a0 <HAL_I2C_Init+0x274>)
 8002530:	428b      	cmp	r3, r1
 8002532:	d819      	bhi.n	8002568 <HAL_I2C_Init+0x13c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e59      	subs	r1, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002548:	400b      	ands	r3, r1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_I2C_Init+0x138>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e59      	subs	r1, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fbb1 f3f3 	udiv	r3, r1, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	e051      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002564:	2304      	movs	r3, #4
 8002566:	e04f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <HAL_I2C_Init+0x168>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e012      	b.n	80025ba <HAL_I2C_Init+0x18e>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	0099      	lsls	r1, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Init+0x196>
 80025be:	2301      	movs	r3, #1
 80025c0:	e022      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <HAL_I2C_Init+0x1bc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e58      	subs	r0, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	440b      	add	r3, r1
 80025d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025e6:	e00f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6809      	ldr	r1, [r1, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002636:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6911      	ldr	r1, [r2, #16]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	000186a0 	.word	0x000186a0
 80026a4:	001e847f 	.word	0x001e847f
 80026a8:	003d08ff 	.word	0x003d08ff
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	4613      	mov	r3, r2
 80026c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fafc 	bl	8001cc4 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 80e0 	bne.w	800289c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	4970      	ldr	r1, [pc, #448]	@ (80028a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f964 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0d3      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x50>
 8002700:	2302      	movs	r3, #2
 8002702:	e0cc      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d007      	beq.n	800272a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2221      	movs	r2, #33	@ 0x21
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2210      	movs	r2, #16
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a50      	ldr	r2, [pc, #320]	@ (80028ac <HAL_I2C_Master_Transmit+0x1f8>)
 800276a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f89c 	bl	80028b0 <I2C_MasterRequestWrite>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e08d      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002798:	e066      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fa22 	bl	8002be8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d107      	bne.n	80027c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06b      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d11b      	bne.n	800283c <HAL_I2C_Master_Transmit+0x188>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d017      	beq.n	800283c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	6a39      	ldr	r1, [r7, #32]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fa19 	bl	8002c78 <I2C_WaitOnBTFFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002862:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01a      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d194      	bne.n	800279a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	00100002 	.word	0x00100002
 80028ac:	ffff0000 	.word	0xffff0000

080028b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	460b      	mov	r3, r1
 80028be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d006      	beq.n	80028da <I2C_MasterRequestWrite+0x2a>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d003      	beq.n	80028da <I2C_MasterRequestWrite+0x2a>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028d8:	d108      	bne.n	80028ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e00b      	b.n	8002904 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	2b12      	cmp	r3, #18
 80028f2:	d107      	bne.n	8002904 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f84f 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800292a:	d103      	bne.n	8002934 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e035      	b.n	80029a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002940:	d108      	bne.n	8002954 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002942:	897b      	ldrh	r3, [r7, #10]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002950:	611a      	str	r2, [r3, #16]
 8002952:	e01b      	b.n	800298c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002954:	897b      	ldrh	r3, [r7, #10]
 8002956:	11db      	asrs	r3, r3, #7
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 0306 	and.w	r3, r3, #6
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f063 030f 	orn	r3, r3, #15
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	490e      	ldr	r1, [pc, #56]	@ (80029ac <I2C_MasterRequestWrite+0xfc>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f898 	bl	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e010      	b.n	80029a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4907      	ldr	r1, [pc, #28]	@ (80029b0 <I2C_MasterRequestWrite+0x100>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f888 	bl	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	00010008 	.word	0x00010008
 80029b0:	00010002 	.word	0x00010002

080029b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c4:	e048      	b.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d044      	beq.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7ff f979 	bl	8001cc4 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d139      	bne.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d10d      	bne.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x56>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	43da      	mvns	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	e00c      	b.n	8002a24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	43da      	mvns	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d116      	bne.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e023      	b.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10d      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	e00c      	b.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	43da      	mvns	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d093      	beq.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ab6:	e071      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac6:	d123      	bne.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ae0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e067      	b.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d041      	beq.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7ff f8d4 	bl	8001cc4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d302      	bcc.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d136      	bne.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10c      	bne.n	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	e00b      	b.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e021      	b.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0c1b      	lsrs	r3, r3, #16
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10c      	bne.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e00b      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f af6d 	bne.w	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf4:	e034      	b.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f886 	bl	8002d08 <I2C_IsAcknowledgeFailed>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e034      	b.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d028      	beq.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7ff f859 	bl	8001cc4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11d      	bne.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b80      	cmp	r3, #128	@ 0x80
 8002c30:	d016      	beq.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6a:	2b80      	cmp	r3, #128	@ 0x80
 8002c6c:	d1c3      	bne.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c84:	e034      	b.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f83e 	bl	8002d08 <I2C_IsAcknowledgeFailed>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e034      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d028      	beq.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7ff f811 	bl	8001cc4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11d      	bne.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d016      	beq.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e007      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d1c3      	bne.n	8002c86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1e:	d11b      	bne.n	8002d58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000008 	.word	0x20000008

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a9b      	lsrs	r3, r3, #10
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4903      	ldr	r1, [pc, #12]	@ (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	08004a50 	.word	0x08004a50

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dac:	f7ff ffdc 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	@ (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08004a50 	.word	0x08004a50

08002dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e042      	b.n	8002e68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fa52 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	@ 0x24
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fd5f 	bl	80038d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d175      	bne.n	8002f7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_UART_Transmit+0x2c>
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e06e      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2221      	movs	r2, #33	@ 0x21
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eae:	f7fe ff09 	bl	8001cc4 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec8:	d108      	bne.n	8002edc <HAL_UART_Transmit+0x6c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e003      	b.n	8002ee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee4:	e02e      	b.n	8002f44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2180      	movs	r1, #128	@ 0x80
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fafb 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03a      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3302      	adds	r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	e007      	b.n	8002f36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1cb      	bne.n	8002ee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2140      	movs	r1, #64	@ 0x40
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fac7 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e006      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b0ba      	sub	sp, #232	@ 0xe8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_UART_IRQHandler+0x66>
 8002fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fbb8 	bl	800375c <UART_Receive_IT>
      return;
 8002fec:	e25b      	b.n	80034a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80de 	beq.w	80031b4 <HAL_UART_IRQHandler+0x22c>
 8002ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003008:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80d1 	beq.w	80031b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_UART_IRQHandler+0xae>
 800301e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_UART_IRQHandler+0xd2>
 8003042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	f043 0202 	orr.w	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_UART_IRQHandler+0xf6>
 8003066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d011      	beq.n	80030ae <HAL_UART_IRQHandler+0x126>
 800308a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0208 	orr.w	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 81f2 	beq.w	800349c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_UART_IRQHandler+0x14e>
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fb43 	bl	800375c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b40      	cmp	r3, #64	@ 0x40
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <HAL_UART_IRQHandler+0x17a>
 80030fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04f      	beq.n	80031a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa4b 	bl	800359e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d141      	bne.n	800319a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800312c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3314      	adds	r3, #20
 800313e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003142:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003146:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800314e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800315a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1d9      	bne.n	8003116 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d013      	beq.n	8003192 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316e:	4a7e      	ldr	r2, [pc, #504]	@ (8003368 <HAL_UART_IRQHandler+0x3e0>)
 8003170:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe ff55 	bl	8002026 <HAL_DMA_Abort_IT>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800318c:	4610      	mov	r0, r2
 800318e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	e00e      	b.n	80031b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f994 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00a      	b.n	80031b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f990 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e006      	b.n	80031b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f98c 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031ae:	e175      	b.n	800349c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	bf00      	nop
    return;
 80031b2:	e173      	b.n	800349c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 814f 	bne.w	800345c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8148 	beq.w	800345c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8141 	beq.w	800345c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	f040 80b6 	bne.w	800336c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800320c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8145 	beq.w	80034a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800321a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800321e:	429a      	cmp	r2, r3
 8003220:	f080 813e 	bcs.w	80034a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800322a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003236:	f000 8088 	beq.w	800334a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003266:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800326a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003272:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800327e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1d9      	bne.n	800323a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3314      	adds	r3, #20
 80032a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e1      	bne.n	8003286 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3314      	adds	r3, #20
 80032e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e3      	bne.n	80032c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800331a:	f023 0310 	bic.w	r3, r3, #16
 800331e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800332c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800332e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003332:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800333a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e3      	bne.n	8003308 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fdfe 	bl	8001f46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003358:	b29b      	uxth	r3, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f8b7 	bl	80034d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003366:	e09b      	b.n	80034a0 <HAL_UART_IRQHandler+0x518>
 8003368:	08003665 	.word	0x08003665
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003374:	b29b      	uxth	r3, r3
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 808e 	beq.w	80034a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8089 	beq.w	80034a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80033b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e3      	bne.n	8003392 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3314      	adds	r3, #20
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	623b      	str	r3, [r7, #32]
   return(result);
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3314      	adds	r3, #20
 80033ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e3      	bne.n	80033ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0310 	bic.w	r3, r3, #16
 8003426:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003434:	61fa      	str	r2, [r7, #28]
 8003436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	69b9      	ldr	r1, [r7, #24]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	617b      	str	r3, [r7, #20]
   return(result);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e3      	bne.n	8003410 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800344e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f83d 	bl	80034d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800345a:	e023      	b.n	80034a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800345c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <HAL_UART_IRQHandler+0x4f4>
 8003468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800346c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f909 	bl	800368c <UART_Transmit_IT>
    return;
 800347a:	e014      	b.n	80034a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <HAL_UART_IRQHandler+0x51e>
 8003488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f949 	bl	800372c <UART_EndTransmit_IT>
    return;
 800349a:	e004      	b.n	80034a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800349c:	bf00      	nop
 800349e:	e002      	b.n	80034a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80034a0:	bf00      	nop
 80034a2:	e000      	b.n	80034a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80034a4:	bf00      	nop
  }
}
 80034a6:	37e8      	adds	r7, #232	@ 0xe8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	e03b      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d037      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fe fbdd 	bl	8001cc4 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <UART_WaitOnFlagUntilTimeout+0x30>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e03a      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d023      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b80      	cmp	r3, #128	@ 0x80
 8003532:	d020      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d01d      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d116      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f81d 	bl	800359e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2208      	movs	r2, #8
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0b4      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800359e:	b480      	push	{r7}
 80035a0:	b095      	sub	sp, #84	@ 0x54
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80035c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3314      	adds	r3, #20
 80035f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e5      	bne.n	80035da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	2b01      	cmp	r3, #1
 8003614:	d119      	bne.n	800364a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	60bb      	str	r3, [r7, #8]
   return(result);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 0310 	bic.w	r3, r3, #16
 800362c:	647b      	str	r3, [r7, #68]	@ 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003636:	61ba      	str	r2, [r7, #24]
 8003638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6979      	ldr	r1, [r7, #20]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	613b      	str	r3, [r7, #16]
   return(result);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003658:	bf00      	nop
 800365a:	3754      	adds	r7, #84	@ 0x54
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003670:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff ff1e 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b21      	cmp	r3, #33	@ 0x21
 800369e:	d13e      	bne.n	800371e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a8:	d114      	bne.n	80036d4 <UART_Transmit_IT+0x48>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d110      	bne.n	80036d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]
 80036d2:	e008      	b.n	80036e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	1c59      	adds	r1, r3, #1
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6211      	str	r1, [r2, #32]
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4619      	mov	r1, r3
 80036f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003708:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003718:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003742:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fd ff03 	bl	8001558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b22      	cmp	r3, #34	@ 0x22
 800376e:	f040 80ae 	bne.w	80038ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377a:	d117      	bne.n	80037ac <UART_Receive_IT+0x50>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d113      	bne.n	80037ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379a:	b29a      	uxth	r2, r3
 800379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80037aa:	e026      	b.n	80037fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037be:	d007      	beq.n	80037d0 <UART_Receive_IT+0x74>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <UART_Receive_IT+0x82>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e008      	b.n	80037f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4619      	mov	r1, r3
 8003808:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800380a:	2b00      	cmp	r3, #0
 800380c:	d15d      	bne.n	80038ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0220 	bic.w	r2, r2, #32
 800381c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800382c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	2b01      	cmp	r3, #1
 8003852:	d135      	bne.n	80038c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	613b      	str	r3, [r7, #16]
   return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f023 0310 	bic.w	r3, r3, #16
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	330c      	adds	r3, #12
 8003878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387a:	623a      	str	r2, [r7, #32]
 800387c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	69f9      	ldr	r1, [r7, #28]
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	61bb      	str	r3, [r7, #24]
   return(result);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e5      	bne.n	800385a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d10a      	bne.n	80038b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fe0b 	bl	80034d4 <HAL_UARTEx_RxEventCallback>
 80038be:	e002      	b.n	80038c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fdf3 	bl	80034ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e002      	b.n	80038d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3730      	adds	r7, #48	@ 0x30
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b0c0      	sub	sp, #256	@ 0x100
 80038de:	af00      	add	r7, sp, #0
 80038e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	68d9      	ldr	r1, [r3, #12]
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	ea40 0301 	orr.w	r3, r0, r1
 8003900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	431a      	orrs	r2, r3
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003930:	f021 010c 	bic.w	r1, r1, #12
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800393e:	430b      	orrs	r3, r1
 8003940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003952:	6999      	ldr	r1, [r3, #24]
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	ea40 0301 	orr.w	r3, r0, r1
 800395e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b95      	ldr	r3, [pc, #596]	@ (8003bbc <UART_SetConfig+0x2e4>)
 8003968:	429a      	cmp	r2, r3
 800396a:	d011      	beq.n	8003990 <UART_SetConfig+0xb8>
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b93      	ldr	r3, [pc, #588]	@ (8003bc0 <UART_SetConfig+0x2e8>)
 8003974:	429a      	cmp	r2, r3
 8003976:	d00b      	beq.n	8003990 <UART_SetConfig+0xb8>
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b91      	ldr	r3, [pc, #580]	@ (8003bc4 <UART_SetConfig+0x2ec>)
 8003980:	429a      	cmp	r2, r3
 8003982:	d005      	beq.n	8003990 <UART_SetConfig+0xb8>
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc8 <UART_SetConfig+0x2f0>)
 800398c:	429a      	cmp	r2, r3
 800398e:	d104      	bne.n	800399a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003990:	f7ff fa0a 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003994:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003998:	e003      	b.n	80039a2 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800399a:	f7ff f9f1 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 800399e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ac:	f040 8110 	bne.w	8003bd0 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039c2:	4622      	mov	r2, r4
 80039c4:	462b      	mov	r3, r5
 80039c6:	1891      	adds	r1, r2, r2
 80039c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ca:	415b      	adcs	r3, r3
 80039cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039d2:	4621      	mov	r1, r4
 80039d4:	eb12 0801 	adds.w	r8, r2, r1
 80039d8:	4629      	mov	r1, r5
 80039da:	eb43 0901 	adc.w	r9, r3, r1
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039f2:	4690      	mov	r8, r2
 80039f4:	4699      	mov	r9, r3
 80039f6:	4623      	mov	r3, r4
 80039f8:	eb18 0303 	adds.w	r3, r8, r3
 80039fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a00:	462b      	mov	r3, r5
 8003a02:	eb49 0303 	adc.w	r3, r9, r3
 8003a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a1e:	460b      	mov	r3, r1
 8003a20:	18db      	adds	r3, r3, r3
 8003a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a24:	4613      	mov	r3, r2
 8003a26:	eb42 0303 	adc.w	r3, r2, r3
 8003a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a34:	f7fc fc5c 	bl	80002f0 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <UART_SetConfig+0x2f4>)
 8003a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	011c      	lsls	r4, r3, #4
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a58:	4642      	mov	r2, r8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	1891      	adds	r1, r2, r2
 8003a5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a60:	415b      	adcs	r3, r3
 8003a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a68:	4641      	mov	r1, r8
 8003a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a6e:	4649      	mov	r1, r9
 8003a70:	eb43 0b01 	adc.w	fp, r3, r1
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a88:	4692      	mov	sl, r2
 8003a8a:	469b      	mov	fp, r3
 8003a8c:	4643      	mov	r3, r8
 8003a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a96:	464b      	mov	r3, r9
 8003a98:	eb4b 0303 	adc.w	r3, fp, r3
 8003a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	18db      	adds	r3, r3, r3
 8003ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aba:	4613      	mov	r3, r2
 8003abc:	eb42 0303 	adc.w	r3, r2, r3
 8003ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003aca:	f7fc fc11 	bl	80002f0 <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8003bcc <UART_SetConfig+0x2f4>)
 8003ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2264      	movs	r2, #100	@ 0x64
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	1acb      	subs	r3, r1, r3
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003aea:	4b38      	ldr	r3, [pc, #224]	@ (8003bcc <UART_SetConfig+0x2f4>)
 8003aec:	fba3 2302 	umull	r2, r3, r3, r2
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003af8:	441c      	add	r4, r3
 8003afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	1891      	adds	r1, r2, r2
 8003b12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b14:	415b      	adcs	r3, r3
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	1851      	adds	r1, r2, r1
 8003b20:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b22:	4649      	mov	r1, r9
 8003b24:	414b      	adcs	r3, r1
 8003b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b34:	4659      	mov	r1, fp
 8003b36:	00cb      	lsls	r3, r1, #3
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3e:	4651      	mov	r1, sl
 8003b40:	00ca      	lsls	r2, r1, #3
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	4642      	mov	r2, r8
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b50:	464b      	mov	r3, r9
 8003b52:	460a      	mov	r2, r1
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b70:	460b      	mov	r3, r1
 8003b72:	18db      	adds	r3, r3, r3
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b76:	4613      	mov	r3, r2
 8003b78:	eb42 0303 	adc.w	r3, r2, r3
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b86:	f7fc fbb3 	bl	80002f0 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <UART_SetConfig+0x2f4>)
 8003b90:	fba3 1302 	umull	r1, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2164      	movs	r1, #100	@ 0x64
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	3332      	adds	r3, #50	@ 0x32
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bcc <UART_SetConfig+0x2f4>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	f003 0207 	and.w	r2, r3, #7
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4422      	add	r2, r4
 8003bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bb8:	e10a      	b.n	8003dd0 <UART_SetConfig+0x4f8>
 8003bba:	bf00      	nop
 8003bbc:	40011000 	.word	0x40011000
 8003bc0:	40011400 	.word	0x40011400
 8003bc4:	40011800 	.word	0x40011800
 8003bc8:	40011c00 	.word	0x40011c00
 8003bcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003be2:	4642      	mov	r2, r8
 8003be4:	464b      	mov	r3, r9
 8003be6:	1891      	adds	r1, r2, r2
 8003be8:	6239      	str	r1, [r7, #32]
 8003bea:	415b      	adcs	r3, r3
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	1854      	adds	r4, r2, r1
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	eb43 0501 	adc.w	r5, r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	00eb      	lsls	r3, r5, #3
 8003c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0a:	00e2      	lsls	r2, r4, #3
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	461d      	mov	r5, r3
 8003c10:	4643      	mov	r3, r8
 8003c12:	18e3      	adds	r3, r4, r3
 8003c14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c18:	464b      	mov	r3, r9
 8003c1a:	eb45 0303 	adc.w	r3, r5, r3
 8003c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c3e:	4629      	mov	r1, r5
 8003c40:	008b      	lsls	r3, r1, #2
 8003c42:	4621      	mov	r1, r4
 8003c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c48:	4621      	mov	r1, r4
 8003c4a:	008a      	lsls	r2, r1, #2
 8003c4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c50:	f7fc fb4e 	bl	80002f0 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4b60      	ldr	r3, [pc, #384]	@ (8003ddc <UART_SetConfig+0x504>)
 8003c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	011c      	lsls	r4, r3, #4
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	61b9      	str	r1, [r7, #24]
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c84:	4641      	mov	r1, r8
 8003c86:	1851      	adds	r1, r2, r1
 8003c88:	6139      	str	r1, [r7, #16]
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	414b      	adcs	r3, r1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	00cb      	lsls	r3, r1, #3
 8003ca0:	4651      	mov	r1, sl
 8003ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca6:	4651      	mov	r1, sl
 8003ca8:	00ca      	lsls	r2, r1, #3
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cb8:	464b      	mov	r3, r9
 8003cba:	460a      	mov	r2, r1
 8003cbc:	eb42 0303 	adc.w	r3, r2, r3
 8003cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cdc:	4649      	mov	r1, r9
 8003cde:	008b      	lsls	r3, r1, #2
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	008a      	lsls	r2, r1, #2
 8003cea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cee:	f7fc faff 	bl	80002f0 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4b38      	ldr	r3, [pc, #224]	@ (8003ddc <UART_SetConfig+0x504>)
 8003cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2264      	movs	r2, #100	@ 0x64
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	1acb      	subs	r3, r1, r3
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	3332      	adds	r3, #50	@ 0x32
 8003d0c:	4a33      	ldr	r2, [pc, #204]	@ (8003ddc <UART_SetConfig+0x504>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d18:	441c      	add	r4, r3
 8003d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d1e:	2200      	movs	r2, #0
 8003d20:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d22:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	415b      	adcs	r3, r3
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d38:	4641      	mov	r1, r8
 8003d3a:	1851      	adds	r1, r2, r1
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	4649      	mov	r1, r9
 8003d40:	414b      	adcs	r3, r1
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d50:	4659      	mov	r1, fp
 8003d52:	00cb      	lsls	r3, r1, #3
 8003d54:	4651      	mov	r1, sl
 8003d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	00ca      	lsls	r2, r1, #3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	4642      	mov	r2, r8
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	460a      	mov	r2, r1
 8003d6e:	eb42 0303 	adc.w	r3, r2, r3
 8003d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	008b      	lsls	r3, r1, #2
 8003d90:	4641      	mov	r1, r8
 8003d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d96:	4641      	mov	r1, r8
 8003d98:	008a      	lsls	r2, r1, #2
 8003d9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d9e:	f7fc faa7 	bl	80002f0 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <UART_SetConfig+0x504>)
 8003da8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2164      	movs	r1, #100	@ 0x64
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	3332      	adds	r3, #50	@ 0x32
 8003dba:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <UART_SetConfig+0x504>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4422      	add	r2, r4
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ddc:	51eb851f 	.word	0x51eb851f

08003de0 <sniprintf>:
 8003de0:	b40c      	push	{r2, r3}
 8003de2:	b530      	push	{r4, r5, lr}
 8003de4:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <sniprintf+0x64>)
 8003de6:	1e0c      	subs	r4, r1, #0
 8003de8:	681d      	ldr	r5, [r3, #0]
 8003dea:	b09d      	sub	sp, #116	@ 0x74
 8003dec:	da08      	bge.n	8003e00 <sniprintf+0x20>
 8003dee:	238b      	movs	r3, #139	@ 0x8b
 8003df0:	602b      	str	r3, [r5, #0]
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295
 8003df6:	b01d      	add	sp, #116	@ 0x74
 8003df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dfc:	b002      	add	sp, #8
 8003dfe:	4770      	bx	lr
 8003e00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003e04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e08:	bf14      	ite	ne
 8003e0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e0e:	4623      	moveq	r3, r4
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	9307      	str	r3, [sp, #28]
 8003e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e18:	9002      	str	r0, [sp, #8]
 8003e1a:	9006      	str	r0, [sp, #24]
 8003e1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003e22:	ab21      	add	r3, sp, #132	@ 0x84
 8003e24:	a902      	add	r1, sp, #8
 8003e26:	4628      	mov	r0, r5
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	f000 f9bd 	bl	80041a8 <_svfiprintf_r>
 8003e2e:	1c43      	adds	r3, r0, #1
 8003e30:	bfbc      	itt	lt
 8003e32:	238b      	movlt	r3, #139	@ 0x8b
 8003e34:	602b      	strlt	r3, [r5, #0]
 8003e36:	2c00      	cmp	r4, #0
 8003e38:	d0dd      	beq.n	8003df6 <sniprintf+0x16>
 8003e3a:	9b02      	ldr	r3, [sp, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e7d9      	b.n	8003df6 <sniprintf+0x16>
 8003e42:	bf00      	nop
 8003e44:	20000050 	.word	0x20000050

08003e48 <siprintf>:
 8003e48:	b40e      	push	{r1, r2, r3}
 8003e4a:	b500      	push	{lr}
 8003e4c:	b09c      	sub	sp, #112	@ 0x70
 8003e4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e50:	9002      	str	r0, [sp, #8]
 8003e52:	9006      	str	r0, [sp, #24]
 8003e54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e58:	4809      	ldr	r0, [pc, #36]	@ (8003e80 <siprintf+0x38>)
 8003e5a:	9107      	str	r1, [sp, #28]
 8003e5c:	9104      	str	r1, [sp, #16]
 8003e5e:	4909      	ldr	r1, [pc, #36]	@ (8003e84 <siprintf+0x3c>)
 8003e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e64:	9105      	str	r1, [sp, #20]
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	a902      	add	r1, sp, #8
 8003e6c:	f000 f99c 	bl	80041a8 <_svfiprintf_r>
 8003e70:	9b02      	ldr	r3, [sp, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	b01c      	add	sp, #112	@ 0x70
 8003e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e7c:	b003      	add	sp, #12
 8003e7e:	4770      	bx	lr
 8003e80:	20000050 	.word	0x20000050
 8003e84:	ffff0208 	.word	0xffff0208

08003e88 <memset>:
 8003e88:	4402      	add	r2, r0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d100      	bne.n	8003e92 <memset+0xa>
 8003e90:	4770      	bx	lr
 8003e92:	f803 1b01 	strb.w	r1, [r3], #1
 8003e96:	e7f9      	b.n	8003e8c <memset+0x4>

08003e98 <__errno>:
 8003e98:	4b01      	ldr	r3, [pc, #4]	@ (8003ea0 <__errno+0x8>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000050 	.word	0x20000050

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8003edc <__libc_init_array+0x38>)
 8003ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8003ee0 <__libc_init_array+0x3c>)
 8003eaa:	1b64      	subs	r4, r4, r5
 8003eac:	10a4      	asrs	r4, r4, #2
 8003eae:	2600      	movs	r6, #0
 8003eb0:	42a6      	cmp	r6, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8003ee4 <__libc_init_array+0x40>)
 8003eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee8 <__libc_init_array+0x44>)
 8003eb8:	f000 fc6e 	bl	8004798 <_init>
 8003ebc:	1b64      	subs	r4, r4, r5
 8003ebe:	10a4      	asrs	r4, r4, #2
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	42a6      	cmp	r6, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ecc:	4798      	blx	r3
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed6:	4798      	blx	r3
 8003ed8:	3601      	adds	r6, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	08004a94 	.word	0x08004a94
 8003ee0:	08004a94 	.word	0x08004a94
 8003ee4:	08004a94 	.word	0x08004a94
 8003ee8:	08004a98 	.word	0x08004a98

08003eec <__retarget_lock_acquire_recursive>:
 8003eec:	4770      	bx	lr

08003eee <__retarget_lock_release_recursive>:
 8003eee:	4770      	bx	lr

08003ef0 <strcpy>:
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ef6:	f803 2b01 	strb.w	r2, [r3], #1
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	d1f9      	bne.n	8003ef2 <strcpy+0x2>
 8003efe:	4770      	bx	lr

08003f00 <_free_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4605      	mov	r5, r0
 8003f04:	2900      	cmp	r1, #0
 8003f06:	d041      	beq.n	8003f8c <_free_r+0x8c>
 8003f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f0c:	1f0c      	subs	r4, r1, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bfb8      	it	lt
 8003f12:	18e4      	addlt	r4, r4, r3
 8003f14:	f000 f8e0 	bl	80040d8 <__malloc_lock>
 8003f18:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <_free_r+0x90>)
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	b933      	cbnz	r3, 8003f2c <_free_r+0x2c>
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	6014      	str	r4, [r2, #0]
 8003f22:	4628      	mov	r0, r5
 8003f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f28:	f000 b8dc 	b.w	80040e4 <__malloc_unlock>
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	d908      	bls.n	8003f42 <_free_r+0x42>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	1821      	adds	r1, r4, r0
 8003f34:	428b      	cmp	r3, r1
 8003f36:	bf01      	itttt	eq
 8003f38:	6819      	ldreq	r1, [r3, #0]
 8003f3a:	685b      	ldreq	r3, [r3, #4]
 8003f3c:	1809      	addeq	r1, r1, r0
 8003f3e:	6021      	streq	r1, [r4, #0]
 8003f40:	e7ed      	b.n	8003f1e <_free_r+0x1e>
 8003f42:	461a      	mov	r2, r3
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b10b      	cbz	r3, 8003f4c <_free_r+0x4c>
 8003f48:	42a3      	cmp	r3, r4
 8003f4a:	d9fa      	bls.n	8003f42 <_free_r+0x42>
 8003f4c:	6811      	ldr	r1, [r2, #0]
 8003f4e:	1850      	adds	r0, r2, r1
 8003f50:	42a0      	cmp	r0, r4
 8003f52:	d10b      	bne.n	8003f6c <_free_r+0x6c>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	4401      	add	r1, r0
 8003f58:	1850      	adds	r0, r2, r1
 8003f5a:	4283      	cmp	r3, r0
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	d1e0      	bne.n	8003f22 <_free_r+0x22>
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	6053      	str	r3, [r2, #4]
 8003f66:	4408      	add	r0, r1
 8003f68:	6010      	str	r0, [r2, #0]
 8003f6a:	e7da      	b.n	8003f22 <_free_r+0x22>
 8003f6c:	d902      	bls.n	8003f74 <_free_r+0x74>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	e7d6      	b.n	8003f22 <_free_r+0x22>
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	1821      	adds	r1, r4, r0
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	bf04      	itt	eq
 8003f7c:	6819      	ldreq	r1, [r3, #0]
 8003f7e:	685b      	ldreq	r3, [r3, #4]
 8003f80:	6063      	str	r3, [r4, #4]
 8003f82:	bf04      	itt	eq
 8003f84:	1809      	addeq	r1, r1, r0
 8003f86:	6021      	streq	r1, [r4, #0]
 8003f88:	6054      	str	r4, [r2, #4]
 8003f8a:	e7ca      	b.n	8003f22 <_free_r+0x22>
 8003f8c:	bd38      	pop	{r3, r4, r5, pc}
 8003f8e:	bf00      	nop
 8003f90:	200002f8 	.word	0x200002f8

08003f94 <sbrk_aligned>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4e0f      	ldr	r6, [pc, #60]	@ (8003fd4 <sbrk_aligned+0x40>)
 8003f98:	460c      	mov	r4, r1
 8003f9a:	6831      	ldr	r1, [r6, #0]
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	b911      	cbnz	r1, 8003fa6 <sbrk_aligned+0x12>
 8003fa0:	f000 fba6 	bl	80046f0 <_sbrk_r>
 8003fa4:	6030      	str	r0, [r6, #0]
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 fba1 	bl	80046f0 <_sbrk_r>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d103      	bne.n	8003fba <sbrk_aligned+0x26>
 8003fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	1cc4      	adds	r4, r0, #3
 8003fbc:	f024 0403 	bic.w	r4, r4, #3
 8003fc0:	42a0      	cmp	r0, r4
 8003fc2:	d0f8      	beq.n	8003fb6 <sbrk_aligned+0x22>
 8003fc4:	1a21      	subs	r1, r4, r0
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f000 fb92 	bl	80046f0 <_sbrk_r>
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d1f2      	bne.n	8003fb6 <sbrk_aligned+0x22>
 8003fd0:	e7ef      	b.n	8003fb2 <sbrk_aligned+0x1e>
 8003fd2:	bf00      	nop
 8003fd4:	200002f4 	.word	0x200002f4

08003fd8 <_malloc_r>:
 8003fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fdc:	1ccd      	adds	r5, r1, #3
 8003fde:	f025 0503 	bic.w	r5, r5, #3
 8003fe2:	3508      	adds	r5, #8
 8003fe4:	2d0c      	cmp	r5, #12
 8003fe6:	bf38      	it	cc
 8003fe8:	250c      	movcc	r5, #12
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	4606      	mov	r6, r0
 8003fee:	db01      	blt.n	8003ff4 <_malloc_r+0x1c>
 8003ff0:	42a9      	cmp	r1, r5
 8003ff2:	d904      	bls.n	8003ffe <_malloc_r+0x26>
 8003ff4:	230c      	movs	r3, #12
 8003ff6:	6033      	str	r3, [r6, #0]
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040d4 <_malloc_r+0xfc>
 8004002:	f000 f869 	bl	80040d8 <__malloc_lock>
 8004006:	f8d8 3000 	ldr.w	r3, [r8]
 800400a:	461c      	mov	r4, r3
 800400c:	bb44      	cbnz	r4, 8004060 <_malloc_r+0x88>
 800400e:	4629      	mov	r1, r5
 8004010:	4630      	mov	r0, r6
 8004012:	f7ff ffbf 	bl	8003f94 <sbrk_aligned>
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	4604      	mov	r4, r0
 800401a:	d158      	bne.n	80040ce <_malloc_r+0xf6>
 800401c:	f8d8 4000 	ldr.w	r4, [r8]
 8004020:	4627      	mov	r7, r4
 8004022:	2f00      	cmp	r7, #0
 8004024:	d143      	bne.n	80040ae <_malloc_r+0xd6>
 8004026:	2c00      	cmp	r4, #0
 8004028:	d04b      	beq.n	80040c2 <_malloc_r+0xea>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	4639      	mov	r1, r7
 800402e:	4630      	mov	r0, r6
 8004030:	eb04 0903 	add.w	r9, r4, r3
 8004034:	f000 fb5c 	bl	80046f0 <_sbrk_r>
 8004038:	4581      	cmp	r9, r0
 800403a:	d142      	bne.n	80040c2 <_malloc_r+0xea>
 800403c:	6821      	ldr	r1, [r4, #0]
 800403e:	1a6d      	subs	r5, r5, r1
 8004040:	4629      	mov	r1, r5
 8004042:	4630      	mov	r0, r6
 8004044:	f7ff ffa6 	bl	8003f94 <sbrk_aligned>
 8004048:	3001      	adds	r0, #1
 800404a:	d03a      	beq.n	80040c2 <_malloc_r+0xea>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	442b      	add	r3, r5
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	f8d8 3000 	ldr.w	r3, [r8]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	bb62      	cbnz	r2, 80040b4 <_malloc_r+0xdc>
 800405a:	f8c8 7000 	str.w	r7, [r8]
 800405e:	e00f      	b.n	8004080 <_malloc_r+0xa8>
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	1b52      	subs	r2, r2, r5
 8004064:	d420      	bmi.n	80040a8 <_malloc_r+0xd0>
 8004066:	2a0b      	cmp	r2, #11
 8004068:	d917      	bls.n	800409a <_malloc_r+0xc2>
 800406a:	1961      	adds	r1, r4, r5
 800406c:	42a3      	cmp	r3, r4
 800406e:	6025      	str	r5, [r4, #0]
 8004070:	bf18      	it	ne
 8004072:	6059      	strne	r1, [r3, #4]
 8004074:	6863      	ldr	r3, [r4, #4]
 8004076:	bf08      	it	eq
 8004078:	f8c8 1000 	streq.w	r1, [r8]
 800407c:	5162      	str	r2, [r4, r5]
 800407e:	604b      	str	r3, [r1, #4]
 8004080:	4630      	mov	r0, r6
 8004082:	f000 f82f 	bl	80040e4 <__malloc_unlock>
 8004086:	f104 000b 	add.w	r0, r4, #11
 800408a:	1d23      	adds	r3, r4, #4
 800408c:	f020 0007 	bic.w	r0, r0, #7
 8004090:	1ac2      	subs	r2, r0, r3
 8004092:	bf1c      	itt	ne
 8004094:	1a1b      	subne	r3, r3, r0
 8004096:	50a3      	strne	r3, [r4, r2]
 8004098:	e7af      	b.n	8003ffa <_malloc_r+0x22>
 800409a:	6862      	ldr	r2, [r4, #4]
 800409c:	42a3      	cmp	r3, r4
 800409e:	bf0c      	ite	eq
 80040a0:	f8c8 2000 	streq.w	r2, [r8]
 80040a4:	605a      	strne	r2, [r3, #4]
 80040a6:	e7eb      	b.n	8004080 <_malloc_r+0xa8>
 80040a8:	4623      	mov	r3, r4
 80040aa:	6864      	ldr	r4, [r4, #4]
 80040ac:	e7ae      	b.n	800400c <_malloc_r+0x34>
 80040ae:	463c      	mov	r4, r7
 80040b0:	687f      	ldr	r7, [r7, #4]
 80040b2:	e7b6      	b.n	8004022 <_malloc_r+0x4a>
 80040b4:	461a      	mov	r2, r3
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	d1fb      	bne.n	80040b4 <_malloc_r+0xdc>
 80040bc:	2300      	movs	r3, #0
 80040be:	6053      	str	r3, [r2, #4]
 80040c0:	e7de      	b.n	8004080 <_malloc_r+0xa8>
 80040c2:	230c      	movs	r3, #12
 80040c4:	6033      	str	r3, [r6, #0]
 80040c6:	4630      	mov	r0, r6
 80040c8:	f000 f80c 	bl	80040e4 <__malloc_unlock>
 80040cc:	e794      	b.n	8003ff8 <_malloc_r+0x20>
 80040ce:	6005      	str	r5, [r0, #0]
 80040d0:	e7d6      	b.n	8004080 <_malloc_r+0xa8>
 80040d2:	bf00      	nop
 80040d4:	200002f8 	.word	0x200002f8

080040d8 <__malloc_lock>:
 80040d8:	4801      	ldr	r0, [pc, #4]	@ (80040e0 <__malloc_lock+0x8>)
 80040da:	f7ff bf07 	b.w	8003eec <__retarget_lock_acquire_recursive>
 80040de:	bf00      	nop
 80040e0:	200002f0 	.word	0x200002f0

080040e4 <__malloc_unlock>:
 80040e4:	4801      	ldr	r0, [pc, #4]	@ (80040ec <__malloc_unlock+0x8>)
 80040e6:	f7ff bf02 	b.w	8003eee <__retarget_lock_release_recursive>
 80040ea:	bf00      	nop
 80040ec:	200002f0 	.word	0x200002f0

080040f0 <__ssputs_r>:
 80040f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f4:	688e      	ldr	r6, [r1, #8]
 80040f6:	461f      	mov	r7, r3
 80040f8:	42be      	cmp	r6, r7
 80040fa:	680b      	ldr	r3, [r1, #0]
 80040fc:	4682      	mov	sl, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	4690      	mov	r8, r2
 8004102:	d82d      	bhi.n	8004160 <__ssputs_r+0x70>
 8004104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004108:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800410c:	d026      	beq.n	800415c <__ssputs_r+0x6c>
 800410e:	6965      	ldr	r5, [r4, #20]
 8004110:	6909      	ldr	r1, [r1, #16]
 8004112:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004116:	eba3 0901 	sub.w	r9, r3, r1
 800411a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800411e:	1c7b      	adds	r3, r7, #1
 8004120:	444b      	add	r3, r9
 8004122:	106d      	asrs	r5, r5, #1
 8004124:	429d      	cmp	r5, r3
 8004126:	bf38      	it	cc
 8004128:	461d      	movcc	r5, r3
 800412a:	0553      	lsls	r3, r2, #21
 800412c:	d527      	bpl.n	800417e <__ssputs_r+0x8e>
 800412e:	4629      	mov	r1, r5
 8004130:	f7ff ff52 	bl	8003fd8 <_malloc_r>
 8004134:	4606      	mov	r6, r0
 8004136:	b360      	cbz	r0, 8004192 <__ssputs_r+0xa2>
 8004138:	6921      	ldr	r1, [r4, #16]
 800413a:	464a      	mov	r2, r9
 800413c:	f000 fae8 	bl	8004710 <memcpy>
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	6126      	str	r6, [r4, #16]
 800414e:	6165      	str	r5, [r4, #20]
 8004150:	444e      	add	r6, r9
 8004152:	eba5 0509 	sub.w	r5, r5, r9
 8004156:	6026      	str	r6, [r4, #0]
 8004158:	60a5      	str	r5, [r4, #8]
 800415a:	463e      	mov	r6, r7
 800415c:	42be      	cmp	r6, r7
 800415e:	d900      	bls.n	8004162 <__ssputs_r+0x72>
 8004160:	463e      	mov	r6, r7
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	4632      	mov	r2, r6
 8004166:	4641      	mov	r1, r8
 8004168:	f000 faa8 	bl	80046bc <memmove>
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	1b9b      	subs	r3, r3, r6
 8004170:	60a3      	str	r3, [r4, #8]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	4433      	add	r3, r6
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	2000      	movs	r0, #0
 800417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417e:	462a      	mov	r2, r5
 8004180:	f000 fad4 	bl	800472c <_realloc_r>
 8004184:	4606      	mov	r6, r0
 8004186:	2800      	cmp	r0, #0
 8004188:	d1e0      	bne.n	800414c <__ssputs_r+0x5c>
 800418a:	6921      	ldr	r1, [r4, #16]
 800418c:	4650      	mov	r0, sl
 800418e:	f7ff feb7 	bl	8003f00 <_free_r>
 8004192:	230c      	movs	r3, #12
 8004194:	f8ca 3000 	str.w	r3, [sl]
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	e7e9      	b.n	800417a <__ssputs_r+0x8a>
	...

080041a8 <_svfiprintf_r>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	4698      	mov	r8, r3
 80041ae:	898b      	ldrh	r3, [r1, #12]
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	b09d      	sub	sp, #116	@ 0x74
 80041b4:	4607      	mov	r7, r0
 80041b6:	460d      	mov	r5, r1
 80041b8:	4614      	mov	r4, r2
 80041ba:	d510      	bpl.n	80041de <_svfiprintf_r+0x36>
 80041bc:	690b      	ldr	r3, [r1, #16]
 80041be:	b973      	cbnz	r3, 80041de <_svfiprintf_r+0x36>
 80041c0:	2140      	movs	r1, #64	@ 0x40
 80041c2:	f7ff ff09 	bl	8003fd8 <_malloc_r>
 80041c6:	6028      	str	r0, [r5, #0]
 80041c8:	6128      	str	r0, [r5, #16]
 80041ca:	b930      	cbnz	r0, 80041da <_svfiprintf_r+0x32>
 80041cc:	230c      	movs	r3, #12
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295
 80041d4:	b01d      	add	sp, #116	@ 0x74
 80041d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041da:	2340      	movs	r3, #64	@ 0x40
 80041dc:	616b      	str	r3, [r5, #20]
 80041de:	2300      	movs	r3, #0
 80041e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e2:	2320      	movs	r3, #32
 80041e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ec:	2330      	movs	r3, #48	@ 0x30
 80041ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800438c <_svfiprintf_r+0x1e4>
 80041f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041f6:	f04f 0901 	mov.w	r9, #1
 80041fa:	4623      	mov	r3, r4
 80041fc:	469a      	mov	sl, r3
 80041fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004202:	b10a      	cbz	r2, 8004208 <_svfiprintf_r+0x60>
 8004204:	2a25      	cmp	r2, #37	@ 0x25
 8004206:	d1f9      	bne.n	80041fc <_svfiprintf_r+0x54>
 8004208:	ebba 0b04 	subs.w	fp, sl, r4
 800420c:	d00b      	beq.n	8004226 <_svfiprintf_r+0x7e>
 800420e:	465b      	mov	r3, fp
 8004210:	4622      	mov	r2, r4
 8004212:	4629      	mov	r1, r5
 8004214:	4638      	mov	r0, r7
 8004216:	f7ff ff6b 	bl	80040f0 <__ssputs_r>
 800421a:	3001      	adds	r0, #1
 800421c:	f000 80a7 	beq.w	800436e <_svfiprintf_r+0x1c6>
 8004220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004222:	445a      	add	r2, fp
 8004224:	9209      	str	r2, [sp, #36]	@ 0x24
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 809f 	beq.w	800436e <_svfiprintf_r+0x1c6>
 8004230:	2300      	movs	r3, #0
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800423a:	f10a 0a01 	add.w	sl, sl, #1
 800423e:	9304      	str	r3, [sp, #16]
 8004240:	9307      	str	r3, [sp, #28]
 8004242:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004246:	931a      	str	r3, [sp, #104]	@ 0x68
 8004248:	4654      	mov	r4, sl
 800424a:	2205      	movs	r2, #5
 800424c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004250:	484e      	ldr	r0, [pc, #312]	@ (800438c <_svfiprintf_r+0x1e4>)
 8004252:	f7fb fffd 	bl	8000250 <memchr>
 8004256:	9a04      	ldr	r2, [sp, #16]
 8004258:	b9d8      	cbnz	r0, 8004292 <_svfiprintf_r+0xea>
 800425a:	06d0      	lsls	r0, r2, #27
 800425c:	bf44      	itt	mi
 800425e:	2320      	movmi	r3, #32
 8004260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004264:	0711      	lsls	r1, r2, #28
 8004266:	bf44      	itt	mi
 8004268:	232b      	movmi	r3, #43	@ 0x2b
 800426a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800426e:	f89a 3000 	ldrb.w	r3, [sl]
 8004272:	2b2a      	cmp	r3, #42	@ 0x2a
 8004274:	d015      	beq.n	80042a2 <_svfiprintf_r+0xfa>
 8004276:	9a07      	ldr	r2, [sp, #28]
 8004278:	4654      	mov	r4, sl
 800427a:	2000      	movs	r0, #0
 800427c:	f04f 0c0a 	mov.w	ip, #10
 8004280:	4621      	mov	r1, r4
 8004282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004286:	3b30      	subs	r3, #48	@ 0x30
 8004288:	2b09      	cmp	r3, #9
 800428a:	d94b      	bls.n	8004324 <_svfiprintf_r+0x17c>
 800428c:	b1b0      	cbz	r0, 80042bc <_svfiprintf_r+0x114>
 800428e:	9207      	str	r2, [sp, #28]
 8004290:	e014      	b.n	80042bc <_svfiprintf_r+0x114>
 8004292:	eba0 0308 	sub.w	r3, r0, r8
 8004296:	fa09 f303 	lsl.w	r3, r9, r3
 800429a:	4313      	orrs	r3, r2
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	46a2      	mov	sl, r4
 80042a0:	e7d2      	b.n	8004248 <_svfiprintf_r+0xa0>
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	1d19      	adds	r1, r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	9103      	str	r1, [sp, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfbb      	ittet	lt
 80042ae:	425b      	neglt	r3, r3
 80042b0:	f042 0202 	orrlt.w	r2, r2, #2
 80042b4:	9307      	strge	r3, [sp, #28]
 80042b6:	9307      	strlt	r3, [sp, #28]
 80042b8:	bfb8      	it	lt
 80042ba:	9204      	strlt	r2, [sp, #16]
 80042bc:	7823      	ldrb	r3, [r4, #0]
 80042be:	2b2e      	cmp	r3, #46	@ 0x2e
 80042c0:	d10a      	bne.n	80042d8 <_svfiprintf_r+0x130>
 80042c2:	7863      	ldrb	r3, [r4, #1]
 80042c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80042c6:	d132      	bne.n	800432e <_svfiprintf_r+0x186>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	9203      	str	r2, [sp, #12]
 80042d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042d4:	3402      	adds	r4, #2
 80042d6:	9305      	str	r3, [sp, #20]
 80042d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800439c <_svfiprintf_r+0x1f4>
 80042dc:	7821      	ldrb	r1, [r4, #0]
 80042de:	2203      	movs	r2, #3
 80042e0:	4650      	mov	r0, sl
 80042e2:	f7fb ffb5 	bl	8000250 <memchr>
 80042e6:	b138      	cbz	r0, 80042f8 <_svfiprintf_r+0x150>
 80042e8:	9b04      	ldr	r3, [sp, #16]
 80042ea:	eba0 000a 	sub.w	r0, r0, sl
 80042ee:	2240      	movs	r2, #64	@ 0x40
 80042f0:	4082      	lsls	r2, r0
 80042f2:	4313      	orrs	r3, r2
 80042f4:	3401      	adds	r4, #1
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fc:	4824      	ldr	r0, [pc, #144]	@ (8004390 <_svfiprintf_r+0x1e8>)
 80042fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004302:	2206      	movs	r2, #6
 8004304:	f7fb ffa4 	bl	8000250 <memchr>
 8004308:	2800      	cmp	r0, #0
 800430a:	d036      	beq.n	800437a <_svfiprintf_r+0x1d2>
 800430c:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <_svfiprintf_r+0x1ec>)
 800430e:	bb1b      	cbnz	r3, 8004358 <_svfiprintf_r+0x1b0>
 8004310:	9b03      	ldr	r3, [sp, #12]
 8004312:	3307      	adds	r3, #7
 8004314:	f023 0307 	bic.w	r3, r3, #7
 8004318:	3308      	adds	r3, #8
 800431a:	9303      	str	r3, [sp, #12]
 800431c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800431e:	4433      	add	r3, r6
 8004320:	9309      	str	r3, [sp, #36]	@ 0x24
 8004322:	e76a      	b.n	80041fa <_svfiprintf_r+0x52>
 8004324:	fb0c 3202 	mla	r2, ip, r2, r3
 8004328:	460c      	mov	r4, r1
 800432a:	2001      	movs	r0, #1
 800432c:	e7a8      	b.n	8004280 <_svfiprintf_r+0xd8>
 800432e:	2300      	movs	r3, #0
 8004330:	3401      	adds	r4, #1
 8004332:	9305      	str	r3, [sp, #20]
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 0c0a 	mov.w	ip, #10
 800433a:	4620      	mov	r0, r4
 800433c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004340:	3a30      	subs	r2, #48	@ 0x30
 8004342:	2a09      	cmp	r2, #9
 8004344:	d903      	bls.n	800434e <_svfiprintf_r+0x1a6>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0c6      	beq.n	80042d8 <_svfiprintf_r+0x130>
 800434a:	9105      	str	r1, [sp, #20]
 800434c:	e7c4      	b.n	80042d8 <_svfiprintf_r+0x130>
 800434e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004352:	4604      	mov	r4, r0
 8004354:	2301      	movs	r3, #1
 8004356:	e7f0      	b.n	800433a <_svfiprintf_r+0x192>
 8004358:	ab03      	add	r3, sp, #12
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	462a      	mov	r2, r5
 800435e:	4b0e      	ldr	r3, [pc, #56]	@ (8004398 <_svfiprintf_r+0x1f0>)
 8004360:	a904      	add	r1, sp, #16
 8004362:	4638      	mov	r0, r7
 8004364:	f3af 8000 	nop.w
 8004368:	1c42      	adds	r2, r0, #1
 800436a:	4606      	mov	r6, r0
 800436c:	d1d6      	bne.n	800431c <_svfiprintf_r+0x174>
 800436e:	89ab      	ldrh	r3, [r5, #12]
 8004370:	065b      	lsls	r3, r3, #25
 8004372:	f53f af2d 	bmi.w	80041d0 <_svfiprintf_r+0x28>
 8004376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004378:	e72c      	b.n	80041d4 <_svfiprintf_r+0x2c>
 800437a:	ab03      	add	r3, sp, #12
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	462a      	mov	r2, r5
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <_svfiprintf_r+0x1f0>)
 8004382:	a904      	add	r1, sp, #16
 8004384:	4638      	mov	r0, r7
 8004386:	f000 f879 	bl	800447c <_printf_i>
 800438a:	e7ed      	b.n	8004368 <_svfiprintf_r+0x1c0>
 800438c:	08004a58 	.word	0x08004a58
 8004390:	08004a62 	.word	0x08004a62
 8004394:	00000000 	.word	0x00000000
 8004398:	080040f1 	.word	0x080040f1
 800439c:	08004a5e 	.word	0x08004a5e

080043a0 <_printf_common>:
 80043a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a4:	4616      	mov	r6, r2
 80043a6:	4698      	mov	r8, r3
 80043a8:	688a      	ldr	r2, [r1, #8]
 80043aa:	690b      	ldr	r3, [r1, #16]
 80043ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bfb8      	it	lt
 80043b4:	4613      	movlt	r3, r2
 80043b6:	6033      	str	r3, [r6, #0]
 80043b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043bc:	4607      	mov	r7, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	b10a      	cbz	r2, 80043c6 <_printf_common+0x26>
 80043c2:	3301      	adds	r3, #1
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	0699      	lsls	r1, r3, #26
 80043ca:	bf42      	ittt	mi
 80043cc:	6833      	ldrmi	r3, [r6, #0]
 80043ce:	3302      	addmi	r3, #2
 80043d0:	6033      	strmi	r3, [r6, #0]
 80043d2:	6825      	ldr	r5, [r4, #0]
 80043d4:	f015 0506 	ands.w	r5, r5, #6
 80043d8:	d106      	bne.n	80043e8 <_printf_common+0x48>
 80043da:	f104 0a19 	add.w	sl, r4, #25
 80043de:	68e3      	ldr	r3, [r4, #12]
 80043e0:	6832      	ldr	r2, [r6, #0]
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	42ab      	cmp	r3, r5
 80043e6:	dc26      	bgt.n	8004436 <_printf_common+0x96>
 80043e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	3b00      	subs	r3, #0
 80043f0:	bf18      	it	ne
 80043f2:	2301      	movne	r3, #1
 80043f4:	0692      	lsls	r2, r2, #26
 80043f6:	d42b      	bmi.n	8004450 <_printf_common+0xb0>
 80043f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043fc:	4641      	mov	r1, r8
 80043fe:	4638      	mov	r0, r7
 8004400:	47c8      	blx	r9
 8004402:	3001      	adds	r0, #1
 8004404:	d01e      	beq.n	8004444 <_printf_common+0xa4>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	6922      	ldr	r2, [r4, #16]
 800440a:	f003 0306 	and.w	r3, r3, #6
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf02      	ittt	eq
 8004412:	68e5      	ldreq	r5, [r4, #12]
 8004414:	6833      	ldreq	r3, [r6, #0]
 8004416:	1aed      	subeq	r5, r5, r3
 8004418:	68a3      	ldr	r3, [r4, #8]
 800441a:	bf0c      	ite	eq
 800441c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004420:	2500      	movne	r5, #0
 8004422:	4293      	cmp	r3, r2
 8004424:	bfc4      	itt	gt
 8004426:	1a9b      	subgt	r3, r3, r2
 8004428:	18ed      	addgt	r5, r5, r3
 800442a:	2600      	movs	r6, #0
 800442c:	341a      	adds	r4, #26
 800442e:	42b5      	cmp	r5, r6
 8004430:	d11a      	bne.n	8004468 <_printf_common+0xc8>
 8004432:	2000      	movs	r0, #0
 8004434:	e008      	b.n	8004448 <_printf_common+0xa8>
 8004436:	2301      	movs	r3, #1
 8004438:	4652      	mov	r2, sl
 800443a:	4641      	mov	r1, r8
 800443c:	4638      	mov	r0, r7
 800443e:	47c8      	blx	r9
 8004440:	3001      	adds	r0, #1
 8004442:	d103      	bne.n	800444c <_printf_common+0xac>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	3501      	adds	r5, #1
 800444e:	e7c6      	b.n	80043de <_printf_common+0x3e>
 8004450:	18e1      	adds	r1, r4, r3
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	2030      	movs	r0, #48	@ 0x30
 8004456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800445a:	4422      	add	r2, r4
 800445c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004464:	3302      	adds	r3, #2
 8004466:	e7c7      	b.n	80043f8 <_printf_common+0x58>
 8004468:	2301      	movs	r3, #1
 800446a:	4622      	mov	r2, r4
 800446c:	4641      	mov	r1, r8
 800446e:	4638      	mov	r0, r7
 8004470:	47c8      	blx	r9
 8004472:	3001      	adds	r0, #1
 8004474:	d0e6      	beq.n	8004444 <_printf_common+0xa4>
 8004476:	3601      	adds	r6, #1
 8004478:	e7d9      	b.n	800442e <_printf_common+0x8e>
	...

0800447c <_printf_i>:
 800447c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	7e0f      	ldrb	r7, [r1, #24]
 8004482:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004484:	2f78      	cmp	r7, #120	@ 0x78
 8004486:	4691      	mov	r9, r2
 8004488:	4680      	mov	r8, r0
 800448a:	460c      	mov	r4, r1
 800448c:	469a      	mov	sl, r3
 800448e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004492:	d807      	bhi.n	80044a4 <_printf_i+0x28>
 8004494:	2f62      	cmp	r7, #98	@ 0x62
 8004496:	d80a      	bhi.n	80044ae <_printf_i+0x32>
 8004498:	2f00      	cmp	r7, #0
 800449a:	f000 80d2 	beq.w	8004642 <_printf_i+0x1c6>
 800449e:	2f58      	cmp	r7, #88	@ 0x58
 80044a0:	f000 80b9 	beq.w	8004616 <_printf_i+0x19a>
 80044a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044ac:	e03a      	b.n	8004524 <_printf_i+0xa8>
 80044ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044b2:	2b15      	cmp	r3, #21
 80044b4:	d8f6      	bhi.n	80044a4 <_printf_i+0x28>
 80044b6:	a101      	add	r1, pc, #4	@ (adr r1, 80044bc <_printf_i+0x40>)
 80044b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044bc:	08004515 	.word	0x08004515
 80044c0:	08004529 	.word	0x08004529
 80044c4:	080044a5 	.word	0x080044a5
 80044c8:	080044a5 	.word	0x080044a5
 80044cc:	080044a5 	.word	0x080044a5
 80044d0:	080044a5 	.word	0x080044a5
 80044d4:	08004529 	.word	0x08004529
 80044d8:	080044a5 	.word	0x080044a5
 80044dc:	080044a5 	.word	0x080044a5
 80044e0:	080044a5 	.word	0x080044a5
 80044e4:	080044a5 	.word	0x080044a5
 80044e8:	08004629 	.word	0x08004629
 80044ec:	08004553 	.word	0x08004553
 80044f0:	080045e3 	.word	0x080045e3
 80044f4:	080044a5 	.word	0x080044a5
 80044f8:	080044a5 	.word	0x080044a5
 80044fc:	0800464b 	.word	0x0800464b
 8004500:	080044a5 	.word	0x080044a5
 8004504:	08004553 	.word	0x08004553
 8004508:	080044a5 	.word	0x080044a5
 800450c:	080044a5 	.word	0x080044a5
 8004510:	080045eb 	.word	0x080045eb
 8004514:	6833      	ldr	r3, [r6, #0]
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6032      	str	r2, [r6, #0]
 800451c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004524:	2301      	movs	r3, #1
 8004526:	e09d      	b.n	8004664 <_printf_i+0x1e8>
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	1d19      	adds	r1, r3, #4
 800452e:	6031      	str	r1, [r6, #0]
 8004530:	0606      	lsls	r6, r0, #24
 8004532:	d501      	bpl.n	8004538 <_printf_i+0xbc>
 8004534:	681d      	ldr	r5, [r3, #0]
 8004536:	e003      	b.n	8004540 <_printf_i+0xc4>
 8004538:	0645      	lsls	r5, r0, #25
 800453a:	d5fb      	bpl.n	8004534 <_printf_i+0xb8>
 800453c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004540:	2d00      	cmp	r5, #0
 8004542:	da03      	bge.n	800454c <_printf_i+0xd0>
 8004544:	232d      	movs	r3, #45	@ 0x2d
 8004546:	426d      	negs	r5, r5
 8004548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800454c:	4859      	ldr	r0, [pc, #356]	@ (80046b4 <_printf_i+0x238>)
 800454e:	230a      	movs	r3, #10
 8004550:	e011      	b.n	8004576 <_printf_i+0xfa>
 8004552:	6821      	ldr	r1, [r4, #0]
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	0608      	lsls	r0, r1, #24
 8004558:	f853 5b04 	ldr.w	r5, [r3], #4
 800455c:	d402      	bmi.n	8004564 <_printf_i+0xe8>
 800455e:	0649      	lsls	r1, r1, #25
 8004560:	bf48      	it	mi
 8004562:	b2ad      	uxthmi	r5, r5
 8004564:	2f6f      	cmp	r7, #111	@ 0x6f
 8004566:	4853      	ldr	r0, [pc, #332]	@ (80046b4 <_printf_i+0x238>)
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	bf14      	ite	ne
 800456c:	230a      	movne	r3, #10
 800456e:	2308      	moveq	r3, #8
 8004570:	2100      	movs	r1, #0
 8004572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004576:	6866      	ldr	r6, [r4, #4]
 8004578:	60a6      	str	r6, [r4, #8]
 800457a:	2e00      	cmp	r6, #0
 800457c:	bfa2      	ittt	ge
 800457e:	6821      	ldrge	r1, [r4, #0]
 8004580:	f021 0104 	bicge.w	r1, r1, #4
 8004584:	6021      	strge	r1, [r4, #0]
 8004586:	b90d      	cbnz	r5, 800458c <_printf_i+0x110>
 8004588:	2e00      	cmp	r6, #0
 800458a:	d04b      	beq.n	8004624 <_printf_i+0x1a8>
 800458c:	4616      	mov	r6, r2
 800458e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004592:	fb03 5711 	mls	r7, r3, r1, r5
 8004596:	5dc7      	ldrb	r7, [r0, r7]
 8004598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800459c:	462f      	mov	r7, r5
 800459e:	42bb      	cmp	r3, r7
 80045a0:	460d      	mov	r5, r1
 80045a2:	d9f4      	bls.n	800458e <_printf_i+0x112>
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d10b      	bne.n	80045c0 <_printf_i+0x144>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	07df      	lsls	r7, r3, #31
 80045ac:	d508      	bpl.n	80045c0 <_printf_i+0x144>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	6861      	ldr	r1, [r4, #4]
 80045b2:	4299      	cmp	r1, r3
 80045b4:	bfde      	ittt	le
 80045b6:	2330      	movle	r3, #48	@ 0x30
 80045b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045c0:	1b92      	subs	r2, r2, r6
 80045c2:	6122      	str	r2, [r4, #16]
 80045c4:	f8cd a000 	str.w	sl, [sp]
 80045c8:	464b      	mov	r3, r9
 80045ca:	aa03      	add	r2, sp, #12
 80045cc:	4621      	mov	r1, r4
 80045ce:	4640      	mov	r0, r8
 80045d0:	f7ff fee6 	bl	80043a0 <_printf_common>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d14a      	bne.n	800466e <_printf_i+0x1f2>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	b004      	add	sp, #16
 80045de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	f043 0320 	orr.w	r3, r3, #32
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	4833      	ldr	r0, [pc, #204]	@ (80046b8 <_printf_i+0x23c>)
 80045ec:	2778      	movs	r7, #120	@ 0x78
 80045ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	6831      	ldr	r1, [r6, #0]
 80045f6:	061f      	lsls	r7, r3, #24
 80045f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80045fc:	d402      	bmi.n	8004604 <_printf_i+0x188>
 80045fe:	065f      	lsls	r7, r3, #25
 8004600:	bf48      	it	mi
 8004602:	b2ad      	uxthmi	r5, r5
 8004604:	6031      	str	r1, [r6, #0]
 8004606:	07d9      	lsls	r1, r3, #31
 8004608:	bf44      	itt	mi
 800460a:	f043 0320 	orrmi.w	r3, r3, #32
 800460e:	6023      	strmi	r3, [r4, #0]
 8004610:	b11d      	cbz	r5, 800461a <_printf_i+0x19e>
 8004612:	2310      	movs	r3, #16
 8004614:	e7ac      	b.n	8004570 <_printf_i+0xf4>
 8004616:	4827      	ldr	r0, [pc, #156]	@ (80046b4 <_printf_i+0x238>)
 8004618:	e7e9      	b.n	80045ee <_printf_i+0x172>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f023 0320 	bic.w	r3, r3, #32
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	e7f6      	b.n	8004612 <_printf_i+0x196>
 8004624:	4616      	mov	r6, r2
 8004626:	e7bd      	b.n	80045a4 <_printf_i+0x128>
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	6825      	ldr	r5, [r4, #0]
 800462c:	6961      	ldr	r1, [r4, #20]
 800462e:	1d18      	adds	r0, r3, #4
 8004630:	6030      	str	r0, [r6, #0]
 8004632:	062e      	lsls	r6, r5, #24
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	d501      	bpl.n	800463c <_printf_i+0x1c0>
 8004638:	6019      	str	r1, [r3, #0]
 800463a:	e002      	b.n	8004642 <_printf_i+0x1c6>
 800463c:	0668      	lsls	r0, r5, #25
 800463e:	d5fb      	bpl.n	8004638 <_printf_i+0x1bc>
 8004640:	8019      	strh	r1, [r3, #0]
 8004642:	2300      	movs	r3, #0
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	4616      	mov	r6, r2
 8004648:	e7bc      	b.n	80045c4 <_printf_i+0x148>
 800464a:	6833      	ldr	r3, [r6, #0]
 800464c:	1d1a      	adds	r2, r3, #4
 800464e:	6032      	str	r2, [r6, #0]
 8004650:	681e      	ldr	r6, [r3, #0]
 8004652:	6862      	ldr	r2, [r4, #4]
 8004654:	2100      	movs	r1, #0
 8004656:	4630      	mov	r0, r6
 8004658:	f7fb fdfa 	bl	8000250 <memchr>
 800465c:	b108      	cbz	r0, 8004662 <_printf_i+0x1e6>
 800465e:	1b80      	subs	r0, r0, r6
 8004660:	6060      	str	r0, [r4, #4]
 8004662:	6863      	ldr	r3, [r4, #4]
 8004664:	6123      	str	r3, [r4, #16]
 8004666:	2300      	movs	r3, #0
 8004668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800466c:	e7aa      	b.n	80045c4 <_printf_i+0x148>
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	4632      	mov	r2, r6
 8004672:	4649      	mov	r1, r9
 8004674:	4640      	mov	r0, r8
 8004676:	47d0      	blx	sl
 8004678:	3001      	adds	r0, #1
 800467a:	d0ad      	beq.n	80045d8 <_printf_i+0x15c>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	079b      	lsls	r3, r3, #30
 8004680:	d413      	bmi.n	80046aa <_printf_i+0x22e>
 8004682:	68e0      	ldr	r0, [r4, #12]
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	4298      	cmp	r0, r3
 8004688:	bfb8      	it	lt
 800468a:	4618      	movlt	r0, r3
 800468c:	e7a6      	b.n	80045dc <_printf_i+0x160>
 800468e:	2301      	movs	r3, #1
 8004690:	4632      	mov	r2, r6
 8004692:	4649      	mov	r1, r9
 8004694:	4640      	mov	r0, r8
 8004696:	47d0      	blx	sl
 8004698:	3001      	adds	r0, #1
 800469a:	d09d      	beq.n	80045d8 <_printf_i+0x15c>
 800469c:	3501      	adds	r5, #1
 800469e:	68e3      	ldr	r3, [r4, #12]
 80046a0:	9903      	ldr	r1, [sp, #12]
 80046a2:	1a5b      	subs	r3, r3, r1
 80046a4:	42ab      	cmp	r3, r5
 80046a6:	dcf2      	bgt.n	800468e <_printf_i+0x212>
 80046a8:	e7eb      	b.n	8004682 <_printf_i+0x206>
 80046aa:	2500      	movs	r5, #0
 80046ac:	f104 0619 	add.w	r6, r4, #25
 80046b0:	e7f5      	b.n	800469e <_printf_i+0x222>
 80046b2:	bf00      	nop
 80046b4:	08004a69 	.word	0x08004a69
 80046b8:	08004a7a 	.word	0x08004a7a

080046bc <memmove>:
 80046bc:	4288      	cmp	r0, r1
 80046be:	b510      	push	{r4, lr}
 80046c0:	eb01 0402 	add.w	r4, r1, r2
 80046c4:	d902      	bls.n	80046cc <memmove+0x10>
 80046c6:	4284      	cmp	r4, r0
 80046c8:	4623      	mov	r3, r4
 80046ca:	d807      	bhi.n	80046dc <memmove+0x20>
 80046cc:	1e43      	subs	r3, r0, #1
 80046ce:	42a1      	cmp	r1, r4
 80046d0:	d008      	beq.n	80046e4 <memmove+0x28>
 80046d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046da:	e7f8      	b.n	80046ce <memmove+0x12>
 80046dc:	4402      	add	r2, r0
 80046de:	4601      	mov	r1, r0
 80046e0:	428a      	cmp	r2, r1
 80046e2:	d100      	bne.n	80046e6 <memmove+0x2a>
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ee:	e7f7      	b.n	80046e0 <memmove+0x24>

080046f0 <_sbrk_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4d06      	ldr	r5, [pc, #24]	@ (800470c <_sbrk_r+0x1c>)
 80046f4:	2300      	movs	r3, #0
 80046f6:	4604      	mov	r4, r0
 80046f8:	4608      	mov	r0, r1
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	f7fc fe5a 	bl	80013b4 <_sbrk>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_sbrk_r+0x1a>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_sbrk_r+0x1a>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	200002ec 	.word	0x200002ec

08004710 <memcpy>:
 8004710:	440a      	add	r2, r1
 8004712:	4291      	cmp	r1, r2
 8004714:	f100 33ff 	add.w	r3, r0, #4294967295
 8004718:	d100      	bne.n	800471c <memcpy+0xc>
 800471a:	4770      	bx	lr
 800471c:	b510      	push	{r4, lr}
 800471e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004726:	4291      	cmp	r1, r2
 8004728:	d1f9      	bne.n	800471e <memcpy+0xe>
 800472a:	bd10      	pop	{r4, pc}

0800472c <_realloc_r>:
 800472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004730:	4680      	mov	r8, r0
 8004732:	4615      	mov	r5, r2
 8004734:	460c      	mov	r4, r1
 8004736:	b921      	cbnz	r1, 8004742 <_realloc_r+0x16>
 8004738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	4611      	mov	r1, r2
 800473e:	f7ff bc4b 	b.w	8003fd8 <_malloc_r>
 8004742:	b92a      	cbnz	r2, 8004750 <_realloc_r+0x24>
 8004744:	f7ff fbdc 	bl	8003f00 <_free_r>
 8004748:	2400      	movs	r4, #0
 800474a:	4620      	mov	r0, r4
 800474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004750:	f000 f81a 	bl	8004788 <_malloc_usable_size_r>
 8004754:	4285      	cmp	r5, r0
 8004756:	4606      	mov	r6, r0
 8004758:	d802      	bhi.n	8004760 <_realloc_r+0x34>
 800475a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800475e:	d8f4      	bhi.n	800474a <_realloc_r+0x1e>
 8004760:	4629      	mov	r1, r5
 8004762:	4640      	mov	r0, r8
 8004764:	f7ff fc38 	bl	8003fd8 <_malloc_r>
 8004768:	4607      	mov	r7, r0
 800476a:	2800      	cmp	r0, #0
 800476c:	d0ec      	beq.n	8004748 <_realloc_r+0x1c>
 800476e:	42b5      	cmp	r5, r6
 8004770:	462a      	mov	r2, r5
 8004772:	4621      	mov	r1, r4
 8004774:	bf28      	it	cs
 8004776:	4632      	movcs	r2, r6
 8004778:	f7ff ffca 	bl	8004710 <memcpy>
 800477c:	4621      	mov	r1, r4
 800477e:	4640      	mov	r0, r8
 8004780:	f7ff fbbe 	bl	8003f00 <_free_r>
 8004784:	463c      	mov	r4, r7
 8004786:	e7e0      	b.n	800474a <_realloc_r+0x1e>

08004788 <_malloc_usable_size_r>:
 8004788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800478c:	1f18      	subs	r0, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	bfbc      	itt	lt
 8004792:	580b      	ldrlt	r3, [r1, r0]
 8004794:	18c0      	addlt	r0, r0, r3
 8004796:	4770      	bx	lr

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
