
Alarma_IT_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b80  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc8  08003dc8  00005048  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc8  08003dc8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd0  08003dd0  00005048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dd4  08003dd4  00004dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08003dd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000048  08003e20  00005048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003e20  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2d2  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002508  00000000  00000000  0001234a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00014858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e4  00000000  00000000  000153e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002190d  00000000  00000000  00015cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fb0  00000000  00000000  000375d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8640  00000000  00000000  00048581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e1c  00000000  00000000  00110c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00113a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000048 	.word	0x20000048
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003d40 	.word	0x08003d40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000004c 	.word	0x2000004c
 8000214:	08003d40 	.word	0x08003d40

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96a 	b.w	8000514 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fa1f f68c 	uxth.w	r6, ip
 800028e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ae:	f080 8112 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810f 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fa1f f38e 	uxth.w	r3, lr
 80002c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295
 80002de:	f080 80fc 	bcs.w	80004da <__udivmoddi4+0x282>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f9 	bls.w	80004da <__udivmoddi4+0x282>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	1b9b      	subs	r3, r3, r6
 80002ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80f0 	bcc.w	8000504 <__udivmoddi4+0x2ac>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 8090 	bne.w	800045c <__udivmoddi4+0x204>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	fa1f f78c 	uxth.w	r7, ip
 8000348:	2101      	movs	r1, #1
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb08 4416 	mls	r4, r8, r6, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2b4>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb4 f0f8 	udiv	r0, r4, r8
 800037e:	fb08 4410 	mls	r4, r8, r0, r4
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80b0 	bhi.w	80004fe <__udivmoddi4+0x2a6>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b8:	fa04 f301 	lsl.w	r3, r4, r1
 80003bc:	ea43 030c 	orr.w	r3, r3, ip
 80003c0:	40f4      	lsrs	r4, r6
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	0c38      	lsrs	r0, r7, #16
 80003c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003cc:	fbb4 fef0 	udiv	lr, r4, r0
 80003d0:	fa1f fc87 	uxth.w	ip, r7
 80003d4:	fb00 441e 	mls	r4, r0, lr, r4
 80003d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003dc:	fb0e f90c 	mul.w	r9, lr, ip
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ee:	f080 8084 	bcs.w	80004fa <__udivmoddi4+0x2a2>
 80003f2:	45a1      	cmp	r9, r4
 80003f4:	f240 8081 	bls.w	80004fa <__udivmoddi4+0x2a2>
 80003f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	eba4 0409 	sub.w	r4, r4, r9
 8000402:	fa1f f983 	uxth.w	r9, r3
 8000406:	fbb4 f3f0 	udiv	r3, r4, r0
 800040a:	fb00 4413 	mls	r4, r0, r3, r4
 800040e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000412:	fb03 fc0c 	mul.w	ip, r3, ip
 8000416:	45a4      	cmp	ip, r4
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1d2>
 800041a:	193c      	adds	r4, r7, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000420:	d267      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0x29a>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800042e:	fba0 9302 	umull	r9, r3, r0, r2
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	429c      	cmp	r4, r3
 8000438:	46ce      	mov	lr, r9
 800043a:	469c      	mov	ip, r3
 800043c:	d351      	bcc.n	80004e2 <__udivmoddi4+0x28a>
 800043e:	d04e      	beq.n	80004de <__udivmoddi4+0x286>
 8000440:	b155      	cbz	r5, 8000458 <__udivmoddi4+0x200>
 8000442:	ebb8 030e 	subs.w	r3, r8, lr
 8000446:	eb64 040c 	sbc.w	r4, r4, ip
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	40cb      	lsrs	r3, r1
 8000450:	431e      	orrs	r6, r3
 8000452:	40cc      	lsrs	r4, r1
 8000454:	e9c5 6400 	strd	r6, r4, [r5]
 8000458:	2100      	movs	r1, #0
 800045a:	e750      	b.n	80002fe <__udivmoddi4+0xa6>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f103 	lsr.w	r1, r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa24 f303 	lsr.w	r3, r4, r3
 800046c:	4094      	lsls	r4, r2
 800046e:	430c      	orrs	r4, r1
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3110 	mls	r1, r8, r0, r3
 8000484:	0c23      	lsrs	r3, r4, #16
 8000486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048a:	fb00 f107 	mul.w	r1, r0, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x24c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 36ff 	add.w	r6, r0, #4294967295
 800049a:	d22c      	bcs.n	80004f6 <__udivmoddi4+0x29e>
 800049c:	4299      	cmp	r1, r3
 800049e:	d92a      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ac:	fb08 3311 	mls	r3, r8, r1, r3
 80004b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b4:	fb01 f307 	mul.w	r3, r1, r7
 80004b8:	42a3      	cmp	r3, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x276>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c4:	d213      	bcs.n	80004ee <__udivmoddi4+0x296>
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d911      	bls.n	80004ee <__udivmoddi4+0x296>
 80004ca:	3902      	subs	r1, #2
 80004cc:	4464      	add	r4, ip
 80004ce:	1ae4      	subs	r4, r4, r3
 80004d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d4:	e739      	b.n	800034a <__udivmoddi4+0xf2>
 80004d6:	4604      	mov	r4, r0
 80004d8:	e6f0      	b.n	80002bc <__udivmoddi4+0x64>
 80004da:	4608      	mov	r0, r1
 80004dc:	e706      	b.n	80002ec <__udivmoddi4+0x94>
 80004de:	45c8      	cmp	r8, r9
 80004e0:	d2ae      	bcs.n	8000440 <__udivmoddi4+0x1e8>
 80004e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7a8      	b.n	8000440 <__udivmoddi4+0x1e8>
 80004ee:	4631      	mov	r1, r6
 80004f0:	e7ed      	b.n	80004ce <__udivmoddi4+0x276>
 80004f2:	4603      	mov	r3, r0
 80004f4:	e799      	b.n	800042a <__udivmoddi4+0x1d2>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e7d4      	b.n	80004a4 <__udivmoddi4+0x24c>
 80004fa:	46d6      	mov	lr, sl
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fe:	4463      	add	r3, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e74d      	b.n	80003a0 <__udivmoddi4+0x148>
 8000504:	4606      	mov	r6, r0
 8000506:	4623      	mov	r3, r4
 8000508:	4608      	mov	r0, r1
 800050a:	e70f      	b.n	800032c <__udivmoddi4+0xd4>
 800050c:	3e02      	subs	r6, #2
 800050e:	4463      	add	r3, ip
 8000510:	e730      	b.n	8000374 <__udivmoddi4+0x11c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fe82 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 fafe 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fb68 	bl	8000bf8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000528:	f000 fe4e 	bl	80011c8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f9da 	bl	80008e4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  lcd_init();
 8000530:	f000 fd76 	bl	8001020 <lcd_init>
  DisplayMainMenu();
 8000534:	f000 f81a 	bl	800056c <DisplayMainMenu>
  debounceFSM_init();  // Inicializa la FSM de debounce
 8000538:	f000 fa1a 	bl	8000970 <debounceFSM_init>
  while (1)
  {
    /* USER CODE END WHILE */
	  while (1) {
		  // Verificar si hay una interrupción pendiente y escanear la tecla
		  key = keypad_scan(columnPressed);
 800053c:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <main+0x4c>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fcde 	bl	8000f04 <keypad_scan>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <main+0x50>)
 800054e:	701a      	strb	r2, [r3, #0]
		  if (key != '\0') {
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <main+0x50>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f1      	beq.n	800053c <main+0x24>
			  //printf("Tecla presionada: %c\n", key);  // Se puede enviar por UART o LCD
			  BT_Test_2();
 8000558:	f000 f9a2 	bl	80008a0 <BT_Test_2>
			  keypad_resetColumn();  // Reiniciar la columna procesada
 800055c:	f000 fd54 	bl	8001008 <keypad_resetColumn>
		  key = keypad_scan(columnPressed);
 8000560:	e7ec      	b.n	800053c <main+0x24>
 8000562:	bf00      	nop
 8000564:	20000120 	.word	0x20000120
 8000568:	20000100 	.word	0x20000100

0800056c <DisplayMainMenu>:
/*****************************************************************************************************************
 * @brief: Función para mostrar el menú principal
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayMainMenu(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    lcd_clear();
 8000570:	f000 fd81 	bl	8001076 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000574:	2100      	movs	r1, #0
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fd87 	bl	800108a <lcd_set_cursor>
    lcd_print("1.Activar *.Mas");
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <DisplayMainMenu+0x28>)
 800057e:	f000 fd9e 	bl	80010be <lcd_print>
    lcd_set_cursor(1, 0);
 8000582:	2100      	movs	r1, #0
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fd80 	bl	800108a <lcd_set_cursor>
    lcd_print("2.Cambiar Pass");
 800058a:	4803      	ldr	r0, [pc, #12]	@ (8000598 <DisplayMainMenu+0x2c>)
 800058c:	f000 fd97 	bl	80010be <lcd_print>
    //currentState = MAIN_MENU;
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	08003d58 	.word	0x08003d58
 8000598:	08003d68 	.word	0x08003d68

0800059c <HAL_GPIO_EXTI_Callback>:
******************************************************************************************************************/
/**
 * @brief Callback de interrupción de las columnas
 * @param GPIO_Pin - Pin de la columna que generó la interrupción
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == C1_Pin || GPIO_Pin == C2_Pin || GPIO_Pin == C3_Pin) {
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d005      	beq.n	80005b8 <HAL_GPIO_EXTI_Callback+0x1c>
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	2b10      	cmp	r3, #16
 80005b0:	d002      	beq.n	80005b8 <HAL_GPIO_EXTI_Callback+0x1c>
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	2b20      	cmp	r3, #32
 80005b6:	d102      	bne.n	80005be <HAL_GPIO_EXTI_Callback+0x22>
        columnPressed = GPIO_Pin;  // Guardar la columna que generó la interrupción
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <HAL_GPIO_EXTI_Callback+0x30>)
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	8013      	strh	r3, [r2, #0]
    }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000120 	.word	0x20000120

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <Error_Handler+0x8>

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <HAL_MspInit+0x4c>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000628 <HAL_MspInit+0x4c>)
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <HAL_MspInit+0x4c>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <HAL_MspInit+0x4c>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <HAL_MspInit+0x4c>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060c:	6413      	str	r3, [r2, #64]	@ 0x40
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_MspInit+0x4c>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	@ 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a19      	ldr	r2, [pc, #100]	@ (80006b0 <HAL_I2C_MspInit+0x84>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d12b      	bne.n	80006a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <HAL_I2C_MspInit+0x88>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a17      	ldr	r2, [pc, #92]	@ (80006b4 <HAL_I2C_MspInit+0x88>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_I2C_MspInit+0x88>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0320 	and.w	r3, r3, #32
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800066a:	2303      	movs	r3, #3
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066e:	2312      	movs	r3, #18
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800067a:	2304      	movs	r3, #4
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <HAL_I2C_MspInit+0x8c>)
 8000686:	f001 f807 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <HAL_I2C_MspInit+0x88>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000692:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <HAL_I2C_MspInit+0x88>)
 8000694:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000698:	6413      	str	r3, [r2, #64]	@ 0x40
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_I2C_MspInit+0x88>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	@ 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40005800 	.word	0x40005800
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40021400 	.word	0x40021400

080006bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <HAL_UART_MspInit+0x84>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d12b      	bne.n	8000736 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <HAL_UART_MspInit+0x88>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e6:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <HAL_UART_MspInit+0x88>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_UART_MspInit+0x88>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <HAL_UART_MspInit+0x88>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a10      	ldr	r2, [pc, #64]	@ (8000744 <HAL_UART_MspInit+0x88>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <HAL_UART_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000716:	2360      	movs	r3, #96	@ 0x60
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000726:	2307      	movs	r3, #7
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <HAL_UART_MspInit+0x8c>)
 8000732:	f000 ffb1 	bl	8001698 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	@ 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40004400 	.word	0x40004400
 8000744:	40023800 	.word	0x40023800
 8000748:	40020c00 	.word	0x40020c00

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <NMI_Handler+0x4>

08000754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <MemManage_Handler+0x4>

08000764 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <UsageFault_Handler+0x4>

08000774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a2:	f000 fd91 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}

080007aa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 80007ae:	2004      	movs	r0, #4
 80007b0:	f001 f938 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 80007bc:	2010      	movs	r0, #16
 80007be:	f001 f931 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 80007ca:	2020      	movs	r0, #32
 80007cc:	f001 f92a 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_PIR_Pin);
 80007d0:	2040      	movs	r0, #64	@ 0x40
 80007d2:	f001 f927 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_1_Pin);
 80007d6:	2080      	movs	r0, #128	@ 0x80
 80007d8:	f001 f924 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <USART2_IRQHandler+0x10>)
 80007e6:	f002 fb53 	bl	8002e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000b8 	.word	0x200000b8

080007f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80007f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007fc:	f001 f912 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_2_Pin);
 8000800:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000804:	f001 f90e 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_3_Pin);
 8000808:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800080c:	f001 f90a 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <SystemInit+0x20>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800081e:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <SystemInit+0x20>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000870 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800083c:	f7ff ffea 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	@ (8000878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	@ (8000884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000866:	f003 fa47 	bl	8003cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086a:	f7ff fe55 	bl	8000518 <main>
  bx  lr    
 800086e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000870:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800087c:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 8000880:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000884:	20000128 	.word	0x20000128

08000888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC_IRQHandler>

0800088a <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
*************************************************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <BT_Test_2>:
******************************************************************************************************************/
void BT_Test() {
    char message[] = "✅ HC-05 conectado con STM32\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
}
void BT_Test_2() {
 80008a0:	b5b0      	push	{r4, r5, r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
    char message[] = "Prueba interrupcion\r\n";
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <BT_Test_2+0x3c>)
 80008a8:	463c      	mov	r4, r7
 80008aa:	461d      	mov	r5, r3
 80008ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008b4:	6020      	str	r0, [r4, #0]
 80008b6:	3404      	adds	r4, #4
 80008b8:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80008ba:	463b      	mov	r3, r7
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fcab 	bl	8000218 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4639      	mov	r1, r7
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <BT_Test_2+0x40>)
 80008ce:	f002 fa53 	bl	8002d78 <HAL_UART_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bdb0      	pop	{r4, r5, r7, pc}
 80008da:	bf00      	nop
 80008dc:	08003d98 	.word	0x08003d98
 80008e0:	200000b8 	.word	0x200000b8

080008e4 <MX_USART2_UART_Init>:
/**************************************************************************************************************************
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  *************************************************************************************************************************/
void MX_USART2_UART_Init(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	  /* USER CODE END USART2_Init 0 */

	  /* USER CODE BEGIN USART2_Init 1 */

	  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 9600;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008f4:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f002 f9dc 	bl	8002cd8 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
	  {
	    Error_Handler();
 8000926:	f7ff fe53 	bl	80005d0 <Error_Handler>
	  }
	  /* USER CODE BEGIN USART2_Init 2 */

	  /* USER CODE END USART2_Init 2 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000b8 	.word	0x200000b8
 8000934:	40004400 	.word	0x40004400

08000938 <readKey>:
bool_t buttonRead;
delay_t debounceDelay;
//bool buttonRead = true;

/*Define functions -----------------------------------------------------------*/
bool_t readKey(void){																// Devuelve true si la tecla fue presionada
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
	bool_t keyPress = false;
 800093e:	2300      	movs	r3, #0
 8000940:	71fb      	strb	r3, [r7, #7]
	flanco_descendente = false;														// Re- inicializacion de la variable
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <readKey+0x30>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
	if(keyPressed){
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <readKey+0x34>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d004      	beq.n	800095a <readKey+0x22>
		keyPress = true;
 8000950:	2301      	movs	r3, #1
 8000952:	71fb      	strb	r3, [r7, #7]
		keyPressed = false; 														// Limpio estado de la variable para evitar lecturas repetidas
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <readKey+0x34>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	}
	return keyPress;																// Retorna True solo una vez por evento de flanco
 800095a:	79fb      	ldrb	r3, [r7, #7]
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	20000103 	.word	0x20000103
 800096c:	20000102 	.word	0x20000102

08000970 <debounceFSM_init>:

void debounceFSM_init(void)															// debe cargar el estado inicial
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	actualState = BUTTON_UP;
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <debounceFSM_init+0x24>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DEBOUNCE_DELAY);
 800097a:	2114      	movs	r1, #20
 800097c:	4806      	ldr	r0, [pc, #24]	@ (8000998 <debounceFSM_init+0x28>)
 800097e:	f000 f87f 	bl	8000a80 <delayInit>

	//Actualizar salida del estado inicial Leds off
	writeLedOff_GPIO(LD1_Pin|LD3_Pin|LD2_Pin);										// Inicializacion de todos los leds apagados
 8000982:	f244 0081 	movw	r0, #16513	@ 0x4081
 8000986:	f000 f8b9 	bl	8000afc <writeLedOff_GPIO>
	buttonRead = true; 																// Boton de usuario no activado
 800098a:	4b04      	ldr	r3, [pc, #16]	@ (800099c <debounceFSM_init+0x2c>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000101 	.word	0x20000101
 8000998:	20000108 	.word	0x20000108
 800099c:	20000104 	.word	0x20000104

080009a0 <debounceFSM_update>:

void debounceFSM_update(bool buttonRead){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	switch (actualState){
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <debounceFSM_update+0xd0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d84f      	bhi.n	8000a52 <debounceFSM_update+0xb2>
 80009b2:	a201      	add	r2, pc, #4	@ (adr r2, 80009b8 <debounceFSM_update+0x18>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	080009dd 	.word	0x080009dd
 80009c0:	08000a0b 	.word	0x08000a0b
 80009c4:	08000a25 	.word	0x08000a25
	case BUTTON_UP: 																// Estado inicial 0 | Actualizar salida del estado LEDs off
		if(buttonRead == true){ 													// Chequear condicion de transición | se presionó el boton?
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d044      	beq.n	8000a58 <debounceFSM_update+0xb8>
			actualState = BUTTON_FALLING; 											// Pasa al estado siguiente
 80009ce:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <debounceFSM_update+0xd0>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY
 80009d4:	4827      	ldr	r0, [pc, #156]	@ (8000a74 <debounceFSM_update+0xd4>)
 80009d6:	f000 f867 	bl	8000aa8 <delayRead>
		}
	break;
 80009da:	e03d      	b.n	8000a58 <debounceFSM_update+0xb8>

	case BUTTON_FALLING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <debounceFSM_update+0xd4>)
 80009de:	f000 f863 	bl	8000aa8 <delayRead>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d039      	beq.n	8000a5c <debounceFSM_update+0xbc>
			//Chequear condicion de transición
			if(buttonRead == true){													// Se presionó boton de usuario
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d009      	beq.n	8000a02 <debounceFSM_update+0x62>
				keyPressed = true; 													// Indica tecla presionada luego de 2 lecturas en 40 ms
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <debounceFSM_update+0xd8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
				flanco_descendente = true; 												// Asume que en este estado hubo un flanco decendente
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <debounceFSM_update+0xdc>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_DOWN; 											// Pasa al estado siguiente
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <debounceFSM_update+0xd0>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_UP; 											// Regresa al estado anterior
			}
		}
	break;
 8000a00:	e02c      	b.n	8000a5c <debounceFSM_update+0xbc>
				actualState = BUTTON_UP; 											// Regresa al estado anterior
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <debounceFSM_update+0xd0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
	break;
 8000a08:	e028      	b.n	8000a5c <debounceFSM_update+0xbc>

	case BUTTON_DOWN:
		//Chequear condicion de transición
		if(buttonRead == false){ 													// Se presionó el boton?
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f083 0301 	eor.w	r3, r3, #1
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d024      	beq.n	8000a60 <debounceFSM_update+0xc0>
			actualState = BUTTON_RISING; 											// Pasa al estado siguiente Deteccion de flanco ascendente
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <debounceFSM_update+0xd0>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY = 40ms
 8000a1c:	4815      	ldr	r0, [pc, #84]	@ (8000a74 <debounceFSM_update+0xd4>)
 8000a1e:	f000 f843 	bl	8000aa8 <delayRead>
		}
	break;
 8000a22:	e01d      	b.n	8000a60 <debounceFSM_update+0xc0>

	case BUTTON_RISING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 8000a24:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <debounceFSM_update+0xd4>)
 8000a26:	f000 f83f 	bl	8000aa8 <delayRead>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d019      	beq.n	8000a64 <debounceFSM_update+0xc4>
			//Chequear condicion de transición
			if(buttonRead == false){												// El boton de usuario regresó a estado inactivo
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f083 0301 	eor.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d006      	beq.n	8000a4a <debounceFSM_update+0xaa>
				keyPressed = false; 												// Indica tecla presionada luego de 2 lecturas en 40 ms
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <debounceFSM_update+0xd8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_UP; 											// Pasa al estado siguiente, el inicial
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <debounceFSM_update+0xd0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
			}
		}
	break;
 8000a48:	e00c      	b.n	8000a64 <debounceFSM_update+0xc4>
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <debounceFSM_update+0xd0>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	701a      	strb	r2, [r3, #0]
	break;
 8000a50:	e008      	b.n	8000a64 <debounceFSM_update+0xc4>

	default:
		Error_Handler();
 8000a52:	f7ff fdbd 	bl	80005d0 <Error_Handler>
	break;
 8000a56:	e006      	b.n	8000a66 <debounceFSM_update+0xc6>
	break;
 8000a58:	bf00      	nop
 8000a5a:	e004      	b.n	8000a66 <debounceFSM_update+0xc6>
	break;
 8000a5c:	bf00      	nop
 8000a5e:	e002      	b.n	8000a66 <debounceFSM_update+0xc6>
	break;
 8000a60:	bf00      	nop
 8000a62:	e000      	b.n	8000a66 <debounceFSM_update+0xc6>
	break;
 8000a64:	bf00      	nop
	}
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000101 	.word	0x20000101
 8000a74:	20000108 	.word	0x20000108
 8000a78:	20000102 	.word	0x20000102
 8000a7c:	20000103 	.word	0x20000103

08000a80 <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 8000a8a:	f000 fc31 	bl	80012f0 <HAL_GetTick>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	605a      	str	r2, [r3, #4]
	delay->running=false;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	721a      	strb	r2, [r3, #8]
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <delayRead>:
bool_t delayRead(delay_t *delay){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a1b      	ldrb	r3, [r3, #8]
 8000ab4:	f083 0301 	eor.w	r3, r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d009      	beq.n	8000ad2 <delayRead+0x2a>
		delay->startTime=HAL_GetTick();
 8000abe:	f000 fc17 	bl	80012f0 <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
		delay->running=true;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	721a      	strb	r2, [r3, #8]
		return false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e00f      	b.n	8000af2 <delayRead+0x4a>
	}
	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 8000ad2:	f000 fc0d 	bl	80012f0 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1ad2      	subs	r2, r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d304      	bcc.n	8000af0 <delayRead+0x48>
		delay->running=false;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	721a      	strb	r2, [r3, #8]
		return true;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <delayRead+0x4a>
	}
	return false;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <writeLedOff_GPIO>:
 * @brief Apagar LED GPIO
 * @param led_t LDx
 * @retval ninguno
 */

void writeLedOff_GPIO(led_t LDx){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_RESET);
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <writeLedOff_GPIO+0x20>)
 8000b0e:	f000 ff6f 	bl	80019f0 <HAL_GPIO_WritePin>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40020400 	.word	0x40020400

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	2234      	movs	r2, #52	@ 0x34
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 f8da 	bl	8003ce8 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a28      	ldr	r2, [pc, #160]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b80:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b84:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b90:	2308      	movs	r3, #8
 8000b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 384;
 8000b94:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b98:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fe10 	bl	80027d0 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000bb6:	f7ff fd0b 	bl	80005d0 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fbda 	bl	8002390 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xc6>
	  {
	    Error_Handler();
 8000be2:	f7ff fcf5 	bl	80005d0 <Error_Handler>
	  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	@ 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	4bb4      	ldr	r3, [pc, #720]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4ab3      	ldr	r2, [pc, #716]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4bb1      	ldr	r3, [pc, #708]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	4bad      	ldr	r3, [pc, #692]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4aac      	ldr	r2, [pc, #688]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4baa      	ldr	r3, [pc, #680]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4ba6      	ldr	r3, [pc, #664]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4aa5      	ldr	r2, [pc, #660]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c50:	f043 0320 	orr.w	r3, r3, #32
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4ba3      	ldr	r3, [pc, #652]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0320 	and.w	r3, r3, #32
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b9f      	ldr	r3, [pc, #636]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a9e      	ldr	r2, [pc, #632]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b9c      	ldr	r3, [pc, #624]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b98      	ldr	r3, [pc, #608]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a97      	ldr	r2, [pc, #604]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b95      	ldr	r3, [pc, #596]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b91      	ldr	r3, [pc, #580]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a90      	ldr	r2, [pc, #576]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b8e      	ldr	r3, [pc, #568]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b8a      	ldr	r3, [pc, #552]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a89      	ldr	r2, [pc, #548]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b87      	ldr	r3, [pc, #540]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b83      	ldr	r3, [pc, #524]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a82      	ldr	r2, [pc, #520]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b80      	ldr	r3, [pc, #512]	@ (8000ee4 <MX_GPIO_Init+0x2ec>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, R2_Pin|R1_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2148      	movs	r1, #72	@ 0x48
 8000cf2:	487d      	ldr	r0, [pc, #500]	@ (8000ee8 <MX_GPIO_Init+0x2f0>)
 8000cf4:	f000 fe7c 	bl	80019f0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000cfe:	487b      	ldr	r0, [pc, #492]	@ (8000eec <MX_GPIO_Init+0x2f4>)
 8000d00:	f000 fe76 	bl	80019f0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2120      	movs	r1, #32
 8000d08:	4879      	ldr	r0, [pc, #484]	@ (8000ef0 <MX_GPIO_Init+0x2f8>)
 8000d0a:	f000 fe71 	bl	80019f0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d14:	4877      	ldr	r0, [pc, #476]	@ (8000ef4 <MX_GPIO_Init+0x2fc>)
 8000d16:	f000 fe6b 	bl	80019f0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_Encendido_GPIO_Port, LED_Encendido_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d20:	4872      	ldr	r0, [pc, #456]	@ (8000eec <MX_GPIO_Init+0x2f4>)
 8000d22:	f000 fe65 	bl	80019f0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, LED_Alerta_Pin|LED_Estado_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8000d2c:	486e      	ldr	r0, [pc, #440]	@ (8000ee8 <MX_GPIO_Init+0x2f0>)
 8000d2e:	f000 fe5f 	bl	80019f0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	4870      	ldr	r0, [pc, #448]	@ (8000ef8 <MX_GPIO_Init+0x300>)
 8000d38:	f000 fe5a 	bl	80019f0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin */
	  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin;
 8000d3c:	2334      	movs	r3, #52	@ 0x34
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4865      	ldr	r0, [pc, #404]	@ (8000ee8 <MX_GPIO_Init+0x2f0>)
 8000d52:	f000 fca1 	bl	8001698 <HAL_GPIO_Init>
	  /*Configure GPIO pins : R2_Pin R1_Pin  */
	  GPIO_InitStruct.Pin = R2_Pin|R1_Pin;
 8000d56:	2348      	movs	r3, #72	@ 0x48
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	485e      	ldr	r0, [pc, #376]	@ (8000ee8 <MX_GPIO_Init+0x2f0>)
 8000d6e:	f000 fc93 	bl	8001698 <HAL_GPIO_Init>
	  /*Configure GPIO pins : R4_Pin R3_Pin */
	  GPIO_InitStruct.Pin = R4_Pin|R3_Pin;
 8000d72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4858      	ldr	r0, [pc, #352]	@ (8000eec <MX_GPIO_Init+0x2f4>)
 8000d8c:	f000 fc84 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pin : USER_Btn_Pin */
	  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4855      	ldr	r0, [pc, #340]	@ (8000efc <MX_GPIO_Init+0x304>)
 8000da8:	f000 fc76 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LED_Encendido__Pin */
	  GPIO_InitStruct.Pin = LED_Encendido_Pin;
 8000dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4849      	ldr	r0, [pc, #292]	@ (8000eec <MX_GPIO_Init+0x2f4>)
 8000dc6:	f000 fc67 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pins :LED_Alerta__Pin LED_Estado__Pin */
	  GPIO_InitStruct.Pin = LED_Alerta_Pin|LED_Estado_Pin;
 8000dca:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4841      	ldr	r0, [pc, #260]	@ (8000ee8 <MX_GPIO_Init+0x2f0>)
 8000de4:	f000 fc58 	bl	8001698 <HAL_GPIO_Init>


	  /*Configure GPIO pin : Buzzer_Pin */
	  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000de8:	2320      	movs	r3, #32
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	483c      	ldr	r0, [pc, #240]	@ (8000ef0 <MX_GPIO_Init+0x2f8>)
 8000e00:	f000 fc4a 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pins : Sensor_PIR_Pin Sensor_Magnetico_1_Pin */
	  GPIO_InitStruct.Pin = Sensor_PIR_Pin|Sensor_Magnetico_1_Pin;
 8000e04:	23c0      	movs	r3, #192	@ 0xc0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e08:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4835      	ldr	r0, [pc, #212]	@ (8000ef0 <MX_GPIO_Init+0x2f8>)
 8000e1a:	f000 fc3d 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e1e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	482f      	ldr	r0, [pc, #188]	@ (8000ef4 <MX_GPIO_Init+0x2fc>)
 8000e38:	f000 fc2e 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pins : Sensor_Magnetico_2_Pin Sensor_Magnetico_3_Pin */
	  GPIO_InitStruct.Pin = Sensor_Magnetico_2_Pin|Sensor_Magnetico_3_Pin;
 8000e3c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	482b      	ldr	r0, [pc, #172]	@ (8000f00 <MX_GPIO_Init+0x308>)
 8000e54:	f000 fc20 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e58:	2340      	movs	r3, #64	@ 0x40
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4822      	ldr	r0, [pc, #136]	@ (8000ef8 <MX_GPIO_Init+0x300>)
 8000e70:	f000 fc12 	bl	8001698 <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_OverCurrent_Pin */
	  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <MX_GPIO_Init+0x300>)
 8000e88:	f000 fc06 	bl	8001698 <HAL_GPIO_Init>

	  /* EXTI2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2008      	movs	r0, #8
 8000e92:	f000 fb38 	bl	8001506 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e96:	2008      	movs	r0, #8
 8000e98:	f000 fb51 	bl	800153e <HAL_NVIC_EnableIRQ>
	  /* EXTI4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fb30 	bl	8001506 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f000 fb49 	bl	800153e <HAL_NVIC_EnableIRQ>
	  /* EXTI9_5_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2017      	movs	r0, #23
 8000eb2:	f000 fb28 	bl	8001506 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eb6:	2017      	movs	r0, #23
 8000eb8:	f000 fb41 	bl	800153e <HAL_NVIC_EnableIRQ>
	  /* USART2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2026      	movs	r0, #38	@ 0x26
 8000ec2:	f000 fb20 	bl	8001506 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec6:	2026      	movs	r0, #38	@ 0x26
 8000ec8:	f000 fb39 	bl	800153e <HAL_NVIC_EnableIRQ>
	  /* EXTI15_10_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2028      	movs	r0, #40	@ 0x28
 8000ed2:	f000 fb18 	bl	8001506 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed6:	2028      	movs	r0, #40	@ 0x28
 8000ed8:	f000 fb31 	bl	800153e <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000edc:	bf00      	nop
 8000ede:	3738      	adds	r7, #56	@ 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40021800 	.word	0x40021800
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00

08000f04 <keypad_scan>:
/**
 * @brief Función que escanea la fila para detectar la tecla presionada
 * @param columnPressed - Columna que generó la interrupción
 * @retval Carácter de la tecla presionada o '\0' si no se detectó ninguna
 */
char keypad_scan(uint16_t columnPressed) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
    if (columnPressed == 0) return '\0';  // No hay interrupción pendiente
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <keypad_scan+0x14>
 8000f14:	2300      	movs	r3, #0
 8000f16:	e067      	b.n	8000fe8 <keypad_scan+0xe4>

    for (int i = 0; i < ROWS; i++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e060      	b.n	8000fe0 <keypad_scan+0xdc>
        // Activar solo la fila actual
        HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 8000f1e:	4a34      	ldr	r2, [pc, #208]	@ (8000ff0 <keypad_scan+0xec>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f26:	4a33      	ldr	r2, [pc, #204]	@ (8000ff4 <keypad_scan+0xf0>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	f000 fd5d 	bl	80019f0 <HAL_GPIO_WritePin>

        // Pequeña espera para asegurar estabilidad
        delayInit(&debounceDelay1, 5);
 8000f36:	2105      	movs	r1, #5
 8000f38:	482f      	ldr	r0, [pc, #188]	@ (8000ff8 <keypad_scan+0xf4>)
 8000f3a:	f7ff fda1 	bl	8000a80 <delayInit>
        delayRead(&debounceDelay1);
 8000f3e:	482e      	ldr	r0, [pc, #184]	@ (8000ff8 <keypad_scan+0xf4>)
 8000f40:	f7ff fdb2 	bl	8000aa8 <delayRead>

        // Verificar si la columna sigue en bajo
        for (int j = 0; j < COLS; j++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	e038      	b.n	8000fbc <keypad_scan+0xb8>
            if (columnPressed == colPins[j] && HAL_GPIO_ReadPin(colPorts[j], colPins[j]) == GPIO_PIN_SET) {
 8000f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ffc <keypad_scan+0xf8>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f52:	88fa      	ldrh	r2, [r7, #6]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d12e      	bne.n	8000fb6 <keypad_scan+0xb2>
 8000f58:	4a29      	ldr	r2, [pc, #164]	@ (8001000 <keypad_scan+0xfc>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f60:	4926      	ldr	r1, [pc, #152]	@ (8000ffc <keypad_scan+0xf8>)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	f000 fd28 	bl	80019c0 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d11f      	bne.n	8000fb6 <keypad_scan+0xb2>
                // Aplicar debounce
                debounceFSM_update(true);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff fd12 	bl	80009a0 <debounceFSM_update>
                if (readKey()) {  // Si el debounce confirma la pulsación
 8000f7c:	f7ff fcdc 	bl	8000938 <readKey>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d017      	beq.n	8000fb6 <keypad_scan+0xb2>
                    HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_RESET); // Restaurar la fila
 8000f86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <keypad_scan+0xec>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f8e:	4a19      	ldr	r2, [pc, #100]	@ (8000ff4 <keypad_scan+0xf0>)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f000 fd29 	bl	80019f0 <HAL_GPIO_WritePin>
                    keypad_resetColumn();
 8000f9e:	f000 f833 	bl	8001008 <keypad_resetColumn>
                    return keymap[i][j];  // Retornar la tecla presionada
 8000fa2:	4918      	ldr	r1, [pc, #96]	@ (8001004 <keypad_scan+0x100>)
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	18ca      	adds	r2, r1, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	e018      	b.n	8000fe8 <keypad_scan+0xe4>
        for (int j = 0; j < COLS; j++) {
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	ddc3      	ble.n	8000f4a <keypad_scan+0x46>
                }
            }
        }
        HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_RESET); // Restaurar la fila
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <keypad_scan+0xec>)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <keypad_scan+0xf0>)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f000 fd0b 	bl	80019f0 <HAL_GPIO_WritePin>
    for (int i = 0; i < ROWS; i++) {
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	dd9b      	ble.n	8000f1e <keypad_scan+0x1a>
    }

    return '\0';  // No se detectó tecla válida
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	20000014 	.word	0x20000014
 8000ff8:	20000114 	.word	0x20000114
 8000ffc:	20000028 	.word	0x20000028
 8001000:	2000001c 	.word	0x2000001c
 8001004:	20000030 	.word	0x20000030

08001008 <keypad_resetColumn>:
/**
 * @brief Función para resetear la columna una vez que se procesó la tecla
 */
void keypad_resetColumn(){
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
    columnPressed = 0;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <keypad_resetColumn+0x14>)
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20000120 	.word	0x20000120

08001020 <lcd_init>:
/*****************************************************************************************************************
 * @brief: Inicializar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_init(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Tiempo de inicio según especificación HD44780
 8001024:	2032      	movs	r0, #50	@ 0x32
 8001026:	f000 f96f 	bl	8001308 <HAL_Delay>
    lcd_send_command(0x30);
 800102a:	2030      	movs	r0, #48	@ 0x30
 800102c:	f000 f85c 	bl	80010e8 <lcd_send_command>
    HAL_Delay(5);
 8001030:	2005      	movs	r0, #5
 8001032:	f000 f969 	bl	8001308 <HAL_Delay>
    lcd_send_command(0x30);
 8001036:	2030      	movs	r0, #48	@ 0x30
 8001038:	f000 f856 	bl	80010e8 <lcd_send_command>
    HAL_Delay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f000 f963 	bl	8001308 <HAL_Delay>
    lcd_send_command(0x30);
 8001042:	2030      	movs	r0, #48	@ 0x30
 8001044:	f000 f850 	bl	80010e8 <lcd_send_command>
    lcd_send_command(0x20); // Cambiar a modo 4 bits
 8001048:	2020      	movs	r0, #32
 800104a:	f000 f84d 	bl	80010e8 <lcd_send_command>

    lcd_send_command(0x28); // Configuración: LCD 2 líneas, matriz 5x8
 800104e:	2028      	movs	r0, #40	@ 0x28
 8001050:	f000 f84a 	bl	80010e8 <lcd_send_command>
    lcd_send_command(0x08); // Apagar display
 8001054:	2008      	movs	r0, #8
 8001056:	f000 f847 	bl	80010e8 <lcd_send_command>
    lcd_send_command(0x01); // Limpiar pantalla
 800105a:	2001      	movs	r0, #1
 800105c:	f000 f844 	bl	80010e8 <lcd_send_command>
    HAL_Delay(2);
 8001060:	2002      	movs	r0, #2
 8001062:	f000 f951 	bl	8001308 <HAL_Delay>
    lcd_send_command(0x06); // Configurar modo de entrada
 8001066:	2006      	movs	r0, #6
 8001068:	f000 f83e 	bl	80010e8 <lcd_send_command>
    lcd_send_command(0x0C); // Encender display, cursor apagado
 800106c:	200c      	movs	r0, #12
 800106e:	f000 f83b 	bl	80010e8 <lcd_send_command>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <lcd_clear>:
/*****************************************************************************************************************
 * @brief: Limpiar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_clear(void) {
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
    lcd_send_command(0x01); // Limpiar pantalla
 800107a:	2001      	movs	r0, #1
 800107c:	f000 f834 	bl	80010e8 <lcd_send_command>
    HAL_Delay(2);
 8001080:	2002      	movs	r0, #2
 8001082:	f000 f941 	bl	8001308 <HAL_Delay>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <lcd_set_cursor>:
 * @brief: Posicionar el cursor en la pantalla LCD
 * @param row: Fila de la pantalla
 * @param col: Columna de la pantalla
 * @retval void
******************************************************************************************************************/
void lcd_set_cursor(uint8_t row, uint8_t col) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	460a      	mov	r2, r1
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	4613      	mov	r3, r2
 8001098:	71bb      	strb	r3, [r7, #6]
    uint8_t addresses[] = {0x80, 0xC0}; // Dirección DDRAM para la primera y segunda línea
 800109a:	f24c 0380 	movw	r3, #49280	@ 0xc080
 800109e:	81bb      	strh	r3, [r7, #12]
    lcd_send_command(addresses[row] + col);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	3310      	adds	r3, #16
 80010a4:	443b      	add	r3, r7
 80010a6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4413      	add	r3, r2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f819 	bl	80010e8 <lcd_send_command>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <lcd_print>:
/*****************************************************************************************************************
 * @brief: Imprimir un texto en la pantalla LCD
 * @param str: Cadena de caracteres a imprimir
 * @retval void
******************************************************************************************************************/
void lcd_print(const char *str) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
    while (*str) {
 80010c6:	e006      	b.n	80010d6 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f817 	bl	8001104 <lcd_send_data>
    while (*str) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f4      	bne.n	80010c8 <lcd_print+0xa>
    }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <lcd_send_command>:
/*****************************************************************************************************************
 * @brief: Enviar un comando a la pantalla LCD
 * @param cmd: Comando a enviar // entero de 8bits sin signo
 * @retval void
******************************************************************************************************************/
static void lcd_send_command(uint8_t cmd) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0x00);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f812 	bl	8001120 <lcd_send>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <lcd_send_data>:
/*****************************************************************************************************************
 * @brief: Enviar un dato a la pantalla LCD
 * @param data: Dato a enviar // Entero sin signo de 8bits
 * @retval void
******************************************************************************************************************/
static void lcd_send_data(uint8_t data) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 0x01);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2101      	movs	r1, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f804 	bl	8001120 <lcd_send>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <lcd_send>:
 * @brief: Enviar datos a la pantalla LCD
 * @param value: Valor a enviar
 * @param mode: Modo de operación (comando o datos)
 * @retval void
******************************************************************************************************************/
static void lcd_send(uint8_t value, uint8_t mode) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
    lcd_control = lcd_backlight | mode;
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <lcd_send+0x40>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <lcd_send+0x44>)
 800113c:	701a      	strb	r2, [r3, #0]
    lcd_write_nibble(value & 0xF0);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f023 030f 	bic.w	r3, r3, #15
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f80e 	bl	8001168 <lcd_write_nibble>
    lcd_write_nibble((value << 4) & 0xF0);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f808 	bl	8001168 <lcd_write_nibble>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000003c 	.word	0x2000003c
 8001164:	20000122 	.word	0x20000122

08001168 <lcd_write_nibble>:
/*****************************************************************************************************************
 * @brief: Escribir un nibble en la pantalla LCD
 * @param nibble: Parte alta o baja del byte a enviar
 * @retval void
******************************************************************************************************************/
static void lcd_write_nibble(uint8_t nibble) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af02      	add	r7, sp, #8
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
    uint8_t data = nibble | lcd_control | 0x04; // Habilitar bit Enable
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <lcd_write_nibble+0x58>)
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4313      	orrs	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001184:	f107 020f 	add.w	r2, r7, #15
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	214e      	movs	r1, #78	@ 0x4e
 8001192:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <lcd_write_nibble+0x5c>)
 8001194:	f000 fda2 	bl	8001cdc <HAL_I2C_Master_Transmit>
    data &= ~0x04; // Deshabilitar bit Enable
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 80011a2:	f107 020f 	add.w	r2, r7, #15
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	214e      	movs	r1, #78	@ 0x4e
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <lcd_write_nibble+0x5c>)
 80011b2:	f000 fd93 	bl	8001cdc <HAL_I2C_Master_Transmit>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000122 	.word	0x20000122
 80011c4:	20000064 	.word	0x20000064

080011c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
/******************************************************************************************************************/
void MX_I2C2_Init(void){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C2_Init 0 */

	  /* USER CODE BEGIN I2C2_Init 1 */

	  /* USER CODE END I2C2_Init 1 */
	  hi2c2.Instance = I2C2;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	@ (800121c <MX_I2C2_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_I2C2_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_I2C2_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_I2C2_Init+0x50>)
 8001206:	f000 fc25 	bl	8001a54 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C2_Init+0x4c>
	  {
	    Error_Handler();
 8001210:	f7ff f9de 	bl	80005d0 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000064 	.word	0x20000064
 800121c:	40005800 	.word	0x40005800
 8001220:	000186a0 	.word	0x000186a0

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f94f 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff f9c0 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f967 	bl	800155a <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f92f 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000044 	.word	0x20000044
 80012c4:	20000040 	.word	0x20000040

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000044 	.word	0x20000044
 80012ec:	20000124 	.word	0x20000124

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000124 	.word	0x20000124

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000044 	.word	0x20000044

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	@ (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff29 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff3e 	bl	8001398 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff31 	bl	80013b4 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffa2 	bl	80014ac <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff feb6 	bl	80012f0 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d008      	beq.n	80015a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2280      	movs	r2, #128	@ 0x80
 8001596:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e052      	b.n	800164a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0216 	bic.w	r2, r2, #22
 80015b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <HAL_DMA_Abort+0x62>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0208 	bic.w	r2, r2, #8
 80015e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f4:	e013      	b.n	800161e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f6:	f7ff fe7b 	bl	80012f0 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b05      	cmp	r3, #5
 8001602:	d90c      	bls.n	800161e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2220      	movs	r2, #32
 8001608:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2203      	movs	r2, #3
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e015      	b.n	800164a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1e4      	bne.n	80015f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001630:	223f      	movs	r2, #63	@ 0x3f
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d004      	beq.n	8001670 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2280      	movs	r2, #128	@ 0x80
 800166a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e00c      	b.n	800168a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e165      	b.n	8001980 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8154 	bne.w	800197a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80ae 	beq.w	800197a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b5d      	ldr	r3, [pc, #372]	@ (8001998 <HAL_GPIO_Init+0x300>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a5c      	ldr	r2, [pc, #368]	@ (8001998 <HAL_GPIO_Init+0x300>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b5a      	ldr	r3, [pc, #360]	@ (8001998 <HAL_GPIO_Init+0x300>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a58      	ldr	r2, [pc, #352]	@ (800199c <HAL_GPIO_Init+0x304>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4f      	ldr	r2, [pc, #316]	@ (80019a0 <HAL_GPIO_Init+0x308>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d025      	beq.n	80018b2 <HAL_GPIO_Init+0x21a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4e      	ldr	r2, [pc, #312]	@ (80019a4 <HAL_GPIO_Init+0x30c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01f      	beq.n	80018ae <HAL_GPIO_Init+0x216>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4d      	ldr	r2, [pc, #308]	@ (80019a8 <HAL_GPIO_Init+0x310>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x212>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4c      	ldr	r2, [pc, #304]	@ (80019ac <HAL_GPIO_Init+0x314>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x20e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4b      	ldr	r2, [pc, #300]	@ (80019b0 <HAL_GPIO_Init+0x318>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x20a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4a      	ldr	r2, [pc, #296]	@ (80019b4 <HAL_GPIO_Init+0x31c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x206>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a49      	ldr	r2, [pc, #292]	@ (80019b8 <HAL_GPIO_Init+0x320>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x202>
 8001896:	2306      	movs	r3, #6
 8001898:	e00c      	b.n	80018b4 <HAL_GPIO_Init+0x21c>
 800189a:	2307      	movs	r3, #7
 800189c:	e00a      	b.n	80018b4 <HAL_GPIO_Init+0x21c>
 800189e:	2305      	movs	r3, #5
 80018a0:	e008      	b.n	80018b4 <HAL_GPIO_Init+0x21c>
 80018a2:	2304      	movs	r3, #4
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x21c>
 80018a6:	2303      	movs	r3, #3
 80018a8:	e004      	b.n	80018b4 <HAL_GPIO_Init+0x21c>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_Init+0x21c>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_GPIO_Init+0x21c>
 80018b2:	2300      	movs	r3, #0
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f002 0203 	and.w	r2, r2, #3
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	4093      	lsls	r3, r2
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c4:	4935      	ldr	r1, [pc, #212]	@ (800199c <HAL_GPIO_Init+0x304>)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d2:	4b3a      	ldr	r3, [pc, #232]	@ (80019bc <HAL_GPIO_Init+0x324>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f6:	4a31      	ldr	r2, [pc, #196]	@ (80019bc <HAL_GPIO_Init+0x324>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018fc:	4b2f      	ldr	r3, [pc, #188]	@ (80019bc <HAL_GPIO_Init+0x324>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001920:	4a26      	ldr	r2, [pc, #152]	@ (80019bc <HAL_GPIO_Init+0x324>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001926:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <HAL_GPIO_Init+0x324>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194a:	4a1c      	ldr	r2, [pc, #112]	@ (80019bc <HAL_GPIO_Init+0x324>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <HAL_GPIO_Init+0x324>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001974:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <HAL_GPIO_Init+0x324>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3301      	adds	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b0f      	cmp	r3, #15
 8001984:	f67f ae96 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40013800 	.word	0x40013800
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021400 	.word	0x40021400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40013c00 	.word	0x40013c00

080019c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e001      	b.n	80019e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a00:	787b      	ldrb	r3, [r7, #1]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fdaa 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e12b      	b.n	8001cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fdd6 	bl	800062c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	@ 0x24
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab8:	f000 fe62 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8001abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a81      	ldr	r2, [pc, #516]	@ (8001cc8 <HAL_I2C_Init+0x274>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d807      	bhi.n	8001ad8 <HAL_I2C_Init+0x84>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a80      	ldr	r2, [pc, #512]	@ (8001ccc <HAL_I2C_Init+0x278>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	bf94      	ite	ls
 8001ad0:	2301      	movls	r3, #1
 8001ad2:	2300      	movhi	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	e006      	b.n	8001ae6 <HAL_I2C_Init+0x92>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a7d      	ldr	r2, [pc, #500]	@ (8001cd0 <HAL_I2C_Init+0x27c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0e7      	b.n	8001cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a78      	ldr	r2, [pc, #480]	@ (8001cd4 <HAL_I2C_Init+0x280>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc8 <HAL_I2C_Init+0x274>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d802      	bhi.n	8001b28 <HAL_I2C_Init+0xd4>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3301      	adds	r3, #1
 8001b26:	e009      	b.n	8001b3c <HAL_I2C_Init+0xe8>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4a69      	ldr	r2, [pc, #420]	@ (8001cd8 <HAL_I2C_Init+0x284>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	495c      	ldr	r1, [pc, #368]	@ (8001cc8 <HAL_I2C_Init+0x274>)
 8001b58:	428b      	cmp	r3, r1
 8001b5a:	d819      	bhi.n	8001b90 <HAL_I2C_Init+0x13c>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e59      	subs	r1, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b70:	400b      	ands	r3, r1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <HAL_I2C_Init+0x138>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e59      	subs	r1, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8a:	e051      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e04f      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d111      	bne.n	8001bbc <HAL_I2C_Init+0x168>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e012      	b.n	8001be2 <HAL_I2C_Init+0x18e>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Init+0x196>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e022      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10e      	bne.n	8001c10 <HAL_I2C_Init+0x1bc>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e58      	subs	r0, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6859      	ldr	r1, [r3, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	440b      	add	r3, r1
 8001c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c0e:	e00f      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	6809      	ldr	r1, [r1, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6911      	ldr	r1, [r2, #16]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68d2      	ldr	r2, [r2, #12]
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	000186a0 	.word	0x000186a0
 8001ccc:	001e847f 	.word	0x001e847f
 8001cd0:	003d08ff 	.word	0x003d08ff
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	10624dd3 	.word	0x10624dd3

08001cdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	817b      	strh	r3, [r7, #10]
 8001cec:	4613      	mov	r3, r2
 8001cee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fafe 	bl	80012f0 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	f040 80e0 	bne.w	8001ec4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2319      	movs	r3, #25
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4970      	ldr	r1, [pc, #448]	@ (8001ed0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f964 	bl	8001fdc <I2C_WaitOnFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0d3      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2C_Master_Transmit+0x50>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0cc      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d007      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2221      	movs	r2, #33	@ 0x21
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	893a      	ldrh	r2, [r7, #8]
 8001d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a50      	ldr	r2, [pc, #320]	@ (8001ed4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d94:	8979      	ldrh	r1, [r7, #10]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f89c 	bl	8001ed8 <I2C_MasterRequestWrite>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e08d      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dc0:	e066      	b.n	8001e90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fa22 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x188>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d017      	beq.n	8001e64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	6a39      	ldr	r1, [r7, #32]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fa19 	bl	80022a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d107      	bne.n	8001e8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e01a      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d194      	bne.n	8001dc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00100002 	.word	0x00100002
 8001ed4:	ffff0000 	.word	0xffff0000

08001ed8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d006      	beq.n	8001f02 <I2C_MasterRequestWrite+0x2a>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d003      	beq.n	8001f02 <I2C_MasterRequestWrite+0x2a>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f00:	d108      	bne.n	8001f14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e00b      	b.n	8001f2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	2b12      	cmp	r3, #18
 8001f1a:	d107      	bne.n	8001f2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f84f 	bl	8001fdc <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f52:	d103      	bne.n	8001f5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e035      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f68:	d108      	bne.n	8001f7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f6a:	897b      	ldrh	r3, [r7, #10]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	e01b      	b.n	8001fb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f7c:	897b      	ldrh	r3, [r7, #10]
 8001f7e:	11db      	asrs	r3, r3, #7
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 0306 	and.w	r3, r3, #6
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f063 030f 	orn	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	490e      	ldr	r1, [pc, #56]	@ (8001fd4 <I2C_MasterRequestWrite+0xfc>)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f898 	bl	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e010      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4907      	ldr	r1, [pc, #28]	@ (8001fd8 <I2C_MasterRequestWrite+0x100>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f888 	bl	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	00010008 	.word	0x00010008
 8001fd8:	00010002 	.word	0x00010002

08001fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fec:	e048      	b.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d044      	beq.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff f97b 	bl	80012f0 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d139      	bne.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	e00c      	b.n	800204c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	43da      	mvns	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4013      	ands	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	429a      	cmp	r2, r3
 8002050:	d116      	bne.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e023      	b.n	80020c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0c1b      	lsrs	r3, r3, #16
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10d      	bne.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	43da      	mvns	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4013      	ands	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	e00c      	b.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4013      	ands	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d093      	beq.n	8001fee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020de:	e071      	b.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ee:	d123      	bne.n	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002108:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e067      	b.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d041      	beq.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002140:	f7ff f8d6 	bl	80012f0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d136      	bne.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10c      	bne.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4013      	ands	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	e00b      	b.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	43da      	mvns	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e021      	b.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	0c1b      	lsrs	r3, r3, #16
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d10c      	bne.n	80021e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	43da      	mvns	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e00b      	b.n	8002200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f af6d 	bne.w	80020e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221c:	e034      	b.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f886 	bl	8002330 <I2C_IsAcknowledgeFailed>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e034      	b.n	8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d028      	beq.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff f85b 	bl	80012f0 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11d      	bne.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b80      	cmp	r3, #128	@ 0x80
 8002258:	d016      	beq.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002292:	2b80      	cmp	r3, #128	@ 0x80
 8002294:	d1c3      	bne.n	800221e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ac:	e034      	b.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f83e 	bl	8002330 <I2C_IsAcknowledgeFailed>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e034      	b.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d028      	beq.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c6:	f7ff f813 	bl	80012f0 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d302      	bcc.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11d      	bne.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d016      	beq.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e007      	b.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b04      	cmp	r3, #4
 8002324:	d1c3      	bne.n	80022ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002346:	d11b      	bne.n	8002380 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002350:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f043 0204 	orr.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe ff36 	bl	80012f0 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe ff32 	bl	80012f0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fe96 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	08003db0 	.word	0x08003db0
 8002554:	20000000 	.word	0x20000000
 8002558:	20000040 	.word	0x20000040

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b094      	sub	sp, #80	@ 0x50
 8002562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4b79      	ldr	r3, [pc, #484]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d00d      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002580:	2b08      	cmp	r3, #8
 8002582:	f200 80e1 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 800258e:	e0db      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b73      	ldr	r3, [pc, #460]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002594:	e0db      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002596:	4b73      	ldr	r3, [pc, #460]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x208>)
 8002598:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800259a:	e0d8      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a6:	4b6d      	ldr	r3, [pc, #436]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4621      	mov	r1, r4
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	6139      	str	r1, [r7, #16]
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002600:	4659      	mov	r1, fp
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	4651      	mov	r1, sl
 8002606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260a:	4651      	mov	r1, sl
 800260c:	018a      	lsls	r2, r1, #6
 800260e:	4651      	mov	r1, sl
 8002610:	ebb2 0801 	subs.w	r8, r2, r1
 8002614:	4659      	mov	r1, fp
 8002616:	eb63 0901 	sbc.w	r9, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262e:	4690      	mov	r8, r2
 8002630:	4699      	mov	r9, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb18 0303 	adds.w	r3, r8, r3
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	462b      	mov	r3, r5
 800263c:	eb49 0303 	adc.w	r3, r9, r3
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264e:	4629      	mov	r1, r5
 8002650:	024b      	lsls	r3, r1, #9
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002658:	4621      	mov	r1, r4
 800265a:	024a      	lsls	r2, r1, #9
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002662:	2200      	movs	r2, #0
 8002664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800266c:	f7fd fddc 	bl	8000228 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002678:	e058      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	4618      	mov	r0, r3
 8002684:	4611      	mov	r1, r2
 8002686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0159      	lsls	r1, r3, #5
 80026a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a6:	0150      	lsls	r0, r2, #5
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4641      	mov	r1, r8
 80026ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026cc:	ebb2 040a 	subs.w	r4, r2, sl
 80026d0:	eb63 050b 	sbc.w	r5, r3, fp
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	00eb      	lsls	r3, r5, #3
 80026de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e2:	00e2      	lsls	r2, r4, #3
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	18e3      	adds	r3, r4, r3
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb45 0303 	adc.w	r3, r5, r3
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	61fa      	str	r2, [r7, #28]
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	f7fd fd82 	bl	8000228 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800273c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800273e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 800274a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002750:	4618      	mov	r0, r3
 8002752:	3750      	adds	r7, #80	@ 0x50
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08003dc0 	.word	0x08003dc0

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08003dc0 	.word	0x08003dc0

080027d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e273      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d075      	beq.n	80028da <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027ee:	4b88      	ldr	r3, [pc, #544]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d00c      	beq.n	8002814 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fa:	4b85      	ldr	r3, [pc, #532]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002802:	2b08      	cmp	r3, #8
 8002804:	d112      	bne.n	800282c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002806:	4b82      	ldr	r3, [pc, #520]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002812:	d10b      	bne.n	800282c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	4b7e      	ldr	r3, [pc, #504]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d05b      	beq.n	80028d8 <HAL_RCC_OscConfig+0x108>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d157      	bne.n	80028d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e24e      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002834:	d106      	bne.n	8002844 <HAL_RCC_OscConfig+0x74>
 8002836:	4b76      	ldr	r3, [pc, #472]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e01d      	b.n	8002880 <HAL_RCC_OscConfig+0xb0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x98>
 800284e:	4b70      	ldr	r3, [pc, #448]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6f      	ldr	r2, [pc, #444]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6c      	ldr	r2, [pc, #432]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0xb0>
 8002868:	4b69      	ldr	r3, [pc, #420]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a68      	ldr	r2, [pc, #416]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b66      	ldr	r3, [pc, #408]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a65      	ldr	r2, [pc, #404]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800287e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fd32 	bl	80012f0 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fd2e 	bl	80012f0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e213      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0xc0>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fd1e 	bl	80012f0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fd1a 	bl	80012f0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	@ 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1ff      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	4b51      	ldr	r3, [pc, #324]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0xe8>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d063      	beq.n	80029ae <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f2:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d11c      	bne.n	8002938 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b44      	ldr	r3, [pc, #272]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	4b41      	ldr	r3, [pc, #260]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x152>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1d3      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4937      	ldr	r1, [pc, #220]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	e03a      	b.n	80029ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002940:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x244>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fcd3 	bl	80012f0 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294e:	f7fe fccf 	bl	80012f0 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1b4      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4925      	ldr	r1, [pc, #148]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_RCC_OscConfig+0x244>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fcb2 	bl	80012f0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe fcae 	bl	80012f0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e193      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d036      	beq.n	8002a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x248>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe fc92 	bl	80012f0 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe fc8e 	bl	80012f0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e173      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_RCC_OscConfig+0x240>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x200>
 80029ee:	e01b      	b.n	8002a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x248>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fe fc7b 	bl	80012f0 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	e00e      	b.n	8002a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fe:	f7fe fc77 	bl	80012f0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d907      	bls.n	8002a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e15c      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470000 	.word	0x42470000
 8002a18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ea      	bne.n	80029fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8097 	beq.w	8002b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b83      	ldr	r3, [pc, #524]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a56:	4b7c      	ldr	r3, [pc, #496]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b79      	ldr	r3, [pc, #484]	@ (8002c4c <HAL_RCC_OscConfig+0x47c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d118      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b76      	ldr	r3, [pc, #472]	@ (8002c4c <HAL_RCC_OscConfig+0x47c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x47c>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fc37 	bl	80012f0 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7fe fc33 	bl	80012f0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e118      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b6c      	ldr	r3, [pc, #432]	@ (8002c4c <HAL_RCC_OscConfig+0x47c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x2ea>
 8002aac:	4b66      	ldr	r3, [pc, #408]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	4a65      	ldr	r2, [pc, #404]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x324>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x30c>
 8002ac2:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ace:	4b5e      	ldr	r3, [pc, #376]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0x324>
 8002adc:	4b5a      	ldr	r3, [pc, #360]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a59      	ldr	r2, [pc, #356]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	4b57      	ldr	r3, [pc, #348]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a56      	ldr	r2, [pc, #344]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fbf8 	bl	80012f0 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fbf4 	bl	80012f0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0d7      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCC_OscConfig+0x334>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fbe2 	bl	80012f0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe fbde 	bl	80012f0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0c1      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80ad 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6e:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d060      	beq.n	8002c3c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d145      	bne.n	8002c0e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_RCC_OscConfig+0x480>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fbb2 	bl	80012f0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fbae 	bl	80012f0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e093      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	071b      	lsls	r3, r3, #28
 8002bda:	491b      	ldr	r1, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x480>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fb83 	bl	80012f0 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fb7f 	bl	80012f0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e064      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x41e>
 8002c0c:	e05c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_OscConfig+0x480>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fb6c 	bl	80012f0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fb68 	bl	80012f0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e04d      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x44c>
 8002c3a:	e045      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e040      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_RCC_OscConfig+0x504>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d030      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d129      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d122      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d119      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10f      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e042      	b.n	8002d70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fcdc 	bl	80006bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	@ 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fd5f 	bl	80037e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	@ 0x28
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d175      	bne.n	8002e84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_Transmit+0x2c>
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e06e      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2221      	movs	r2, #33	@ 0x21
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fa9b 	bl	80012f0 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd0:	d108      	bne.n	8002de4 <HAL_UART_Transmit+0x6c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dec:	e02e      	b.n	8002e4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2180      	movs	r1, #128	@ 0x80
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fafb 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03a      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e007      	b.n	8002e3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1cb      	bne.n	8002dee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	@ 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fac7 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e006      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b0ba      	sub	sp, #232	@ 0xe8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x66>
 8002ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fbb8 	bl	8003664 <UART_Receive_IT>
      return;
 8002ef4:	e25b      	b.n	80033ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80de 	beq.w	80030bc <HAL_UART_IRQHandler+0x22c>
 8002f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80d1 	beq.w	80030bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_UART_IRQHandler+0xae>
 8002f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_UART_IRQHandler+0xd2>
 8002f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_UART_IRQHandler+0xf6>
 8002f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	f043 0204 	orr.w	r2, r3, #4
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d011      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x126>
 8002f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	f043 0208 	orr.w	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 81f2 	beq.w	80033a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_UART_IRQHandler+0x14e>
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fb43 	bl	8003664 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <HAL_UART_IRQHandler+0x17a>
 8003002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d04f      	beq.n	80030aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa4b 	bl	80034a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301a:	2b40      	cmp	r3, #64	@ 0x40
 800301c:	d141      	bne.n	80030a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3314      	adds	r3, #20
 8003024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800303c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800304a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800304e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1d9      	bne.n	800301e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d013      	beq.n	800309a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	4a7e      	ldr	r2, [pc, #504]	@ (8003270 <HAL_UART_IRQHandler+0x3e0>)
 8003078:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fae7 	bl	8001652 <HAL_DMA_Abort_IT>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003094:	4610      	mov	r0, r2
 8003096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	e00e      	b.n	80030b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f994 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	e00a      	b.n	80030b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f990 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f98c 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80030b6:	e175      	b.n	80033a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	bf00      	nop
    return;
 80030ba:	e173      	b.n	80033a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 814f 	bne.w	8003364 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8148 	beq.w	8003364 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8141 	beq.w	8003364 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	f040 80b6 	bne.w	8003274 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8145 	beq.w	80033a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003126:	429a      	cmp	r2, r3
 8003128:	f080 813e 	bcs.w	80033a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003132:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800313e:	f000 8088 	beq.w	8003252 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800315c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800316e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800317a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1d9      	bne.n	8003142 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3314      	adds	r3, #20
 8003194:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800319e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e1      	bne.n	800318e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3314      	adds	r3, #20
 80031d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3314      	adds	r3, #20
 80031ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e3      	bne.n	80031ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003222:	f023 0310 	bic.w	r3, r3, #16
 8003226:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003234:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003236:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800323a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e3      	bne.n	8003210 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe f990 	bl	8001572 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003260:	b29b      	uxth	r3, r3
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	b29b      	uxth	r3, r3
 8003266:	4619      	mov	r1, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f8b7 	bl	80033dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800326e:	e09b      	b.n	80033a8 <HAL_UART_IRQHandler+0x518>
 8003270:	0800356d 	.word	0x0800356d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800327c:	b29b      	uxth	r3, r3
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 808e 	beq.w	80033ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8089 	beq.w	80033ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032be:	647a      	str	r2, [r7, #68]	@ 0x44
 80032c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3314      	adds	r3, #20
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	623b      	str	r3, [r7, #32]
   return(result);
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80032f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e3      	bne.n	80032d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	60fb      	str	r3, [r7, #12]
   return(result);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0310 	bic.w	r3, r3, #16
 800332e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800333c:	61fa      	str	r2, [r7, #28]
 800333e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	69b9      	ldr	r1, [r7, #24]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	617b      	str	r3, [r7, #20]
   return(result);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e3      	bne.n	8003318 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f83d 	bl	80033dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003362:	e023      	b.n	80033ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_UART_IRQHandler+0x4f4>
 8003370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f909 	bl	8003594 <UART_Transmit_IT>
    return;
 8003382:	e014      	b.n	80033ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00e      	beq.n	80033ae <HAL_UART_IRQHandler+0x51e>
 8003390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f949 	bl	8003634 <UART_EndTransmit_IT>
    return;
 80033a2:	e004      	b.n	80033ae <HAL_UART_IRQHandler+0x51e>
    return;
 80033a4:	bf00      	nop
 80033a6:	e002      	b.n	80033ae <HAL_UART_IRQHandler+0x51e>
      return;
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <HAL_UART_IRQHandler+0x51e>
      return;
 80033ac:	bf00      	nop
  }
}
 80033ae:	37e8      	adds	r7, #232	@ 0xe8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	e03b      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d037      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fd ff6f 	bl	80012f0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <UART_WaitOnFlagUntilTimeout+0x30>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e03a      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b80      	cmp	r3, #128	@ 0x80
 800343a:	d020      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b40      	cmp	r3, #64	@ 0x40
 8003440:	d01d      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d116      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f81d 	bl	80034a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2208      	movs	r2, #8
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d0b4      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b095      	sub	sp, #84	@ 0x54
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e5      	bne.n	80034ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e5      	bne.n	80034e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	2b01      	cmp	r3, #1
 800351c:	d119      	bne.n	8003552 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	60bb      	str	r3, [r7, #8]
   return(result);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f023 0310 	bic.w	r3, r3, #16
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353e:	61ba      	str	r2, [r7, #24]
 8003540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6979      	ldr	r1, [r7, #20]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	613b      	str	r3, [r7, #16]
   return(result);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003560:	bf00      	nop
 8003562:	3754      	adds	r7, #84	@ 0x54
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff ff1e 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b21      	cmp	r3, #33	@ 0x21
 80035a6:	d13e      	bne.n	8003626 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b0:	d114      	bne.n	80035dc <UART_Transmit_IT+0x48>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d110      	bne.n	80035dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	1c9a      	adds	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]
 80035da:	e008      	b.n	80035ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	1c59      	adds	r1, r3, #1
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6211      	str	r1, [r2, #32]
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4619      	mov	r1, r3
 80035fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003610:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003620:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fd f918 	bl	800088a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08c      	sub	sp, #48	@ 0x30
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b22      	cmp	r3, #34	@ 0x22
 8003676:	f040 80ae 	bne.w	80037d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003682:	d117      	bne.n	80036b4 <UART_Receive_IT+0x50>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d113      	bne.n	80036b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036b2:	e026      	b.n	8003702 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c6:	d007      	beq.n	80036d8 <UART_Receive_IT+0x74>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <UART_Receive_IT+0x82>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e008      	b.n	80036f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4619      	mov	r1, r3
 8003710:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003712:	2b00      	cmp	r3, #0
 8003714:	d15d      	bne.n	80037d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0220 	bic.w	r2, r2, #32
 8003724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	2b01      	cmp	r3, #1
 800375a:	d135      	bne.n	80037c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	613b      	str	r3, [r7, #16]
   return(result);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f023 0310 	bic.w	r3, r3, #16
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	623a      	str	r2, [r7, #32]
 8003784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	69f9      	ldr	r1, [r7, #28]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d10a      	bne.n	80037ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fe0b 	bl	80033dc <HAL_UARTEx_RxEventCallback>
 80037c6:	e002      	b.n	80037ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fdf3 	bl	80033b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e002      	b.n	80037d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3730      	adds	r7, #48	@ 0x30
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	b0c0      	sub	sp, #256	@ 0x100
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	ea40 0301 	orr.w	r3, r0, r1
 8003808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003838:	f021 010c 	bic.w	r1, r1, #12
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	6999      	ldr	r1, [r3, #24]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	ea40 0301 	orr.w	r3, r0, r1
 8003866:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b95      	ldr	r3, [pc, #596]	@ (8003ac4 <UART_SetConfig+0x2e4>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d011      	beq.n	8003898 <UART_SetConfig+0xb8>
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b93      	ldr	r3, [pc, #588]	@ (8003ac8 <UART_SetConfig+0x2e8>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d00b      	beq.n	8003898 <UART_SetConfig+0xb8>
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b91      	ldr	r3, [pc, #580]	@ (8003acc <UART_SetConfig+0x2ec>)
 8003888:	429a      	cmp	r2, r3
 800388a:	d005      	beq.n	8003898 <UART_SetConfig+0xb8>
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad0 <UART_SetConfig+0x2f0>)
 8003894:	429a      	cmp	r2, r3
 8003896:	d104      	bne.n	80038a2 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003898:	f7fe ff86 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 800389c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038a0:	e003      	b.n	80038aa <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038a2:	f7fe ff6d 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80038a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b4:	f040 8110 	bne.w	8003ad8 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038ca:	4622      	mov	r2, r4
 80038cc:	462b      	mov	r3, r5
 80038ce:	1891      	adds	r1, r2, r2
 80038d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038d2:	415b      	adcs	r3, r3
 80038d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038da:	4621      	mov	r1, r4
 80038dc:	eb12 0801 	adds.w	r8, r2, r1
 80038e0:	4629      	mov	r1, r5
 80038e2:	eb43 0901 	adc.w	r9, r3, r1
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038fa:	4690      	mov	r8, r2
 80038fc:	4699      	mov	r9, r3
 80038fe:	4623      	mov	r3, r4
 8003900:	eb18 0303 	adds.w	r3, r8, r3
 8003904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003908:	462b      	mov	r3, r5
 800390a:	eb49 0303 	adc.w	r3, r9, r3
 800390e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800391e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003926:	460b      	mov	r3, r1
 8003928:	18db      	adds	r3, r3, r3
 800392a:	653b      	str	r3, [r7, #80]	@ 0x50
 800392c:	4613      	mov	r3, r2
 800392e:	eb42 0303 	adc.w	r3, r2, r3
 8003932:	657b      	str	r3, [r7, #84]	@ 0x54
 8003934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003938:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800393c:	f7fc fc74 	bl	8000228 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4b63      	ldr	r3, [pc, #396]	@ (8003ad4 <UART_SetConfig+0x2f4>)
 8003946:	fba3 2302 	umull	r2, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	011c      	lsls	r4, r3, #4
 800394e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800395c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003960:	4642      	mov	r2, r8
 8003962:	464b      	mov	r3, r9
 8003964:	1891      	adds	r1, r2, r2
 8003966:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003968:	415b      	adcs	r3, r3
 800396a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800396c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003970:	4641      	mov	r1, r8
 8003972:	eb12 0a01 	adds.w	sl, r2, r1
 8003976:	4649      	mov	r1, r9
 8003978:	eb43 0b01 	adc.w	fp, r3, r1
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800398c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003990:	4692      	mov	sl, r2
 8003992:	469b      	mov	fp, r3
 8003994:	4643      	mov	r3, r8
 8003996:	eb1a 0303 	adds.w	r3, sl, r3
 800399a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800399e:	464b      	mov	r3, r9
 80039a0:	eb4b 0303 	adc.w	r3, fp, r3
 80039a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039bc:	460b      	mov	r3, r1
 80039be:	18db      	adds	r3, r3, r3
 80039c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c2:	4613      	mov	r3, r2
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039d2:	f7fc fc29 	bl	8000228 <__aeabi_uldivmod>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad4 <UART_SetConfig+0x2f4>)
 80039de:	fba3 2301 	umull	r2, r3, r3, r1
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2264      	movs	r2, #100	@ 0x64
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	1acb      	subs	r3, r1, r3
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039f2:	4b38      	ldr	r3, [pc, #224]	@ (8003ad4 <UART_SetConfig+0x2f4>)
 80039f4:	fba3 2302 	umull	r2, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a00:	441c      	add	r4, r3
 8003a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	1891      	adds	r1, r2, r2
 8003a1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a1c:	415b      	adcs	r3, r3
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a24:	4641      	mov	r1, r8
 8003a26:	1851      	adds	r1, r2, r1
 8003a28:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	414b      	adcs	r3, r1
 8003a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a3c:	4659      	mov	r1, fp
 8003a3e:	00cb      	lsls	r3, r1, #3
 8003a40:	4651      	mov	r1, sl
 8003a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a46:	4651      	mov	r1, sl
 8003a48:	00ca      	lsls	r2, r1, #3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4642      	mov	r2, r8
 8003a52:	189b      	adds	r3, r3, r2
 8003a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a58:	464b      	mov	r3, r9
 8003a5a:	460a      	mov	r2, r1
 8003a5c:	eb42 0303 	adc.w	r3, r2, r3
 8003a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a78:	460b      	mov	r3, r1
 8003a7a:	18db      	adds	r3, r3, r3
 8003a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7e:	4613      	mov	r3, r2
 8003a80:	eb42 0303 	adc.w	r3, r2, r3
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a8e:	f7fc fbcb 	bl	8000228 <__aeabi_uldivmod>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <UART_SetConfig+0x2f4>)
 8003a98:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	2164      	movs	r1, #100	@ 0x64
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	3332      	adds	r3, #50	@ 0x32
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <UART_SetConfig+0x2f4>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	f003 0207 	and.w	r2, r3, #7
 8003ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4422      	add	r2, r4
 8003abe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ac0:	e10a      	b.n	8003cd8 <UART_SetConfig+0x4f8>
 8003ac2:	bf00      	nop
 8003ac4:	40011000 	.word	0x40011000
 8003ac8:	40011400 	.word	0x40011400
 8003acc:	40011800 	.word	0x40011800
 8003ad0:	40011c00 	.word	0x40011c00
 8003ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aea:	4642      	mov	r2, r8
 8003aec:	464b      	mov	r3, r9
 8003aee:	1891      	adds	r1, r2, r2
 8003af0:	6239      	str	r1, [r7, #32]
 8003af2:	415b      	adcs	r3, r3
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003afa:	4641      	mov	r1, r8
 8003afc:	1854      	adds	r4, r2, r1
 8003afe:	4649      	mov	r1, r9
 8003b00:	eb43 0501 	adc.w	r5, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	00eb      	lsls	r3, r5, #3
 8003b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b12:	00e2      	lsls	r2, r4, #3
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	4643      	mov	r3, r8
 8003b1a:	18e3      	adds	r3, r4, r3
 8003b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b20:	464b      	mov	r3, r9
 8003b22:	eb45 0303 	adc.w	r3, r5, r3
 8003b26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b46:	4629      	mov	r1, r5
 8003b48:	008b      	lsls	r3, r1, #2
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b50:	4621      	mov	r1, r4
 8003b52:	008a      	lsls	r2, r1, #2
 8003b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b58:	f7fc fb66 	bl	8000228 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4b60      	ldr	r3, [pc, #384]	@ (8003ce4 <UART_SetConfig+0x504>)
 8003b62:	fba3 2302 	umull	r2, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	011c      	lsls	r4, r3, #4
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	61b9      	str	r1, [r7, #24]
 8003b84:	415b      	adcs	r3, r3
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	1851      	adds	r1, r2, r1
 8003b90:	6139      	str	r1, [r7, #16]
 8003b92:	4649      	mov	r1, r9
 8003b94:	414b      	adcs	r3, r1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	00cb      	lsls	r3, r1, #3
 8003ba8:	4651      	mov	r1, sl
 8003baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bae:	4651      	mov	r1, sl
 8003bb0:	00ca      	lsls	r2, r1, #3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4642      	mov	r2, r8
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003be4:	4649      	mov	r1, r9
 8003be6:	008b      	lsls	r3, r1, #2
 8003be8:	4641      	mov	r1, r8
 8003bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bee:	4641      	mov	r1, r8
 8003bf0:	008a      	lsls	r2, r1, #2
 8003bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bf6:	f7fc fb17 	bl	8000228 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4b38      	ldr	r3, [pc, #224]	@ (8003ce4 <UART_SetConfig+0x504>)
 8003c02:	fba3 2301 	umull	r2, r3, r3, r1
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2264      	movs	r2, #100	@ 0x64
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	1acb      	subs	r3, r1, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	@ 0x32
 8003c14:	4a33      	ldr	r2, [pc, #204]	@ (8003ce4 <UART_SetConfig+0x504>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c20:	441c      	add	r4, r3
 8003c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c26:	2200      	movs	r2, #0
 8003c28:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c72:	464b      	mov	r3, r9
 8003c74:	460a      	mov	r2, r1
 8003c76:	eb42 0303 	adc.w	r3, r2, r3
 8003c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c86:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c94:	4649      	mov	r1, r9
 8003c96:	008b      	lsls	r3, r1, #2
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	008a      	lsls	r2, r1, #2
 8003ca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ca6:	f7fc fabf 	bl	8000228 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <UART_SetConfig+0x504>)
 8003cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	2164      	movs	r1, #100	@ 0x64
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	3332      	adds	r3, #50	@ 0x32
 8003cc2:	4a08      	ldr	r2, [pc, #32]	@ (8003ce4 <UART_SetConfig+0x504>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4422      	add	r2, r4
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce4:	51eb851f 	.word	0x51eb851f

08003ce8 <memset>:
 8003ce8:	4402      	add	r2, r0
 8003cea:	4603      	mov	r3, r0
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <memset+0xa>
 8003cf0:	4770      	bx	lr
 8003cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf6:	e7f9      	b.n	8003cec <memset+0x4>

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8003d30 <__libc_init_array+0x38>)
 8003cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8003d34 <__libc_init_array+0x3c>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	2600      	movs	r6, #0
 8003d04:	42a6      	cmp	r6, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	4d0b      	ldr	r5, [pc, #44]	@ (8003d38 <__libc_init_array+0x40>)
 8003d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d3c <__libc_init_array+0x44>)
 8003d0c:	f000 f818 	bl	8003d40 <_init>
 8003d10:	1b64      	subs	r4, r4, r5
 8003d12:	10a4      	asrs	r4, r4, #2
 8003d14:	2600      	movs	r6, #0
 8003d16:	42a6      	cmp	r6, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d20:	4798      	blx	r3
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2a:	4798      	blx	r3
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	08003dd0 	.word	0x08003dd0
 8003d34:	08003dd0 	.word	0x08003dd0
 8003d38:	08003dd0 	.word	0x08003dd0
 8003d3c:	08003dd4 	.word	0x08003dd4

08003d40 <_init>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	bf00      	nop
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr

08003d4c <_fini>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr
