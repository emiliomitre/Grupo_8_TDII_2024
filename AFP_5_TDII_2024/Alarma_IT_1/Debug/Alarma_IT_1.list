
Alarma_IT_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08005534  08005534  00006534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f0  080057f0  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f8  080057f8  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057fc  080057fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005800  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000084  08005884  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005884  00007318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dce8  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002760  00000000  00000000  00014d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00017500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000981  00000000  00000000  00018150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c39  00000000  00000000  00018ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d0f  00000000  00000000  0003a70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8ebd  00000000  00000000  0004c419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001152d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  0011531c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00118994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800551c 	.word	0x0800551c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	0800551c 	.word	0x0800551c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 fcad 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f001 f895 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /*****************************************************************************************************************/
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f001 f8ff 	bl	80017f0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005f2:	f001 fb69 	bl	8001cc8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 ff31 	bl	800145c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  keypad_init();
 80005fa:	f001 fb93 	bl	8001d24 <keypad_init>
  BT_Test(); 						// Enviar mensaje de prueba al HC-05
 80005fe:	f000 ff77 	bl	80014f0 <BT_Test>
  HAL_Delay(35);					// Delay bloqueante minimo necesario para que pueda recibir datos el integrado del LCD
 8000602:	2023      	movs	r0, #35	@ 0x23
 8000604:	f001 fd10 	bl	8002028 <HAL_Delay>
  lcd_init();
 8000608:	f001 fa8a 	bl	8001b20 <lcd_init>
  DisplayMainMenu(); 				// Muestra el menu principal en la pantalla
 800060c:	f000 f832 	bl	8000674 <DisplayMainMenu>
  delayInit(&DelayGRAL_1,20000);
 8000610:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000614:	4815      	ldr	r0, [pc, #84]	@ (800066c <main+0x8c>)
 8000616:	f001 f82f 	bl	8001678 <delayInit>
  disableSensorInterrupts();  		// Deshabilitacion de interrupciones para los sensores.
 800061a:	f001 fa3c 	bl	8001a96 <disableSensorInterrupts>
				  CheckSensors(); 				// Revisa los sensores mientras la alarma está activa
				  break;
		  }
	  }*/
/******************************************************************************************************************************************/
	 char key = keypad_get_key(); // Modificacion del if dentro del switch
 800061e:	f001 fc89 	bl	8001f34 <keypad_get_key>
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	  switch (currentState) {
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <main+0x90>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b04      	cmp	r3, #4
 800062c:	dcf7      	bgt.n	800061e <main+0x3e>
 800062e:	2b02      	cmp	r3, #2
 8000630:	da14      	bge.n	800065c <main+0x7c>
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <main+0x5c>
 8000636:	2b01      	cmp	r3, #1
 8000638:	d008      	beq.n	800064c <main+0x6c>
 800063a:	e015      	b.n	8000668 <main+0x88>
	      case MAIN_MENU:
	          if (key != '\0') HandleMainMenuInput(key);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00f      	beq.n	8000662 <main+0x82>
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f833 	bl	80006b0 <HandleMainMenuInput>
	          break;
 800064a:	e00a      	b.n	8000662 <main+0x82>
	      case ALARM_MENU:
	          if (key != '\0') HandleAlarmMenuInput(key);
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d009      	beq.n	8000666 <main+0x86>
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f865 	bl	8000724 <HandleAlarmMenuInput>
	          break;
 800065a:	e004      	b.n	8000666 <main+0x86>
	      case CHANGE_PASS_MENU:
	      case TEST_ALARM_MENU:
	      case ACTIVE_ALARM:
	          CheckSensors();
 800065c:	f000 fcde 	bl	800101c <CheckSensors>
	          break;
 8000660:	e002      	b.n	8000668 <main+0x88>
	          break;
 8000662:	bf00      	nop
 8000664:	e7db      	b.n	800061e <main+0x3e>
	          break;
 8000666:	bf00      	nop
  {
 8000668:	e7d9      	b.n	800061e <main+0x3e>
 800066a:	bf00      	nop
 800066c:	200000b0 	.word	0x200000b0
 8000670:	200000a5 	.word	0x200000a5

08000674 <DisplayMainMenu>:
/*****************************************************************************************************************
 * @brief: Función para mostrar el menú principal
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayMainMenu(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    lcd_clear();
 8000678:	f001 fa7d 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f001 fa83 	bl	8001b8a <lcd_set_cursor>
    lcd_print("1.Activar *.Mas");
 8000684:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <DisplayMainMenu+0x30>)
 8000686:	f001 fa9a 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	2001      	movs	r0, #1
 800068e:	f001 fa7c 	bl	8001b8a <lcd_set_cursor>
    lcd_print("2.Cambiar Pass");
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <DisplayMainMenu+0x34>)
 8000694:	f001 fa93 	bl	8001bbe <lcd_print>
    currentState = MAIN_MENU;
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <DisplayMainMenu+0x38>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08005534 	.word	0x08005534
 80006a8:	08005544 	.word	0x08005544
 80006ac:	200000a5 	.word	0x200000a5

080006b0 <HandleMainMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú principal
 * @param: recibe una variable tipo caracter para entrar en las distintas opciones de menu
 * @retval: void
******************************************************************************************************************/
void HandleMainMenuInput(char key) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b32      	cmp	r3, #50	@ 0x32
 80006be:	d008      	beq.n	80006d2 <HandleMainMenuInput+0x22>
 80006c0:	2b32      	cmp	r3, #50	@ 0x32
 80006c2:	dc0c      	bgt.n	80006de <HandleMainMenuInput+0x2e>
 80006c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80006c6:	d007      	beq.n	80006d8 <HandleMainMenuInput+0x28>
 80006c8:	2b31      	cmp	r3, #49	@ 0x31
 80006ca:	d108      	bne.n	80006de <HandleMainMenuInput+0x2e>
        case '1':
            DisplayAlarmMenu();
 80006cc:	f000 f80c 	bl	80006e8 <DisplayAlarmMenu>
            break;
 80006d0:	e005      	b.n	80006de <HandleMainMenuInput+0x2e>
        case '2':
            DisplayChangePassMenu();
 80006d2:	f000 fad3 	bl	8000c7c <DisplayChangePassMenu>
            break;
 80006d6:	e002      	b.n	80006de <HandleMainMenuInput+0x2e>
        case '*':
            HandleSubMenu();
 80006d8:	f000 fc2c 	bl	8000f34 <HandleSubMenu>
            break;
 80006dc:	bf00      	nop
    }
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <DisplayAlarmMenu>:
/*****************************************************************************************************************
 * @brief: Mostrar menú para activar alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayAlarmMenu(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    lcd_clear();
 80006ec:	f001 fa43 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f001 fa49 	bl	8001b8a <lcd_set_cursor>
    lcd_print("1.Sist Completo");
 80006f8:	4807      	ldr	r0, [pc, #28]	@ (8000718 <DisplayAlarmMenu+0x30>)
 80006fa:	f001 fa60 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 80006fe:	2100      	movs	r1, #0
 8000700:	2001      	movs	r0, #1
 8000702:	f001 fa42 	bl	8001b8a <lcd_set_cursor>
    lcd_print("2.Sin Sensor Mov");
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <DisplayAlarmMenu+0x34>)
 8000708:	f001 fa59 	bl	8001bbe <lcd_print>
    currentState = ALARM_MENU;
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <DisplayAlarmMenu+0x38>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08005554 	.word	0x08005554
 800071c:	08005564 	.word	0x08005564
 8000720:	200000a5 	.word	0x200000a5

08000724 <HandleAlarmMenuInput>:
/*****************************************************************************************************************
 * @brief: Manejo de la entrada del menú de alarma
 * @param: Recibe variable tipo caracter
 * @retval:
******************************************************************************************************************/
void HandleAlarmMenuInput(char key) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
    switch (key) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b32      	cmp	r3, #50	@ 0x32
 8000732:	d00d      	beq.n	8000750 <HandleAlarmMenuInput+0x2c>
 8000734:	2b32      	cmp	r3, #50	@ 0x32
 8000736:	dc35      	bgt.n	80007a4 <HandleAlarmMenuInput+0x80>
 8000738:	2b2a      	cmp	r3, #42	@ 0x2a
 800073a:	d011      	beq.n	8000760 <HandleAlarmMenuInput+0x3c>
 800073c:	2b31      	cmp	r3, #49	@ 0x31
 800073e:	d131      	bne.n	80007a4 <HandleAlarmMenuInput+0x80>
        case '1':  // Modo "Sistema Completo"
            includeMotionSensor = true;
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <HandleAlarmMenuInput+0x88>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000746:	491a      	ldr	r1, [pc, #104]	@ (80007b0 <HandleAlarmMenuInput+0x8c>)
 8000748:	481a      	ldr	r0, [pc, #104]	@ (80007b4 <HandleAlarmMenuInput+0x90>)
 800074a:	f000 f83b 	bl	80007c4 <RequestPassword>
            break;
 800074e:	e029      	b.n	80007a4 <HandleAlarmMenuInput+0x80>
        case '2':  // Modo "Sin Sensor de Movimiento"
            includeMotionSensor = false;
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <HandleAlarmMenuInput+0x88>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
            RequestPassword(ActivateAlarm, DisplayAlarmMenu);
 8000756:	4916      	ldr	r1, [pc, #88]	@ (80007b0 <HandleAlarmMenuInput+0x8c>)
 8000758:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <HandleAlarmMenuInput+0x90>)
 800075a:	f000 f833 	bl	80007c4 <RequestPassword>
            break;
 800075e:	e021      	b.n	80007a4 <HandleAlarmMenuInput+0x80>
        case '*':  // Si el usuario presiona "*", volver al menú principal
            lcd_clear();
 8000760:	f001 fa09 	bl	8001b76 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000764:	2100      	movs	r1, #0
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fa0f 	bl	8001b8a <lcd_set_cursor>
            lcd_print("Operacion");
 800076c:	4812      	ldr	r0, [pc, #72]	@ (80007b8 <HandleAlarmMenuInput+0x94>)
 800076e:	f001 fa26 	bl	8001bbe <lcd_print>
            lcd_set_cursor(1, 0);
 8000772:	2100      	movs	r1, #0
 8000774:	2001      	movs	r0, #1
 8000776:	f001 fa08 	bl	8001b8a <lcd_set_cursor>
            lcd_print("Cancelada");
 800077a:	4810      	ldr	r0, [pc, #64]	@ (80007bc <HandleAlarmMenuInput+0x98>)
 800077c:	f001 fa1f 	bl	8001bbe <lcd_print>
            //HAL_Delay(2000);			// Delay bloqueante necesario para muestreo de mensaje
            delayInit(&LCD_Muestro, 2000);
 8000780:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <HandleAlarmMenuInput+0x9c>)
 8000786:	f000 ff77 	bl	8001678 <delayInit>
            while(!delayRead(&LCD_Muestro)){
 800078a:	bf00      	nop
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <HandleAlarmMenuInput+0x9c>)
 800078e:	f000 ff87 	bl	80016a0 <delayRead>
 8000792:	4603      	mov	r3, r0
 8000794:	f083 0301 	eor.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f6      	bne.n	800078c <HandleAlarmMenuInput+0x68>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();  		// Volver al menú principal
 800079e:	f7ff ff69 	bl	8000674 <DisplayMainMenu>
            break;
 80007a2:	bf00      	nop
    }
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000a6 	.word	0x200000a6
 80007b0:	080006e9 	.word	0x080006e9
 80007b4:	08000991 	.word	0x08000991
 80007b8:	08005578 	.word	0x08005578
 80007bc:	08005584 	.word	0x08005584
 80007c0:	200000c8 	.word	0x200000c8

080007c4 <RequestPassword>:
/********************************************************************************************************************************
 * @brief: Solicitud de contraseña al usuario
 * @param: Recibe funciones, posibilidades: opc1 =(Activate Alarm, DisplayAlarmMenu), opc2= (DeactivateAlarm, IncorrectPassword)
 * @retval: void
********************************************************************************************************************************/
void RequestPassword(void (*onSuccess)(void), void (*onFailure)(void)) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    while (1) { // Bucle para reintentar si la contraseña es incorrecta
        lcd_clear();
 80007ce:	f001 f9d2 	bl	8001b76 <lcd_clear>
        lcd_set_cursor(0, 0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 f9d8 	bl	8001b8a <lcd_set_cursor>
        lcd_print("Contrasena:____");
 80007da:	4860      	ldr	r0, [pc, #384]	@ (800095c <RequestPassword+0x198>)
 80007dc:	f001 f9ef 	bl	8001bbe <lcd_print>
        memset(inputBuffer, 0, sizeof(inputBuffer));		// Re-incializa la variable en [0000]
 80007e0:	2205      	movs	r2, #5
 80007e2:	2100      	movs	r1, #0
 80007e4:	485e      	ldr	r0, [pc, #376]	@ (8000960 <RequestPassword+0x19c>)
 80007e6:	f004 fa11 	bl	8004c0c <memset>
        inputIndex = 0;
 80007ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000964 <RequestPassword+0x1a0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]

        //uint32_t startTime = HAL_GetTick();  // Guardar el tiempo de inicio
        delayInit(&DelayGRAL_1, 20000);
 80007f0:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80007f4:	485c      	ldr	r0, [pc, #368]	@ (8000968 <RequestPassword+0x1a4>)
 80007f6:	f000 ff3f 	bl	8001678 <delayInit>
        while (1) {

            if (delayRead(&DelayGRAL_1)) { 			// Si pasan más de 20 segundos sin entrada
 80007fa:	485b      	ldr	r0, [pc, #364]	@ (8000968 <RequestPassword+0x1a4>)
 80007fc:	f000 ff50 	bl	80016a0 <delayRead>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d021      	beq.n	800084a <RequestPassword+0x86>
                lcd_clear();
 8000806:	f001 f9b6 	bl	8001b76 <lcd_clear>
                lcd_set_cursor(0, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f001 f9bc 	bl	8001b8a <lcd_set_cursor>
                lcd_print("Tiempo agotado");
 8000812:	4856      	ldr	r0, [pc, #344]	@ (800096c <RequestPassword+0x1a8>)
 8000814:	f001 f9d3 	bl	8001bbe <lcd_print>
                lcd_set_cursor(1, 0);
 8000818:	2100      	movs	r1, #0
 800081a:	2001      	movs	r0, #1
 800081c:	f001 f9b5 	bl	8001b8a <lcd_set_cursor>
                lcd_print("Volviendo...");
 8000820:	4853      	ldr	r0, [pc, #332]	@ (8000970 <RequestPassword+0x1ac>)
 8000822:	f001 f9cc 	bl	8001bbe <lcd_print>

                //HAL_Delay(2000);				// Retardo bloqueante necesario para muestreo de mensaje
                delayInit(&LCD_Muestro, 2000);
 8000826:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800082a:	4852      	ldr	r0, [pc, #328]	@ (8000974 <RequestPassword+0x1b0>)
 800082c:	f000 ff24 	bl	8001678 <delayInit>
                while(!delayRead(&LCD_Muestro)){
 8000830:	bf00      	nop
 8000832:	4850      	ldr	r0, [pc, #320]	@ (8000974 <RequestPassword+0x1b0>)
 8000834:	f000 ff34 	bl	80016a0 <delayRead>
 8000838:	4603      	mov	r3, r0
 800083a:	f083 0301 	eor.w	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1f6      	bne.n	8000832 <RequestPassword+0x6e>
                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                DisplayMainMenu();  			// Volver al menú principal
 8000844:	f7ff ff16 	bl	8000674 <DisplayMainMenu>
                return;
 8000848:	e085      	b.n	8000956 <RequestPassword+0x192>
            }

            char key = keypad_get_key();
 800084a:	f001 fb73 	bl	8001f34 <keypad_get_key>
 800084e:	4603      	mov	r3, r0
 8000850:	73fb      	strb	r3, [r7, #15]

            if (key != '\0') {
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0d0      	beq.n	80007fa <RequestPassword+0x36>
                //startTime = HAL_GetTick();  // Reiniciar el temporizador // Estaria demas si se usa
            	delayInit(&DelayGRAL_1, 20000);
 8000858:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800085c:	4842      	ldr	r0, [pc, #264]	@ (8000968 <RequestPassword+0x1a4>)
 800085e:	f000 ff0b 	bl	8001678 <delayInit>
                if (key == '*') {  // Si presiona "*", vuelve al menú principal
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	2b2a      	cmp	r3, #42	@ 0x2a
 8000866:	d121      	bne.n	80008ac <RequestPassword+0xe8>
                    lcd_clear();
 8000868:	f001 f985 	bl	8001b76 <lcd_clear>
                    lcd_set_cursor(0, 0);
 800086c:	2100      	movs	r1, #0
 800086e:	2000      	movs	r0, #0
 8000870:	f001 f98b 	bl	8001b8a <lcd_set_cursor>
                    lcd_print("Operacion");
 8000874:	4840      	ldr	r0, [pc, #256]	@ (8000978 <RequestPassword+0x1b4>)
 8000876:	f001 f9a2 	bl	8001bbe <lcd_print>
                    lcd_set_cursor(1, 0);
 800087a:	2100      	movs	r1, #0
 800087c:	2001      	movs	r0, #1
 800087e:	f001 f984 	bl	8001b8a <lcd_set_cursor>
                    lcd_print("Cancelada");
 8000882:	483e      	ldr	r0, [pc, #248]	@ (800097c <RequestPassword+0x1b8>)
 8000884:	f001 f99b 	bl	8001bbe <lcd_print>
                    //HAL_Delay(2000);
                    delayInit(&LCD_Muestro, 2000);
 8000888:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800088c:	4839      	ldr	r0, [pc, #228]	@ (8000974 <RequestPassword+0x1b0>)
 800088e:	f000 fef3 	bl	8001678 <delayInit>
                    while(!delayRead(&LCD_Muestro)){
 8000892:	bf00      	nop
 8000894:	4837      	ldr	r0, [pc, #220]	@ (8000974 <RequestPassword+0x1b0>)
 8000896:	f000 ff03 	bl	80016a0 <delayRead>
 800089a:	4603      	mov	r3, r0
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1f6      	bne.n	8000894 <RequestPassword+0xd0>
                    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                    }
                    DisplayMainMenu();  // Volver al menú principal
 80008a6:	f7ff fee5 	bl	8000674 <DisplayMainMenu>
                    return;
 80008aa:	e054      	b.n	8000956 <RequestPassword+0x192>
                }

                if (key >= '0' && key <= '9' && inputIndex < 4) {
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80008b0:	d91c      	bls.n	80008ec <RequestPassword+0x128>
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	2b39      	cmp	r3, #57	@ 0x39
 80008b6:	d819      	bhi.n	80008ec <RequestPassword+0x128>
 80008b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <RequestPassword+0x1a0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d815      	bhi.n	80008ec <RequestPassword+0x128>
                    inputBuffer[inputIndex++] = key;
 80008c0:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <RequestPassword+0x1a0>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	b2d1      	uxtb	r1, r2
 80008c8:	4a26      	ldr	r2, [pc, #152]	@ (8000964 <RequestPassword+0x1a0>)
 80008ca:	7011      	strb	r1, [r2, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4a24      	ldr	r2, [pc, #144]	@ (8000960 <RequestPassword+0x19c>)
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	5453      	strb	r3, [r2, r1]
                    lcd_set_cursor(1, 10 + inputIndex - 1);
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <RequestPassword+0x1a0>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	3309      	adds	r3, #9
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	f001 f953 	bl	8001b8a <lcd_set_cursor>
                    lcd_print("*");
 80008e4:	4826      	ldr	r0, [pc, #152]	@ (8000980 <RequestPassword+0x1bc>)
 80008e6:	f001 f96a 	bl	8001bbe <lcd_print>
 80008ea:	e032      	b.n	8000952 <RequestPassword+0x18e>
                }else if (key == '#') { //  Cuando se presiona "#", verifica la clave
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	2b23      	cmp	r3, #35	@ 0x23
 80008f0:	d183      	bne.n	80007fa <RequestPassword+0x36>
                    inputBuffer[inputIndex] = '\0';
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <RequestPassword+0x1a0>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <RequestPassword+0x19c>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	5499      	strb	r1, [r3, r2]
                    if (strcmp(inputBuffer, currentPassword) == 0) {// strcmp compara 2 cadenas de caractares y devuelve un entero =0 si son iguales
 80008fe:	4921      	ldr	r1, [pc, #132]	@ (8000984 <RequestPassword+0x1c0>)
 8000900:	4817      	ldr	r0, [pc, #92]	@ (8000960 <RequestPassword+0x19c>)
 8000902:	f7ff fc8d 	bl	8000220 <strcmp>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <RequestPassword+0x14e>
                        onSuccess(); // Si la clave es correcta, sale de la función y retorna a la funcion ActivateAlarm
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4798      	blx	r3
                        return;
 8000910:	e021      	b.n	8000956 <RequestPassword+0x192>
                    } else {
                        //  Si la contraseña es incorrecta, mostrar mensaje y volver a pedirla
                        lcd_clear();
 8000912:	f001 f930 	bl	8001b76 <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f001 f936 	bl	8001b8a <lcd_set_cursor>
                        lcd_print("Contrasena");
 800091e:	481a      	ldr	r0, [pc, #104]	@ (8000988 <RequestPassword+0x1c4>)
 8000920:	f001 f94d 	bl	8001bbe <lcd_print>
                        lcd_set_cursor(1, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	2001      	movs	r0, #1
 8000928:	f001 f92f 	bl	8001b8a <lcd_set_cursor>
                        lcd_print("Incorrecta");
 800092c:	4817      	ldr	r0, [pc, #92]	@ (800098c <RequestPassword+0x1c8>)
 800092e:	f001 f946 	bl	8001bbe <lcd_print>
                        //HAL_Delay(2000);			// VERIFICAR FISICAMENTE EL TIEMPO NECESARIO...
                        delayInit(&LCD_Muestro, 2000);
 8000932:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <RequestPassword+0x1b0>)
 8000938:	f000 fe9e 	bl	8001678 <delayInit>
                        while(!delayRead(&LCD_Muestro)){
 800093c:	bf00      	nop
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <RequestPassword+0x1b0>)
 8000940:	f000 feae 	bl	80016a0 <delayRead>
 8000944:	4603      	mov	r3, r0
 8000946:	f083 0301 	eor.w	r3, r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1f6      	bne.n	800093e <RequestPassword+0x17a>
                        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        break;  //  Sale de este while pero vuelve al inicio del while externo dentro de RequestPassword
 8000950:	e000      	b.n	8000954 <RequestPassword+0x190>
        while (1) {
 8000952:	e752      	b.n	80007fa <RequestPassword+0x36>
        lcd_clear();
 8000954:	e73b      	b.n	80007ce <RequestPassword+0xa>
                    }
                }
            }
        }
    }
}
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	08005590 	.word	0x08005590
 8000960:	200000a8 	.word	0x200000a8
 8000964:	200000ad 	.word	0x200000ad
 8000968:	200000b0 	.word	0x200000b0
 800096c:	080055a0 	.word	0x080055a0
 8000970:	080055b0 	.word	0x080055b0
 8000974:	200000c8 	.word	0x200000c8
 8000978:	08005578 	.word	0x08005578
 800097c:	08005584 	.word	0x08005584
 8000980:	080055c0 	.word	0x080055c0
 8000984:	20000000 	.word	0x20000000
 8000988:	080055c4 	.word	0x080055c4
 800098c:	080055d0 	.word	0x080055d0

08000990 <ActivateAlarm>:
/*****************************************************************************************************************
 * @brief: Activar la alarma
 * @param: void
 * @retval: void
******************************************************************************************************************/
void ActivateAlarm() {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
    lcd_clear();
 8000996:	f001 f8ee 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 800099a:	2100      	movs	r1, #0
 800099c:	2000      	movs	r0, #0
 800099e:	f001 f8f4 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Alarma Activada");
 80009a2:	4833      	ldr	r0, [pc, #204]	@ (8000a70 <ActivateAlarm+0xe0>)
 80009a4:	f001 f90b 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 80009a8:	2100      	movs	r1, #0
 80009aa:	2001      	movs	r0, #1
 80009ac:	f001 f8ed 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Corran: 20 seg");
 80009b0:	4830      	ldr	r0, [pc, #192]	@ (8000a74 <ActivateAlarm+0xe4>)
 80009b2:	f001 f904 	bl	8001bbe <lcd_print>

    BT_SendMessage("⚠️ Alarma activada. Corran 20s... \r\n");
 80009b6:	4830      	ldr	r0, [pc, #192]	@ (8000a78 <ActivateAlarm+0xe8>)
 80009b8:	f000 fd84 	bl	80014c4 <BT_SendMessage>
            char buffer[3];
            sprintf(buffer, "%2lu", (unsigned long)remainingTime);
            lcd_print(buffer);
        }
    }*/
    uint32_t remainingTime = 20;
 80009bc:	2314      	movs	r3, #20
 80009be:	607b      	str	r3, [r7, #4]
    delayInit(&DelayGRAL_2, 1000);
 80009c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009c4:	482d      	ldr	r0, [pc, #180]	@ (8000a7c <ActivateAlarm+0xec>)
 80009c6:	f000 fe57 	bl	8001678 <delayInit>
    while (remainingTime > 0) {
 80009ca:	e01d      	b.n	8000a08 <ActivateAlarm+0x78>
            if (delayRead(&DelayGRAL_2)) {  // Espera 1 segundo antes de continuar
 80009cc:	482b      	ldr	r0, [pc, #172]	@ (8000a7c <ActivateAlarm+0xec>)
 80009ce:	f000 fe67 	bl	80016a0 <delayRead>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d017      	beq.n	8000a08 <ActivateAlarm+0x78>
                remainingTime--;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	607b      	str	r3, [r7, #4]

                lcd_set_cursor(1, 7);
 80009de:	2107      	movs	r1, #7
 80009e0:	2001      	movs	r0, #1
 80009e2:	f001 f8d2 	bl	8001b8a <lcd_set_cursor>
                lcd_print("   "); // Borra el número anterior
 80009e6:	4826      	ldr	r0, [pc, #152]	@ (8000a80 <ActivateAlarm+0xf0>)
 80009e8:	f001 f8e9 	bl	8001bbe <lcd_print>
                lcd_set_cursor(1, 7);
 80009ec:	2107      	movs	r1, #7
 80009ee:	2001      	movs	r0, #1
 80009f0:	f001 f8cb 	bl	8001b8a <lcd_set_cursor>
                char buffer[3];
                sprintf(buffer, "%2lu", (unsigned long)remainingTime);
 80009f4:	463b      	mov	r3, r7
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4922      	ldr	r1, [pc, #136]	@ (8000a84 <ActivateAlarm+0xf4>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 f8e6 	bl	8004bcc <siprintf>
                lcd_print(buffer);
 8000a00:	463b      	mov	r3, r7
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f8db 	bl	8001bbe <lcd_print>
    while (remainingTime > 0) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1de      	bne.n	80009cc <ActivateAlarm+0x3c>
            }
        }

/*******************************************************************************************************************/
    lcd_clear();
 8000a0e:	f001 f8b2 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000a12:	2100      	movs	r1, #0
 8000a14:	2000      	movs	r0, #0
 8000a16:	f001 f8b8 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Alarma");
 8000a1a:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <ActivateAlarm+0xf8>)
 8000a1c:	f001 f8cf 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	2001      	movs	r0, #1
 8000a24:	f001 f8b1 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Activa!");
 8000a28:	4818      	ldr	r0, [pc, #96]	@ (8000a8c <ActivateAlarm+0xfc>)
 8000a2a:	f001 f8c8 	bl	8001bbe <lcd_print>

    BT_SendMessage("🚨 Alarma activada! \r\n");
 8000a2e:	4818      	ldr	r0, [pc, #96]	@ (8000a90 <ActivateAlarm+0x100>)
 8000a30:	f000 fd48 	bl	80014c4 <BT_SendMessage>

    alarmActivated = true;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <ActivateAlarm+0x104>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
    currentState = ACTIVE_ALARM;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <ActivateAlarm+0x108>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	701a      	strb	r2, [r3, #0]

    enableSensorInterrupts();			// Habilitacion de interrupciones para pines GPIO correspondientes a los sensores
 8000a40:	f001 f822 	bl	8001a88 <enableSensorInterrupts>

    while (alarmActivated) {
 8000a44:	e00a      	b.n	8000a5c <ActivateAlarm+0xcc>
        char key = keypad_get_key();
 8000a46:	f001 fa75 	bl	8001f34 <keypad_get_key>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	70fb      	strb	r3, [r7, #3]
        if (key != '\0') {
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <ActivateAlarm+0xcc>
            CheckAlarmDeactivation(key);  // Nueva función para manejar la desactivación con temporizador
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fb36 	bl	80010c8 <CheckAlarmDeactivation>
    while (alarmActivated) {
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <ActivateAlarm+0x104>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f0      	bne.n	8000a46 <ActivateAlarm+0xb6>
        }
    }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	080055dc 	.word	0x080055dc
 8000a74:	080055ec 	.word	0x080055ec
 8000a78:	080055fc 	.word	0x080055fc
 8000a7c:	200000bc 	.word	0x200000bc
 8000a80:	08005628 	.word	0x08005628
 8000a84:	0800562c 	.word	0x0800562c
 8000a88:	08005634 	.word	0x08005634
 8000a8c:	0800563c 	.word	0x0800563c
 8000a90:	08005644 	.word	0x08005644
 8000a94:	200000ae 	.word	0x200000ae
 8000a98:	200000a5 	.word	0x200000a5

08000a9c <DeactivateAlarm>:
/*****************************************************************************************************************
 * @brief: Desactivar la alarma si la contraseña es correcta
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DeactivateAlarm(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    lcd_clear();
 8000aa0:	f001 f869 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f001 f86f 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Alarma");
 8000aac:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <DeactivateAlarm+0x64>)
 8000aae:	f001 f886 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f001 f868 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Desactivada");
 8000aba:	4812      	ldr	r0, [pc, #72]	@ (8000b04 <DeactivateAlarm+0x68>)
 8000abc:	f001 f87f 	bl	8001bbe <lcd_print>

    BT_SendMessage("✅ Alarma desactivada. Todo en orden. \r\n"); // Notificación de desactivación
 8000ac0:	4811      	ldr	r0, [pc, #68]	@ (8000b08 <DeactivateAlarm+0x6c>)
 8000ac2:	f000 fcff 	bl	80014c4 <BT_SendMessage>

    alarmActivated = false;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <DeactivateAlarm+0x70>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]

    // Asegurar que el buzzer(SIRENA) se apaga
    HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2120      	movs	r1, #32
 8000ad0:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <DeactivateAlarm+0x74>)
 8000ad2:	f001 fe4f 	bl	8002774 <HAL_GPIO_WritePin>

    disableSensorInterrupts(); // Deshabilita las interrupciones cuando se desactiva la alarma. Evita interrupciones innecesarias.
 8000ad6:	f000 ffde 	bl	8001a96 <disableSensorInterrupts>

    //HAL_Delay(2000);		// Delay referente al mensaje en pantalla "Alarma Desactivada"
    delayInit(&LCD_Muestro, 2000);
 8000ada:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000ade:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <DeactivateAlarm+0x78>)
 8000ae0:	f000 fdca 	bl	8001678 <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000ae4:	bf00      	nop
 8000ae6:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <DeactivateAlarm+0x78>)
 8000ae8:	f000 fdda 	bl	80016a0 <delayRead>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f083 0301 	eor.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1f6      	bne.n	8000ae6 <DeactivateAlarm+0x4a>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000af8:	f7ff fdbc 	bl	8000674 <DisplayMainMenu>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	08005634 	.word	0x08005634
 8000b04:	08005674 	.word	0x08005674
 8000b08:	08005680 	.word	0x08005680
 8000b0c:	200000ae 	.word	0x200000ae
 8000b10:	40020000 	.word	0x40020000
 8000b14:	200000c8 	.word	0x200000c8

08000b18 <IncorrectPassword>:
/*****************************************************************************************************************
 * @brief: Contraseña incorrecta: mensaje y reinicio de intento
 * @param: void
 * @retval: void
******************************************************************************************************************/
void IncorrectPassword(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    lcd_clear();
 8000b1c:	f001 f82b 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f001 f831 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Contrasena");
 8000b28:	481c      	ldr	r0, [pc, #112]	@ (8000b9c <IncorrectPassword+0x84>)
 8000b2a:	f001 f848 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2001      	movs	r0, #1
 8000b32:	f001 f82a 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Incorrecta");
 8000b36:	481a      	ldr	r0, [pc, #104]	@ (8000ba0 <IncorrectPassword+0x88>)
 8000b38:	f001 f841 	bl	8001bbe <lcd_print>
    //HAL_Delay(2000); 			// Mostrar mensaje durante 5 segundos
    delayInit(&LCD_Muestro, 5000);
 8000b3c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000b40:	4818      	ldr	r0, [pc, #96]	@ (8000ba4 <IncorrectPassword+0x8c>)
 8000b42:	f000 fd99 	bl	8001678 <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000b46:	bf00      	nop
 8000b48:	4816      	ldr	r0, [pc, #88]	@ (8000ba4 <IncorrectPassword+0x8c>)
 8000b4a:	f000 fda9 	bl	80016a0 <delayRead>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f083 0301 	eor.w	r3, r3, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1f6      	bne.n	8000b48 <IncorrectPassword+0x30>
*/
    // Iniciar temporizador de 31 segundos si aún no está activo
    static delay_t countdownDelay;  // Variable estática para mantener el estado del temporizador
    static bool countdownStarted = false;

    if (!countdownStarted) {
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <IncorrectPassword+0x90>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	f083 0301 	eor.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d007      	beq.n	8000b78 <IncorrectPassword+0x60>
        countdownStarted = true;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <IncorrectPassword+0x90>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
        delayInit(&countdownDelay, 31000); // Iniciar temporizador de 31 segundos
 8000b6e:	f647 1118 	movw	r1, #31000	@ 0x7918
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <IncorrectPassword+0x94>)
 8000b74:	f000 fd80 	bl	8001678 <delayInit>
    }

    // Solicitar nuevamente la contraseña
    lcd_clear();
 8000b78:	f000 fffd 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f001 f803 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Ingrese");
 8000b84:	480a      	ldr	r0, [pc, #40]	@ (8000bb0 <IncorrectPassword+0x98>)
 8000b86:	f001 f81a 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 fffc 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Contrasena:");
 8000b92:	4808      	ldr	r0, [pc, #32]	@ (8000bb4 <IncorrectPassword+0x9c>)
 8000b94:	f001 f813 	bl	8001bbe <lcd_print>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	080055c4 	.word	0x080055c4
 8000ba0:	080055d0 	.word	0x080055d0
 8000ba4:	200000c8 	.word	0x200000c8
 8000ba8:	200000d4 	.word	0x200000d4
 8000bac:	200000d8 	.word	0x200000d8
 8000bb0:	08005660 	.word	0x08005660
 8000bb4:	08005668 	.word	0x08005668

08000bb8 <AlarmTriggered>:
/*****************************************************************************************************************
 * @brief: Activar alarma sonora
 * @param: void
 * @retval: void
******************************************************************************************************************/
void AlarmTriggered(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    lcd_clear();
 8000bbe:	f000 ffda 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 ffe0 	bl	8001b8a <lcd_set_cursor>
    lcd_print("ALERTA!!!");
 8000bca:	4823      	ldr	r0, [pc, #140]	@ (8000c58 <AlarmTriggered+0xa0>)
 8000bcc:	f000 fff7 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f000 ffd9 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Ingrese clave");
 8000bd8:	4820      	ldr	r0, [pc, #128]	@ (8000c5c <AlarmTriggered+0xa4>)
 8000bda:	f000 fff0 	bl	8001bbe <lcd_print>

    BT_SendMessage("⚠️ Alarma activada! \r\n"); // Enviar mensaje por Bluetooth
 8000bde:	4820      	ldr	r0, [pc, #128]	@ (8000c60 <AlarmTriggered+0xa8>)
 8000be0:	f000 fc70 	bl	80014c4 <BT_SendMessage>

    //uint32_t lastToggleTime = HAL_GetTick();  // Tiempo de referencia para el buzzer

    while (alarmActivated) {
 8000be4:	e02a      	b.n	8000c3c <AlarmTriggered+0x84>
        // Alternar el buzzer cada 500 ms sin bloquear el sistema
        /*if (HAL_GetTick() - lastToggleTime >= 500) {
            lastToggleTime = HAL_GetTick();
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
        }*/
    	delayInit(&DelayGRAL_1, 500);
 8000be6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000bea:	481e      	ldr	r0, [pc, #120]	@ (8000c64 <AlarmTriggered+0xac>)
 8000bec:	f000 fd44 	bl	8001678 <delayInit>
    	if (delayRead(&DelayGRAL_1)){
 8000bf0:	481c      	ldr	r0, [pc, #112]	@ (8000c64 <AlarmTriggered+0xac>)
 8000bf2:	f000 fd55 	bl	80016a0 <delayRead>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d004      	beq.n	8000c06 <AlarmTriggered+0x4e>
    		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8000bfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c00:	4819      	ldr	r0, [pc, #100]	@ (8000c68 <AlarmTriggered+0xb0>)
 8000c02:	f001 fdd0 	bl	80027a6 <HAL_GPIO_TogglePin>
    	}

        // Permitir que el usuario intente apagar la alarma
        char key = keypad_get_key();
 8000c06:	f001 f995 	bl	8001f34 <keypad_get_key>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
        if (key != '\0') {
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <AlarmTriggered+0x64>
            RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000c14:	4915      	ldr	r1, [pc, #84]	@ (8000c6c <AlarmTriggered+0xb4>)
 8000c16:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <AlarmTriggered+0xb8>)
 8000c18:	f7ff fdd4 	bl	80007c4 <RequestPassword>
        }

        char btData;
                if (HAL_UART_Receive(&huart2, (uint8_t *)&btData, 1, 100) == HAL_OK) {
 8000c1c:	1db9      	adds	r1, r7, #6
 8000c1e:	2364      	movs	r3, #100	@ 0x64
 8000c20:	2201      	movs	r2, #1
 8000c22:	4814      	ldr	r0, [pc, #80]	@ (8000c74 <AlarmTriggered+0xbc>)
 8000c24:	f003 f80f 	bl	8003c46 <HAL_UART_Receive>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d106      	bne.n	8000c3c <AlarmTriggered+0x84>
                    if (btData == '#') {  // 🔹 Si recibe "#" por Bluetooth, intenta desactivar
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b23      	cmp	r3, #35	@ 0x23
 8000c32:	d103      	bne.n	8000c3c <AlarmTriggered+0x84>
                        RequestPassword(DeactivateAlarm, IncorrectPassword);
 8000c34:	490d      	ldr	r1, [pc, #52]	@ (8000c6c <AlarmTriggered+0xb4>)
 8000c36:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <AlarmTriggered+0xb8>)
 8000c38:	f7ff fdc4 	bl	80007c4 <RequestPassword>
    while (alarmActivated) {
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <AlarmTriggered+0xc0>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1d0      	bne.n	8000be6 <AlarmTriggered+0x2e>
                    }
                }
    }

    // Apagar el buzzer cuando la alarma se desactiva
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <AlarmTriggered+0xb0>)
 8000c4c:	f001 fd92 	bl	8002774 <HAL_GPIO_WritePin>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	080056ac 	.word	0x080056ac
 8000c5c:	080056b8 	.word	0x080056b8
 8000c60:	080056c8 	.word	0x080056c8
 8000c64:	200000b0 	.word	0x200000b0
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	08000b19 	.word	0x08000b19
 8000c70:	08000a9d 	.word	0x08000a9d
 8000c74:	200000f8 	.word	0x200000f8
 8000c78:	200000ae 	.word	0x200000ae

08000c7c <DisplayChangePassMenu>:
/*****************************************************************************************************************
 * @brief: Cambiar contraseña
 * @param: void
 * @retval: void
******************************************************************************************************************/
void DisplayChangePassMenu() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
    lcd_clear();
 8000c82:	f000 ff78 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 ff7e 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Contrasena");
 8000c8e:	481f      	ldr	r0, [pc, #124]	@ (8000d0c <DisplayChangePassMenu+0x90>)
 8000c90:	f000 ff95 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2001      	movs	r0, #1
 8000c98:	f000 ff77 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Actual:");
 8000c9c:	481c      	ldr	r0, [pc, #112]	@ (8000d10 <DisplayChangePassMenu+0x94>)
 8000c9e:	f000 ff8e 	bl	8001bbe <lcd_print>

    char key;
    while (1) {  // Bucle para capturar la tecla antes de solicitar la contraseña
        key = keypad_get_key();
 8000ca2:	f001 f947 	bl	8001f34 <keypad_get_key>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
        if (key == '*') {  //  Si el usuario presiona "*", volver al menú principal
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cae:	d121      	bne.n	8000cf4 <DisplayChangePassMenu+0x78>
            lcd_clear();
 8000cb0:	f000 ff61 	bl	8001b76 <lcd_clear>
            lcd_set_cursor(0, 0);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 ff67 	bl	8001b8a <lcd_set_cursor>
            lcd_print("Operacion");
 8000cbc:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <DisplayChangePassMenu+0x98>)
 8000cbe:	f000 ff7e 	bl	8001bbe <lcd_print>
            lcd_set_cursor(1, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 ff60 	bl	8001b8a <lcd_set_cursor>
            lcd_print("Cancelada");
 8000cca:	4813      	ldr	r0, [pc, #76]	@ (8000d18 <DisplayChangePassMenu+0x9c>)
 8000ccc:	f000 ff77 	bl	8001bbe <lcd_print>
            //HAL_Delay(2000);
            delayInit(&LCD_Muestro, 2000);
 8000cd0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000cd4:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <DisplayChangePassMenu+0xa0>)
 8000cd6:	f000 fccf 	bl	8001678 <delayInit>
            while(!delayRead(&LCD_Muestro)){
 8000cda:	bf00      	nop
 8000cdc:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <DisplayChangePassMenu+0xa0>)
 8000cde:	f000 fcdf 	bl	80016a0 <delayRead>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f083 0301 	eor.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f6      	bne.n	8000cdc <DisplayChangePassMenu+0x60>
            	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
            }
            DisplayMainMenu();  //  Volver al menú principal
 8000cee:	f7ff fcc1 	bl	8000674 <DisplayMainMenu>
            return;
 8000cf2:	e008      	b.n	8000d06 <DisplayChangePassMenu+0x8a>
        }
        if (key != '\0') {  // Si presiona otra tecla, salir del bucle y continuar con la contraseña
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d100      	bne.n	8000cfc <DisplayChangePassMenu+0x80>
        key = keypad_get_key();
 8000cfa:	e7d2      	b.n	8000ca2 <DisplayChangePassMenu+0x26>
            break;
 8000cfc:	bf00      	nop
        }
    }

    RequestPassword(ConfirmNewPassword, DisplayChangePassMenu);
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <DisplayChangePassMenu+0xa4>)
 8000d00:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <DisplayChangePassMenu+0xa8>)
 8000d02:	f7ff fd5f 	bl	80007c4 <RequestPassword>
}
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	080055c4 	.word	0x080055c4
 8000d10:	080056e4 	.word	0x080056e4
 8000d14:	08005578 	.word	0x08005578
 8000d18:	08005584 	.word	0x08005584
 8000d1c:	200000c8 	.word	0x200000c8
 8000d20:	08000c7d 	.word	0x08000c7d
 8000d24:	08000d29 	.word	0x08000d29

08000d28 <ConfirmNewPassword>:
/*****************************************************************************************************************
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
void ConfirmNewPassword() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
    lcd_clear();
 8000d2e:	f000 ff22 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000d32:	2100      	movs	r1, #0
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 ff28 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Nueva Clave:");
 8000d3a:	486e      	ldr	r0, [pc, #440]	@ (8000ef4 <ConfirmNewPassword+0x1cc>)
 8000d3c:	f000 ff3f 	bl	8001bbe <lcd_print>

    memset(inputBuffer, 0, sizeof(inputBuffer));
 8000d40:	2205      	movs	r2, #5
 8000d42:	2100      	movs	r1, #0
 8000d44:	486c      	ldr	r0, [pc, #432]	@ (8000ef8 <ConfirmNewPassword+0x1d0>)
 8000d46:	f003 ff61 	bl	8004c0c <memset>
    inputIndex = 0;
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8000efc <ConfirmNewPassword+0x1d4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
    //uint32_t startTime = HAL_GetTick();  // Tiempo de inicio para evitar bucles infinitos
    delayInit(&DelayGRAL_1, 20000);
 8000d50:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000d54:	486a      	ldr	r0, [pc, #424]	@ (8000f00 <ConfirmNewPassword+0x1d8>)
 8000d56:	f000 fc8f 	bl	8001678 <delayInit>
    //while (HAL_GetTick() - startTime < 20000) {  // Tiempo límite de 20 segundos
    while (delayRead(&DelayGRAL_1)) {  // Tiempo límite de 20 segundos
 8000d5a:	e09f      	b.n	8000e9c <ConfirmNewPassword+0x174>
        char key = keypad_get_key();
 8000d5c:	f001 f8ea 	bl	8001f34 <keypad_get_key>
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]

        if (key >= '0' && key <= '9' && inputIndex < 4) {
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d68:	d91c      	bls.n	8000da4 <ConfirmNewPassword+0x7c>
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b39      	cmp	r3, #57	@ 0x39
 8000d6e:	d819      	bhi.n	8000da4 <ConfirmNewPassword+0x7c>
 8000d70:	4b62      	ldr	r3, [pc, #392]	@ (8000efc <ConfirmNewPassword+0x1d4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d815      	bhi.n	8000da4 <ConfirmNewPassword+0x7c>
            inputBuffer[inputIndex++] = key;
 8000d78:	4b60      	ldr	r3, [pc, #384]	@ (8000efc <ConfirmNewPassword+0x1d4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	b2d1      	uxtb	r1, r2
 8000d80:	4a5e      	ldr	r2, [pc, #376]	@ (8000efc <ConfirmNewPassword+0x1d4>)
 8000d82:	7011      	strb	r1, [r2, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4a5c      	ldr	r2, [pc, #368]	@ (8000ef8 <ConfirmNewPassword+0x1d0>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	5453      	strb	r3, [r2, r1]
            lcd_set_cursor(1, inputIndex - 1);
 8000d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8000efc <ConfirmNewPassword+0x1d4>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fef7 	bl	8001b8a <lcd_set_cursor>
            lcd_print("*");
 8000d9c:	4859      	ldr	r0, [pc, #356]	@ (8000f04 <ConfirmNewPassword+0x1dc>)
 8000d9e:	f000 ff0e 	bl	8001bbe <lcd_print>
 8000da2:	e07b      	b.n	8000e9c <ConfirmNewPassword+0x174>
        } else if (key == '#') {
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b23      	cmp	r3, #35	@ 0x23
 8000da8:	d178      	bne.n	8000e9c <ConfirmNewPassword+0x174>
            if (inputIndex == 4) {  // Validar que la clave tenga 4 dígitos
 8000daa:	4b54      	ldr	r3, [pc, #336]	@ (8000efc <ConfirmNewPassword+0x1d4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d152      	bne.n	8000e58 <ConfirmNewPassword+0x130>
                inputBuffer[inputIndex] = '\0';
 8000db2:	4b52      	ldr	r3, [pc, #328]	@ (8000efc <ConfirmNewPassword+0x1d4>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef8 <ConfirmNewPassword+0x1d0>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	5499      	strb	r1, [r3, r2]
                strcpy(newPassword, inputBuffer);
 8000dbe:	494e      	ldr	r1, [pc, #312]	@ (8000ef8 <ConfirmNewPassword+0x1d0>)
 8000dc0:	4851      	ldr	r0, [pc, #324]	@ (8000f08 <ConfirmNewPassword+0x1e0>)
 8000dc2:	f003 ff57 	bl	8004c74 <strcpy>

                lcd_clear();
 8000dc6:	f000 fed6 	bl	8001b76 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 fedc 	bl	8001b8a <lcd_set_cursor>
                lcd_print("Confirmar: ");
 8000dd2:	484e      	ldr	r0, [pc, #312]	@ (8000f0c <ConfirmNewPassword+0x1e4>)
 8000dd4:	f000 fef3 	bl	8001bbe <lcd_print>
                lcd_set_cursor(1, 0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 fed5 	bl	8001b8a <lcd_set_cursor>
                lcd_print("*.Si   #.No");
 8000de0:	484b      	ldr	r0, [pc, #300]	@ (8000f10 <ConfirmNewPassword+0x1e8>)
 8000de2:	f000 feec 	bl	8001bbe <lcd_print>

                //uint32_t confirmStart = HAL_GetTick();
                //while (HAL_GetTick() - confirmStart < 10000) {  // Espera 10 segundos para confirmar
                delayInit(&DelayGRAL_2, 10000);
 8000de6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000dea:	484a      	ldr	r0, [pc, #296]	@ (8000f14 <ConfirmNewPassword+0x1ec>)
 8000dec:	f000 fc44 	bl	8001678 <delayInit>
                while(delayRead(&DelayGRAL_2)){
 8000df0:	e02b      	b.n	8000e4a <ConfirmNewPassword+0x122>
                    char confirmKey = keypad_get_key();
 8000df2:	f001 f89f 	bl	8001f34 <keypad_get_key>
 8000df6:	4603      	mov	r3, r0
 8000df8:	71bb      	strb	r3, [r7, #6]
                    if (confirmKey == '*') {
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dfe:	d11e      	bne.n	8000e3e <ConfirmNewPassword+0x116>
                        strcpy(currentPassword, newPassword);
 8000e00:	4941      	ldr	r1, [pc, #260]	@ (8000f08 <ConfirmNewPassword+0x1e0>)
 8000e02:	4845      	ldr	r0, [pc, #276]	@ (8000f18 <ConfirmNewPassword+0x1f0>)
 8000e04:	f003 ff36 	bl	8004c74 <strcpy>
                        lcd_clear();
 8000e08:	f000 feb5 	bl	8001b76 <lcd_clear>
                        lcd_set_cursor(0, 0);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 febb 	bl	8001b8a <lcd_set_cursor>
                        lcd_print("Clave Actualizada");
 8000e14:	4841      	ldr	r0, [pc, #260]	@ (8000f1c <ConfirmNewPassword+0x1f4>)
 8000e16:	f000 fed2 	bl	8001bbe <lcd_print>
                        //HAL_Delay(2000);
                        delayInit(&LCD_Muestro, 2000);
 8000e1a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e1e:	4840      	ldr	r0, [pc, #256]	@ (8000f20 <ConfirmNewPassword+0x1f8>)
 8000e20:	f000 fc2a 	bl	8001678 <delayInit>
                        while(!delayRead(&LCD_Muestro)){
 8000e24:	bf00      	nop
 8000e26:	483e      	ldr	r0, [pc, #248]	@ (8000f20 <ConfirmNewPassword+0x1f8>)
 8000e28:	f000 fc3a 	bl	80016a0 <delayRead>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f6      	bne.n	8000e26 <ConfirmNewPassword+0xfe>
                        	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                        }
                        DisplayMainMenu();
 8000e38:	f7ff fc1c 	bl	8000674 <DisplayMainMenu>
                        return;
 8000e3c:	e056      	b.n	8000eec <ConfirmNewPassword+0x1c4>
                    } else if (confirmKey == '#') {
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b23      	cmp	r3, #35	@ 0x23
 8000e42:	d102      	bne.n	8000e4a <ConfirmNewPassword+0x122>
                        ConfirmNewPassword();  // Volver a solicitar la clave
 8000e44:	f7ff ff70 	bl	8000d28 <ConfirmNewPassword>
                        return;
 8000e48:	e050      	b.n	8000eec <ConfirmNewPassword+0x1c4>
                while(delayRead(&DelayGRAL_2)){
 8000e4a:	4832      	ldr	r0, [pc, #200]	@ (8000f14 <ConfirmNewPassword+0x1ec>)
 8000e4c:	f000 fc28 	bl	80016a0 <delayRead>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1cd      	bne.n	8000df2 <ConfirmNewPassword+0xca>
 8000e56:	e021      	b.n	8000e9c <ConfirmNewPassword+0x174>
                    }
                }
            } else {
                lcd_clear();
 8000e58:	f000 fe8d 	bl	8001b76 <lcd_clear>
                lcd_set_cursor(0, 0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 fe93 	bl	8001b8a <lcd_set_cursor>
                lcd_print("Debe ser 4 ");
 8000e64:	482f      	ldr	r0, [pc, #188]	@ (8000f24 <ConfirmNewPassword+0x1fc>)
 8000e66:	f000 feaa 	bl	8001bbe <lcd_print>
                lcd_set_cursor(1, 0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 fe8c 	bl	8001b8a <lcd_set_cursor>
                lcd_print("digitos ");
 8000e72:	482d      	ldr	r0, [pc, #180]	@ (8000f28 <ConfirmNewPassword+0x200>)
 8000e74:	f000 fea3 	bl	8001bbe <lcd_print>
                //HAL_Delay(2000);
                delayInit(&LCD_Muestro, 2000);
 8000e78:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e7c:	4828      	ldr	r0, [pc, #160]	@ (8000f20 <ConfirmNewPassword+0x1f8>)
 8000e7e:	f000 fbfb 	bl	8001678 <delayInit>
                while(!delayRead(&LCD_Muestro)){
 8000e82:	bf00      	nop
 8000e84:	4826      	ldr	r0, [pc, #152]	@ (8000f20 <ConfirmNewPassword+0x1f8>)
 8000e86:	f000 fc0b 	bl	80016a0 <delayRead>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f6      	bne.n	8000e84 <ConfirmNewPassword+0x15c>
                	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
                }
                ConfirmNewPassword();  // Reiniciar el proceso
 8000e96:	f7ff ff47 	bl	8000d28 <ConfirmNewPassword>
                return;
 8000e9a:	e027      	b.n	8000eec <ConfirmNewPassword+0x1c4>
    while (delayRead(&DelayGRAL_1)) {  // Tiempo límite de 20 segundos
 8000e9c:	4818      	ldr	r0, [pc, #96]	@ (8000f00 <ConfirmNewPassword+0x1d8>)
 8000e9e:	f000 fbff 	bl	80016a0 <delayRead>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f af59 	bne.w	8000d5c <ConfirmNewPassword+0x34>
            }
        }
    }

    // Si el usuario no ingresa nada en 20 segundos, volver al menú principal
    lcd_clear();
 8000eaa:	f000 fe64 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 fe6a 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Tiempo ");
 8000eb6:	481d      	ldr	r0, [pc, #116]	@ (8000f2c <ConfirmNewPassword+0x204>)
 8000eb8:	f000 fe81 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 fe63 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Excedido ");
 8000ec4:	481a      	ldr	r0, [pc, #104]	@ (8000f30 <ConfirmNewPassword+0x208>)
 8000ec6:	f000 fe7a 	bl	8001bbe <lcd_print>
    //HAL_Delay(2000);
    delayInit(&LCD_Muestro, 2000);
 8000eca:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000ece:	4814      	ldr	r0, [pc, #80]	@ (8000f20 <ConfirmNewPassword+0x1f8>)
 8000ed0:	f000 fbd2 	bl	8001678 <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000ed4:	bf00      	nop
 8000ed6:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <ConfirmNewPassword+0x1f8>)
 8000ed8:	f000 fbe2 	bl	80016a0 <delayRead>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f083 0301 	eor.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f6      	bne.n	8000ed6 <ConfirmNewPassword+0x1ae>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8000ee8:	f7ff fbc4 	bl	8000674 <DisplayMainMenu>
}
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	080056ec 	.word	0x080056ec
 8000ef8:	200000a8 	.word	0x200000a8
 8000efc:	200000ad 	.word	0x200000ad
 8000f00:	200000b0 	.word	0x200000b0
 8000f04:	080055c0 	.word	0x080055c0
 8000f08:	200000a0 	.word	0x200000a0
 8000f0c:	080056fc 	.word	0x080056fc
 8000f10:	08005708 	.word	0x08005708
 8000f14:	200000bc 	.word	0x200000bc
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	08005714 	.word	0x08005714
 8000f20:	200000c8 	.word	0x200000c8
 8000f24:	08005728 	.word	0x08005728
 8000f28:	08005734 	.word	0x08005734
 8000f2c:	08005740 	.word	0x08005740
 8000f30:	08005748 	.word	0x08005748

08000f34 <HandleSubMenu>:
/*****************************************************************************************************************
 * @brief: Submenú "Más"
 * @param:
 * @retval:
******************************************************************************************************************/
void HandleSubMenu() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
    lcd_clear();
 8000f3a:	f000 fe1c 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fe22 	bl	8001b8a <lcd_set_cursor>
    lcd_print("#.Volver ");
 8000f46:	480f      	ldr	r0, [pc, #60]	@ (8000f84 <HandleSubMenu+0x50>)
 8000f48:	f000 fe39 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 fe1b 	bl	8001b8a <lcd_set_cursor>
    lcd_print("3.Prueba");
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <HandleSubMenu+0x54>)
 8000f56:	f000 fe32 	bl	8001bbe <lcd_print>

    while (1) {
        char key = keypad_get_key();
 8000f5a:	f000 ffeb 	bl	8001f34 <keypad_get_key>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]

        if (key != '\0') {
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f8      	beq.n	8000f5a <HandleSubMenu+0x26>
            if (key == '#') {
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b23      	cmp	r3, #35	@ 0x23
 8000f6c:	d102      	bne.n	8000f74 <HandleSubMenu+0x40>
                DisplayMainMenu();
 8000f6e:	f7ff fb81 	bl	8000674 <DisplayMainMenu>
                return;
 8000f72:	e004      	b.n	8000f7e <HandleSubMenu+0x4a>
            } else if (key == '3') {
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b33      	cmp	r3, #51	@ 0x33
 8000f78:	d1ef      	bne.n	8000f5a <HandleSubMenu+0x26>
                TestAlarm();
 8000f7a:	f000 f807 	bl	8000f8c <TestAlarm>
                return;
            }
        }
    }
}
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08005754 	.word	0x08005754
 8000f88:	08005760 	.word	0x08005760

08000f8c <TestAlarm>:
 * @brief:
 * @param:
 * @retval:
******************************************************************************************************************/
// Prueba de alarma
void TestAlarm() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    lcd_clear();
 8000f90:	f000 fdf1 	bl	8001b76 <lcd_clear>
    lcd_set_cursor(0, 0);
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fdf7 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Prueba de");
 8000f9c:	481b      	ldr	r0, [pc, #108]	@ (800100c <TestAlarm+0x80>)
 8000f9e:	f000 fe0e 	bl	8001bbe <lcd_print>
    lcd_set_cursor(1, 0);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 fdf0 	bl	8001b8a <lcd_set_cursor>
    lcd_print("Alarma...");
 8000faa:	4819      	ldr	r0, [pc, #100]	@ (8001010 <TestAlarm+0x84>)
 8000fac:	f000 fe07 	bl	8001bbe <lcd_print>

    // Activar el buzzer en PA13
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb6:	4817      	ldr	r0, [pc, #92]	@ (8001014 <TestAlarm+0x88>)
 8000fb8:	f001 fbdc 	bl	8002774 <HAL_GPIO_WritePin>
    //HAL_Delay(5000);  // Mantener el buzzer encendido 5 segundos
    delayInit(&LCD_Muestro, 5000);
 8000fbc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000fc0:	4815      	ldr	r0, [pc, #84]	@ (8001018 <TestAlarm+0x8c>)
 8000fc2:	f000 fb59 	bl	8001678 <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000fc6:	bf00      	nop
 8000fc8:	4813      	ldr	r0, [pc, #76]	@ (8001018 <TestAlarm+0x8c>)
 8000fca:	f000 fb69 	bl	80016a0 <delayRead>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f6      	bne.n	8000fc8 <TestAlarm+0x3c>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);  // Apagar buzzer
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <TestAlarm+0x88>)
 8000fe2:	f001 fbc7 	bl	8002774 <HAL_GPIO_WritePin>

    //HAL_Delay(1000);  // Pequeña pausa antes de volver al menú
    delayInit(&LCD_Muestro, 1000);
 8000fe6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <TestAlarm+0x8c>)
 8000fec:	f000 fb44 	bl	8001678 <delayInit>
    while(!delayRead(&LCD_Muestro)){
 8000ff0:	bf00      	nop
 8000ff2:	4809      	ldr	r0, [pc, #36]	@ (8001018 <TestAlarm+0x8c>)
 8000ff4:	f000 fb54 	bl	80016a0 <delayRead>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f6      	bne.n	8000ff2 <TestAlarm+0x66>
    	// Espacio para ejecutar tareas mientras muestra el mensaje anterior
    }
    DisplayMainMenu();
 8001004:	f7ff fb36 	bl	8000674 <DisplayMainMenu>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0800576c 	.word	0x0800576c
 8001010:	08005778 	.word	0x08005778
 8001014:	40020000 	.word	0x40020000
 8001018:	200000c8 	.word	0x200000c8

0800101c <CheckSensors>:
/*****************************************************************************************************************
 * @brief: Chequeo de sensores
 * @param: void
 * @retval: void
******************************************************************************************************************/
void CheckSensors(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    if (alarmActivated) {
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <CheckSensors+0x9c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d042      	beq.n	80010b0 <CheckSensors+0x94>
        // Verificar si se abre una puerta o ventana (sensor magnético)
        bool doorOpened = (HAL_GPIO_ReadPin(GPIOE, Sensor_Magnetico_1_Pin) == GPIO_PIN_RESET);
 800102a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800102e:	4823      	ldr	r0, [pc, #140]	@ (80010bc <CheckSensors+0xa0>)
 8001030:	f001 fb88 	bl	8002744 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	71bb      	strb	r3, [r7, #6]
        bool motionDetected = false;
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]

        // Solo verificar el sensor PIR si está activado en "Sist Completo"
        if (includeMotionSensor) {
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <CheckSensors+0xa4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d025      	beq.n	8001098 <CheckSensors+0x7c>
            motionDetected = HAL_GPIO_ReadPin(GPIOE, Sensor_PIR_Pin);
 800104c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001050:	481a      	ldr	r0, [pc, #104]	@ (80010bc <CheckSensors+0xa0>)
 8001052:	f001 fb77 	bl	8002744 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]

            // Filtro por software para evitar falsas detecciones
            //HAL_Delay(50);
            delayInit(&LCD_Muestro, 2000);
 8001062:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001066:	4817      	ldr	r0, [pc, #92]	@ (80010c4 <CheckSensors+0xa8>)
 8001068:	f000 fb06 	bl	8001678 <delayInit>
            while(!delayRead(&LCD_Muestro)){
 800106c:	bf00      	nop
 800106e:	4815      	ldr	r0, [pc, #84]	@ (80010c4 <CheckSensors+0xa8>)
 8001070:	f000 fb16 	bl	80016a0 <delayRead>
 8001074:	4603      	mov	r3, r0
 8001076:	f083 0301 	eor.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f6      	bne.n	800106e <CheckSensors+0x52>
            	// Espacio para ejecutar tareas mientras espera
            }
            if (HAL_GPIO_ReadPin(GPIOE, Sensor_PIR_Pin) != motionDetected) {
 8001080:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001084:	480d      	ldr	r0, [pc, #52]	@ (80010bc <CheckSensors+0xa0>)
 8001086:	f001 fb5d 	bl	8002744 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <CheckSensors+0x7c>
                motionDetected = false; // Ignorar si el estado cambió muy rápido
 8001094:	2300      	movs	r3, #0
 8001096:	71fb      	strb	r3, [r7, #7]
            }
        }
        // Evaluar si se debe activar la alarma
        if (doorOpened || (includeMotionSensor && motionDetected)) {
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <CheckSensors+0x90>
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <CheckSensors+0xa4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <CheckSensors+0x94>
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <CheckSensors+0x94>
            AlarmTriggered();
 80010ac:	f7ff fd84 	bl	8000bb8 <AlarmTriggered>
        }
    }
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000ae 	.word	0x200000ae
 80010bc:	40021000 	.word	0x40021000
 80010c0:	200000a6 	.word	0x200000a6
 80010c4:	200000c8 	.word	0x200000c8

080010c8 <CheckAlarmDeactivation>:
    // Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
    if (HAL_GetTick() - startTime >= 31000) {
        AlarmTriggered();
    }
}*/
void CheckAlarmDeactivation(char key) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    static delay_t countdownDelay;
    static bool countdownStarted = false;

    if (!countdownStarted) {
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <CheckAlarmDeactivation+0x48>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f083 0301 	eor.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <CheckAlarmDeactivation+0x28>
        countdownStarted = true;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <CheckAlarmDeactivation+0x48>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
        delayInit(&countdownDelay, 31000);  // Iniciar temporizador de 31 segundos
 80010e6:	f647 1118 	movw	r1, #31000	@ 0x7918
 80010ea:	480a      	ldr	r0, [pc, #40]	@ (8001114 <CheckAlarmDeactivation+0x4c>)
 80010ec:	f000 fac4 	bl	8001678 <delayInit>
    }

    RequestPassword(DeactivateAlarm, IncorrectPassword);
 80010f0:	4909      	ldr	r1, [pc, #36]	@ (8001118 <CheckAlarmDeactivation+0x50>)
 80010f2:	480a      	ldr	r0, [pc, #40]	@ (800111c <CheckAlarmDeactivation+0x54>)
 80010f4:	f7ff fb66 	bl	80007c4 <RequestPassword>

    // Si pasan 31 segundos sin ingresar la clave correcta, activar la alarma
    if (delayRead(&countdownDelay)) {
 80010f8:	4806      	ldr	r0, [pc, #24]	@ (8001114 <CheckAlarmDeactivation+0x4c>)
 80010fa:	f000 fad1 	bl	80016a0 <delayRead>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <CheckAlarmDeactivation+0x40>
        AlarmTriggered();
 8001104:	f7ff fd58 	bl	8000bb8 <AlarmTriggered>
    }
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200000e4 	.word	0x200000e4
 8001114:	200000e8 	.word	0x200000e8
 8001118:	08000b19 	.word	0x08000b19
 800111c:	08000a9d 	.word	0x08000a9d

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_MspInit+0x4c>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_MspInit+0x4c>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	@ 0x40
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_I2C_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12b      	bne.n	80011f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ba:	2303      	movs	r3, #3
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011be:	2312      	movs	r3, #18
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ca:	2304      	movs	r3, #4
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_I2C_MspInit+0x8c>)
 80011d6:	f001 f921 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40005800 	.word	0x40005800
 8001204:	40023800 	.word	0x40023800
 8001208:	40021400 	.word	0x40021400

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_UART_MspInit+0x94>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d133      	bne.n	8001296 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001266:	2360      	movs	r3, #96	@ 0x60
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001276:	2307      	movs	r3, #7
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <HAL_UART_MspInit+0x9c>)
 8001282:	f001 f8cb 	bl	800241c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2026      	movs	r0, #38	@ 0x26
 800128c:	f000 ffef 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001290:	2026      	movs	r0, #38	@ 0x26
 8001292:	f001 f808 	bl	80022a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	@ 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020c00 	.word	0x40020c00

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f000 fe71 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}

0800130a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 800130e:	2004      	movs	r0, #4
 8001310:	f001 fa64 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 800131c:	2010      	movs	r0, #16
 800131e:	f001 fa5d 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}

08001326 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 800132a:	2020      	movs	r0, #32
 800132c:	f001 fa56 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <USART2_IRQHandler+0x10>)
 800133a:	f002 fd1b 	bl	8003d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000f8 	.word	0x200000f8

08001348 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800134c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001350:	f001 fa44 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_2_Pin);
 8001354:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001358:	f001 fa40 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_3_Pin);
 800135c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001360:	f001 fa3c 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_PIR_Pin);
 8001364:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001368:	f001 fa38 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sensor_Magnetico_1_Pin);
 800136c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001370:	f001 fa34 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f003 fc38 	bl	8004c1c <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20050000 	.word	0x20050000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	200000f4 	.word	0x200000f4
 80013e0:	20000318 	.word	0x20000318

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001440 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800140c:	f7ff ffea 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001412:	490d      	ldr	r1, [pc, #52]	@ (8001448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001414:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001428:	4c0a      	ldr	r4, [pc, #40]	@ (8001454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001436:	f003 fbf7 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff f8d1 	bl	80005e0 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001440:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800144c:	08005800 	.word	0x08005800
  ldr r2, =_sbss
 8001450:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001454:	20000318 	.word	0x20000318

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <MX_USART2_UART_Init>:
 * @brief Inicializacion USART2 (Asincrona)
 * @param void
 * @retval void
******************************************************************************************************************/
void MX_USART2_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */
  huart2.Instance = USART2;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_USART2_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001468:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800146c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001494:	f002 fafc 	bl	8003a90 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f7ff fe3f 	bl	8001120 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200000f8 	.word	0x200000f8
 80014ac:	40004400 	.word	0x40004400

080014b0 <HAL_UART_TxCpltCallback>:
 * @brief Cuando se completa la transmision se puede realizar una tarea determinada
 * @param modulo UART
 * @retval void
******************************************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
		/*USER CODE BEGIN TxCpltCallback*/

		/*USER CODE END TxCpltCallback*/
	}
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <BT_SendMessage>:
/*****************************************************************************************************************
 * @brief: 	Enviar datos al HC-05
 * @param:
 * @retval:	void
******************************************************************************************************************/
void BT_SendMessage(char *message) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7fe feb1 	bl	8000234 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <BT_SendMessage+0x28>)
 80014de:	f002 fb27 	bl	8003b30 <HAL_UART_Transmit>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200000f8 	.word	0x200000f8

080014f0 <BT_Test>:
/*****************************************************************************************************************
 * @brief: Para probar si el STM32 está enviando datos correctamente al módulo Bluetooth HC-05
 * @param: void
 * @retval: void
******************************************************************************************************************/
void BT_Test() {
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
    char message[] = "✅ HC-05 conectado con STM32\r\n";
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <BT_Test+0x38>)
 80014f8:	463c      	mov	r4, r7
 80014fa:	461d      	mov	r5, r3
 80014fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001500:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001508:	463b      	mov	r3, r7
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe92 	bl	8000234 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	4639      	mov	r1, r7
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	4804      	ldr	r0, [pc, #16]	@ (800152c <BT_Test+0x3c>)
 800151c:	f002 fb08 	bl	8003b30 <HAL_UART_Transmit>
}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bdb0      	pop	{r4, r5, r7, pc}
 8001528:	08005784 	.word	0x08005784
 800152c:	200000f8 	.word	0x200000f8

08001530 <readKey>:
bool_t buttonRead;
delay_t debounceDelay;
//bool buttonRead = true;

/*Define functions -----------------------------------------------------------*/
bool_t readKey(void){																// Devuelve true si la tecla fue presionada
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
	bool_t keyPress = false;
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
	flanco_descendente = false;														// Re- inicializacion de la variable
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <readKey+0x30>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
	if(keyPressed){
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <readKey+0x34>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <readKey+0x22>
		keyPress = true;
 8001548:	2301      	movs	r3, #1
 800154a:	71fb      	strb	r3, [r7, #7]
		keyPressed = false; 														// Limpio estado de la variable para evitar lecturas repetidas
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <readKey+0x34>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	}
	return keyPress;																// Retorna True solo una vez por evento de flanco
 8001552:	79fb      	ldrb	r3, [r7, #7]
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000142 	.word	0x20000142
 8001564:	20000141 	.word	0x20000141

08001568 <debounceFSM_init>:

void debounceFSM_init(void)															// debe cargar el estado inicial
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	actualState = BUTTON_UP;
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <debounceFSM_init+0x24>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DEBOUNCE_DELAY);
 8001572:	2128      	movs	r1, #40	@ 0x28
 8001574:	4806      	ldr	r0, [pc, #24]	@ (8001590 <debounceFSM_init+0x28>)
 8001576:	f000 f87f 	bl	8001678 <delayInit>

	//Actualizar salida del estado inicial Leds off
	writeLedOff_GPIO(LD1_Pin|LD3_Pin|LD2_Pin);										// Inicializacion de todos los leds apagados
 800157a:	f244 0081 	movw	r0, #16513	@ 0x4081
 800157e:	f000 f8b9 	bl	80016f4 <writeLedOff_GPIO>
	buttonRead = true; 																// Boton de usuario no activado
 8001582:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <debounceFSM_init+0x2c>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000140 	.word	0x20000140
 8001590:	20000144 	.word	0x20000144
 8001594:	20000143 	.word	0x20000143

08001598 <debounceFSM_update>:

void debounceFSM_update(bool buttonRead){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	switch (actualState){
 80015a2:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <debounceFSM_update+0xd0>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d84f      	bhi.n	800164a <debounceFSM_update+0xb2>
 80015aa:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <debounceFSM_update+0x18>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015d5 	.word	0x080015d5
 80015b8:	08001603 	.word	0x08001603
 80015bc:	0800161d 	.word	0x0800161d
	case BUTTON_UP: 																// Estado inicial 0 | Actualizar salida del estado LEDs off
		if(buttonRead == true){ 													// Chequear condicion de transición | se presionó el boton?
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d044      	beq.n	8001650 <debounceFSM_update+0xb8>
			actualState = BUTTON_FALLING; 											// Pasa al estado siguiente
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <debounceFSM_update+0xd0>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY
 80015cc:	4827      	ldr	r0, [pc, #156]	@ (800166c <debounceFSM_update+0xd4>)
 80015ce:	f000 f867 	bl	80016a0 <delayRead>
		}
	break;
 80015d2:	e03d      	b.n	8001650 <debounceFSM_update+0xb8>

	case BUTTON_FALLING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 80015d4:	4825      	ldr	r0, [pc, #148]	@ (800166c <debounceFSM_update+0xd4>)
 80015d6:	f000 f863 	bl	80016a0 <delayRead>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d039      	beq.n	8001654 <debounceFSM_update+0xbc>
			//Chequear condicion de transición
			if(buttonRead == true){													// Se presionó boton de usuario
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <debounceFSM_update+0x62>
				keyPressed = true; 													// Indica tecla presionada luego de 2 lecturas en 40 ms
 80015e6:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <debounceFSM_update+0xd8>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
				flanco_descendente = true; 												// Asume que en este estado hubo un flanco decendente
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <debounceFSM_update+0xdc>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_DOWN; 											// Pasa al estado siguiente
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <debounceFSM_update+0xd0>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_UP; 											// Regresa al estado anterior
			}
		}
	break;
 80015f8:	e02c      	b.n	8001654 <debounceFSM_update+0xbc>
				actualState = BUTTON_UP; 											// Regresa al estado anterior
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <debounceFSM_update+0xd0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
	break;
 8001600:	e028      	b.n	8001654 <debounceFSM_update+0xbc>

	case BUTTON_DOWN:
		//Chequear condicion de transición
		if(buttonRead == false){ 													// Se presionó el boton?
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f083 0301 	eor.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d024      	beq.n	8001658 <debounceFSM_update+0xc0>
			actualState = BUTTON_RISING; 											// Pasa al estado siguiente Deteccion de flanco ascendente
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <debounceFSM_update+0xd0>)
 8001610:	2203      	movs	r2, #3
 8001612:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);   											// Arranca cuenta de DEBOUNCE_DELAY = 40ms
 8001614:	4815      	ldr	r0, [pc, #84]	@ (800166c <debounceFSM_update+0xd4>)
 8001616:	f000 f843 	bl	80016a0 <delayRead>
		}
	break;
 800161a:	e01d      	b.n	8001658 <debounceFSM_update+0xc0>

	case BUTTON_RISING:
		//Chequea si paso el tiempo de 40 ms
		if(delayRead(&debounceDelay)){
 800161c:	4813      	ldr	r0, [pc, #76]	@ (800166c <debounceFSM_update+0xd4>)
 800161e:	f000 f83f 	bl	80016a0 <delayRead>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d019      	beq.n	800165c <debounceFSM_update+0xc4>
			//Chequear condicion de transición
			if(buttonRead == false){												// El boton de usuario regresó a estado inactivo
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <debounceFSM_update+0xaa>
				keyPressed = false; 												// Indica tecla presionada luego de 2 lecturas en 40 ms
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <debounceFSM_update+0xd8>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_UP; 											// Pasa al estado siguiente, el inicial
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <debounceFSM_update+0xd0>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
			}
			else{
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
			}
		}
	break;
 8001640:	e00c      	b.n	800165c <debounceFSM_update+0xc4>
				actualState = BUTTON_DOWN; 											// Regresa al estado anterior
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <debounceFSM_update+0xd0>)
 8001644:	2202      	movs	r2, #2
 8001646:	701a      	strb	r2, [r3, #0]
	break;
 8001648:	e008      	b.n	800165c <debounceFSM_update+0xc4>

	default:
		Error_Handler();
 800164a:	f7ff fd69 	bl	8001120 <Error_Handler>
	break;
 800164e:	e006      	b.n	800165e <debounceFSM_update+0xc6>
	break;
 8001650:	bf00      	nop
 8001652:	e004      	b.n	800165e <debounceFSM_update+0xc6>
	break;
 8001654:	bf00      	nop
 8001656:	e002      	b.n	800165e <debounceFSM_update+0xc6>
	break;
 8001658:	bf00      	nop
 800165a:	e000      	b.n	800165e <debounceFSM_update+0xc6>
	break;
 800165c:	bf00      	nop
	}
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000140 	.word	0x20000140
 800166c:	20000144 	.word	0x20000144
 8001670:	20000141 	.word	0x20000141
 8001674:	20000142 	.word	0x20000142

08001678 <delayInit>:
 */

#include "main.h"
#include "API_Delay.h"

void delayInit(delay_t *delay, tick_t duration){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	delay->startTime=HAL_GetTick();
 8001682:	f000 fcc5 	bl	8002010 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
	delay->duration=duration;				//valor que tomara al definir el tiempo de espera
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	605a      	str	r2, [r3, #4]
	delay->running=false;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	721a      	strb	r2, [r3, #8]
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <delayRead>:
bool_t delayRead(delay_t *delay){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if(delay->running==false){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7a1b      	ldrb	r3, [r3, #8]
 80016ac:	f083 0301 	eor.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <delayRead+0x2a>
		delay->startTime=HAL_GetTick();
 80016b6:	f000 fcab 	bl	8002010 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	601a      	str	r2, [r3, #0]
		delay->running=true;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	721a      	strb	r2, [r3, #8]
		return false;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e00f      	b.n	80016ea <delayRead+0x4a>
	}
	if((HAL_GetTick()-delay->startTime)>=delay->duration){
 80016ca:	f000 fca1 	bl	8002010 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1ad2      	subs	r2, r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d304      	bcc.n	80016e8 <delayRead+0x48>
		delay->running=false;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	721a      	strb	r2, [r3, #8]
		return true;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <delayRead+0x4a>
	}
	return false;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <writeLedOff_GPIO>:
 * @brief Apagar LED GPIO
 * @param led_t LDx
 * @retval ninguno
 */

void writeLedOff_GPIO(led_t LDx){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_RESET);
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4803      	ldr	r0, [pc, #12]	@ (8001714 <writeLedOff_GPIO+0x20>)
 8001706:	f001 f835 	bl	8002774 <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020400 	.word	0x40020400

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	@ 0x50
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2234      	movs	r2, #52	@ 0x34
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fa70 	bl	8004c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <SystemClock_Config+0xd0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <SystemClock_Config+0xd0>)
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	@ 0x40
 800174c:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <SystemClock_Config+0xd0>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	2300      	movs	r3, #0
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <SystemClock_Config+0xd4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a22      	ldr	r2, [pc, #136]	@ (80017ec <SystemClock_Config+0xd4>)
 8001762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <SystemClock_Config+0xd4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001774:	2301      	movs	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001778:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800177c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	2302      	movs	r3, #2
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001782:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001788:	2308      	movs	r3, #8
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 800178c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001790:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001792:	2304      	movs	r3, #4
 8001794:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001796:	2308      	movs	r3, #8
 8001798:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800179a:	2302      	movs	r3, #2
 800179c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fef0 	bl	8003588 <HAL_RCC_OscConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017ae:	f7ff fcb7 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b2:	230f      	movs	r3, #15
 80017b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b6:	2302      	movs	r3, #2
 80017b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	2103      	movs	r1, #3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fcba 	bl	8003148 <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017da:	f7ff fca1 	bl	8001120 <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	@ 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	@ 0x38
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE(); // RCC Puerto E
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
 800180a:	4b97      	ldr	r3, [pc, #604]	@ (8001a68 <MX_GPIO_Init+0x278>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a96      	ldr	r2, [pc, #600]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b94      	ldr	r3, [pc, #592]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();	// RCC Puerto C
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	4b90      	ldr	r3, [pc, #576]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a8f      	ldr	r2, [pc, #572]	@ (8001a68 <MX_GPIO_Init+0x278>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b8d      	ldr	r3, [pc, #564]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();	// RCC Puerto F
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	4b89      	ldr	r3, [pc, #548]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a88      	ldr	r2, [pc, #544]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b86      	ldr	r3, [pc, #536]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE(); // RCC Puerto H
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b82      	ldr	r3, [pc, #520]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a81      	ldr	r2, [pc, #516]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a68 <MX_GPIO_Init+0x278>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();	// RCC Puerto A
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a68 <MX_GPIO_Init+0x278>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a7a      	ldr	r2, [pc, #488]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b78      	ldr	r3, [pc, #480]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE(); // RCC Puerto B
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b74      	ldr	r3, [pc, #464]	@ (8001a68 <MX_GPIO_Init+0x278>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a73      	ldr	r2, [pc, #460]	@ (8001a68 <MX_GPIO_Init+0x278>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b71      	ldr	r3, [pc, #452]	@ (8001a68 <MX_GPIO_Init+0x278>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();	// RCC Puerto D
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a68 <MX_GPIO_Init+0x278>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001a68 <MX_GPIO_Init+0x278>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <MX_GPIO_Init+0x278>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();	// RCC Puerto G
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b66      	ldr	r3, [pc, #408]	@ (8001a68 <MX_GPIO_Init+0x278>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a65      	ldr	r2, [pc, #404]	@ (8001a68 <MX_GPIO_Init+0x278>)
 80018d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b63      	ldr	r3, [pc, #396]	@ (8001a68 <MX_GPIO_Init+0x278>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R2_Pin|R1_Pin, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2148      	movs	r1, #72	@ 0x48
 80018ea:	4860      	ldr	r0, [pc, #384]	@ (8001a6c <MX_GPIO_Init+0x27c>)
 80018ec:	f000 ff42 	bl	8002774 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80018f6:	485e      	ldr	r0, [pc, #376]	@ (8001a70 <MX_GPIO_Init+0x280>)
 80018f8:	f000 ff3c 	bl	8002774 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sirena_GPIO_Port, Sirena_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2120      	movs	r1, #32
 8001900:	485c      	ldr	r0, [pc, #368]	@ (8001a74 <MX_GPIO_Init+0x284>)
 8001902:	f000 ff37 	bl	8002774 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f244 0181 	movw	r1, #16513	@ 0x4081
 800190c:	485a      	ldr	r0, [pc, #360]	@ (8001a78 <MX_GPIO_Init+0x288>)
 800190e:	f000 ff31 	bl	8002774 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Encendido_GPIO_Port, Led_Encendido_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001918:	4855      	ldr	r0, [pc, #340]	@ (8001a70 <MX_GPIO_Init+0x280>)
 800191a:	f000 ff2b 	bl	8002774 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Alerta_Pin|Led_Estado_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001924:	4851      	ldr	r0, [pc, #324]	@ (8001a6c <MX_GPIO_Init+0x27c>)
 8001926:	f000 ff25 	bl	8002774 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2140      	movs	r1, #64	@ 0x40
 800192e:	4853      	ldr	r0, [pc, #332]	@ (8001a7c <MX_GPIO_Init+0x28c>)
 8001930:	f000 ff20 	bl	8002774 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : R2_Pin R1_Pin Led_Alerta_Pin Led_Estado_Pin */
  GPIO_InitStruct.Pin = Led_Alerta_Pin|Led_Estado_Pin;
 8001934:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	4847      	ldr	r0, [pc, #284]	@ (8001a6c <MX_GPIO_Init+0x27c>)
 800194e:	f000 fd65 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001952:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001958:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	4845      	ldr	r0, [pc, #276]	@ (8001a80 <MX_GPIO_Init+0x290>)
 800196a:	f000 fd57 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pins : R4_Pin R3_Pin Led_Encendido_Pin */
  GPIO_InitStruct.Pin = Led_Encendido_Pin;
 800196e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	483a      	ldr	r0, [pc, #232]	@ (8001a70 <MX_GPIO_Init+0x280>)
 8001988:	f000 fd48 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pin : Sirena_Pin */
  GPIO_InitStruct.Pin = Sirena_Pin;
 800198c:	2320      	movs	r3, #32
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001994:	2302      	movs	r3, #2
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Sirena_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a0:	4619      	mov	r1, r3
 80019a2:	4834      	ldr	r0, [pc, #208]	@ (8001a74 <MX_GPIO_Init+0x284>)
 80019a4:	f000 fd3a 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pins : Sensor_PIR_Pin Sensor_Magnetico_1_Pin */
  GPIO_InitStruct.Pin = Sensor_PIR_Pin|Sensor_Magnetico_1_Pin;
 80019a8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	482b      	ldr	r0, [pc, #172]	@ (8001a6c <MX_GPIO_Init+0x27c>)
 80019c0:	f000 fd2c 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019c4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019da:	4619      	mov	r1, r3
 80019dc:	4826      	ldr	r0, [pc, #152]	@ (8001a78 <MX_GPIO_Init+0x288>)
 80019de:	f000 fd1d 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pin : Sensor_Magnetico_2_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_2_Pin;
 80019e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_2_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f6:	4619      	mov	r1, r3
 80019f8:	4822      	ldr	r0, [pc, #136]	@ (8001a84 <MX_GPIO_Init+0x294>)
 80019fa:	f000 fd0f 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pin : Sensor_Magnetico_3_Pin */
  GPIO_InitStruct.Pin = Sensor_Magnetico_3_Pin;
 80019fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Sensor_Magnetico_3_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a12:	4619      	mov	r1, r3
 8001a14:	481b      	ldr	r0, [pc, #108]	@ (8001a84 <MX_GPIO_Init+0x294>)
 8001a16:	f000 fd01 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a1a:	2340      	movs	r3, #64	@ 0x40
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4812      	ldr	r0, [pc, #72]	@ (8001a7c <MX_GPIO_Init+0x28c>)
 8001a32:	f000 fcf3 	bl	800241c <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <MX_GPIO_Init+0x28c>)
 8001a4a:	f000 fce7 	bl	800241c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2028      	movs	r0, #40	@ 0x28
 8001a54:	f000 fc0b 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a58:	2028      	movs	r0, #40	@ 0x28
 8001a5a:	f000 fc24 	bl	80022a6 <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5e:	bf00      	nop
 8001a60:	3738      	adds	r7, #56	@ 0x38
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00

08001a88 <enableSensorInterrupts>:
/*****************************************************************************************************************
 * @brief: Habilita las interrupciones en los pines GPIOs correspondientes a los sensores.
 * @param: void
 * @retval: void
******************************************************************************************************************/
void enableSensorInterrupts(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a8c:	2028      	movs	r0, #40	@ 0x28
 8001a8e:	f000 fc0a 	bl	80022a6 <HAL_NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <disableSensorInterrupts>:
/*****************************************************************************************************************
 * @brief: Deshabilita las interrupciones en los pines GPIOs correspondientes a los sensores.
 * @param: void
 * @retval: void
******************************************************************************************************************/
void disableSensorInterrupts(void) {
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001a9a:	2028      	movs	r0, #40	@ 0x28
 8001a9c:	f000 fc11 	bl	80022c2 <HAL_NVIC_DisableIRQ>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_GPIO_EXTI_Callback>:
 * @brief: Callback de interrupción de los pines GPIO.
 *         Maneja interrupciones del teclado matricial y los sensores de la alarma.
 * @param: GPIO_Pin - Pin GPIO que generó la interrupción.
 * @retval: void
******************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
    //Caso 1: Sensores de la alarma
    if (currentState == ACTIVE_ALARM) {  // Solo procesar interrupciones si la alarma está activada
 8001aae:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d119      	bne.n	8001aea <HAL_GPIO_EXTI_Callback+0x46>
        if (GPIO_Pin == Sensor_Magnetico_1_Pin ||
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_EXTI_Callback+0x2a>
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_EXTI_Callback+0x2a>
            GPIO_Pin == Sensor_Magnetico_2_Pin ||
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001acc:	d102      	bne.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x30>
            GPIO_Pin == Sensor_Magnetico_3_Pin) {
            AlarmTriggered();  // 🚨 Se detectó la apertura de una puerta o ventana
 8001ace:	f7ff f873 	bl	8000bb8 <AlarmTriggered>
            return;
 8001ad2:	e01b      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x68>
        }
        else if (GPIO_Pin == Sensor_PIR_Pin && includeMotionSensor) {
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ada:	d106      	bne.n	8001aea <HAL_GPIO_EXTI_Callback+0x46>
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_EXTI_Callback+0x46>
            AlarmTriggered();  // 🚨 Se detectó movimiento con el sensor PIR
 8001ae4:	f7ff f868 	bl	8000bb8 <AlarmTriggered>
            return;
 8001ae8:	e010      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x68>
        }
    }

    //Caso 2: Teclado matricial
    if (GPIO_Pin == C1_PIN || GPIO_Pin == C2_PIN || GPIO_Pin == C3_PIN) {
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d005      	beq.n	8001afc <HAL_GPIO_EXTI_Callback+0x58>
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d002      	beq.n	8001afc <HAL_GPIO_EXTI_Callback+0x58>
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d107      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x68>
        if (delayRead(&debounce_delay)) {  // Verifica debounce antes de escanear
 8001afc:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <HAL_GPIO_EXTI_Callback+0x78>)
 8001afe:	f7ff fdcf 	bl	80016a0 <delayRead>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_GPIO_EXTI_Callback+0x68>
            scan_keypad();  // Escanear teclado y agregar tecla al buffer
 8001b08:	f000 f9bc 	bl	8001e84 <scan_keypad>
        }
    }
}
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200000a5 	.word	0x200000a5
 8001b18:	200000a6 	.word	0x200000a6
 8001b1c:	200001c0 	.word	0x200001c0

08001b20 <lcd_init>:
/*****************************************************************************************************************
 * @brief: Inicializar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_init(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Tiempo de inicio según especificación HD44780
 8001b24:	2032      	movs	r0, #50	@ 0x32
 8001b26:	f000 fa7f 	bl	8002028 <HAL_Delay>
    lcd_send_command(0x30);
 8001b2a:	2030      	movs	r0, #48	@ 0x30
 8001b2c:	f000 f85c 	bl	8001be8 <lcd_send_command>
    HAL_Delay(5);
 8001b30:	2005      	movs	r0, #5
 8001b32:	f000 fa79 	bl	8002028 <HAL_Delay>
    lcd_send_command(0x30);
 8001b36:	2030      	movs	r0, #48	@ 0x30
 8001b38:	f000 f856 	bl	8001be8 <lcd_send_command>
    HAL_Delay(1);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f000 fa73 	bl	8002028 <HAL_Delay>
    lcd_send_command(0x30);
 8001b42:	2030      	movs	r0, #48	@ 0x30
 8001b44:	f000 f850 	bl	8001be8 <lcd_send_command>
    lcd_send_command(0x20); // Cambiar a modo 4 bits
 8001b48:	2020      	movs	r0, #32
 8001b4a:	f000 f84d 	bl	8001be8 <lcd_send_command>

    lcd_send_command(0x28); // Configuración: LCD 2 líneas, matriz 5x8
 8001b4e:	2028      	movs	r0, #40	@ 0x28
 8001b50:	f000 f84a 	bl	8001be8 <lcd_send_command>
    lcd_send_command(0x08); // Apagar display
 8001b54:	2008      	movs	r0, #8
 8001b56:	f000 f847 	bl	8001be8 <lcd_send_command>
    lcd_send_command(0x01); // Limpiar pantalla
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f000 f844 	bl	8001be8 <lcd_send_command>
    HAL_Delay(2);
 8001b60:	2002      	movs	r0, #2
 8001b62:	f000 fa61 	bl	8002028 <HAL_Delay>
    lcd_send_command(0x06); // Configurar modo de entrada
 8001b66:	2006      	movs	r0, #6
 8001b68:	f000 f83e 	bl	8001be8 <lcd_send_command>
    lcd_send_command(0x0C); // Encender display, cursor apagado
 8001b6c:	200c      	movs	r0, #12
 8001b6e:	f000 f83b 	bl	8001be8 <lcd_send_command>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <lcd_clear>:
/*****************************************************************************************************************
 * @brief: Limpiar la pantalla LCD
 * @param void
 * @retval void
******************************************************************************************************************/
void lcd_clear(void) {
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
    lcd_send_command(0x01); // Limpiar pantalla
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 f834 	bl	8001be8 <lcd_send_command>
    HAL_Delay(2);
 8001b80:	2002      	movs	r0, #2
 8001b82:	f000 fa51 	bl	8002028 <HAL_Delay>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <lcd_set_cursor>:
 * @brief: Posicionar el cursor en la pantalla LCD
 * @param row: Fila de la pantalla
 * @param col: Columna de la pantalla
 * @retval void
******************************************************************************************************************/
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	460a      	mov	r2, r1
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	4613      	mov	r3, r2
 8001b98:	71bb      	strb	r3, [r7, #6]
    uint8_t addresses[] = {0x80, 0xC0}; // Dirección DDRAM para la primera y segunda línea
 8001b9a:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8001b9e:	81bb      	strh	r3, [r7, #12]
    lcd_send_command(addresses[row] + col);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	3310      	adds	r3, #16
 8001ba4:	443b      	add	r3, r7
 8001ba6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	4413      	add	r3, r2
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f819 	bl	8001be8 <lcd_send_command>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <lcd_print>:
/*****************************************************************************************************************
 * @brief: Imprimir un texto en la pantalla LCD
 * @param str: Cadena de caracteres a imprimir
 * @retval void
******************************************************************************************************************/
void lcd_print(const char *str) {
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001bc6:	e006      	b.n	8001bd6 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f817 	bl	8001c04 <lcd_send_data>
    while (*str) {
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f4      	bne.n	8001bc8 <lcd_print+0xa>
    }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <lcd_send_command>:
/*****************************************************************************************************************
 * @brief: Enviar un comando a la pantalla LCD
 * @param cmd: Comando a enviar // entero de 8bits sin signo
 * @retval void
******************************************************************************************************************/
static void lcd_send_command(uint8_t cmd) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0x00);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f812 	bl	8001c20 <lcd_send>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <lcd_send_data>:
/*****************************************************************************************************************
 * @brief: Enviar un dato a la pantalla LCD
 * @param data: Dato a enviar // Entero sin signo de 8bits
 * @retval void
******************************************************************************************************************/
static void lcd_send_data(uint8_t data) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 0x01);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f804 	bl	8001c20 <lcd_send>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <lcd_send>:
 * @brief: Enviar datos a la pantalla LCD
 * @param value: Valor a enviar
 * @param mode: Modo de operación (comando o datos)
 * @retval void
******************************************************************************************************************/
static void lcd_send(uint8_t value, uint8_t mode) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
    lcd_control = lcd_backlight | mode;
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <lcd_send+0x40>)
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	79bb      	ldrb	r3, [r7, #6]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <lcd_send+0x44>)
 8001c3c:	701a      	strb	r2, [r3, #0]
    lcd_write_nibble(value & 0xF0);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f023 030f 	bic.w	r3, r3, #15
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f80e 	bl	8001c68 <lcd_write_nibble>
    lcd_write_nibble((value << 4) & 0xF0);
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f808 	bl	8001c68 <lcd_write_nibble>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000000c 	.word	0x2000000c
 8001c64:	200001a4 	.word	0x200001a4

08001c68 <lcd_write_nibble>:
/*****************************************************************************************************************
 * @brief: Escribir un nibble en la pantalla LCD
 * @param nibble: Parte alta o baja del byte a enviar
 * @retval void
******************************************************************************************************************/
static void lcd_write_nibble(uint8_t nibble) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    uint8_t data = nibble | lcd_control | 0x04; // Habilitar bit Enable
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <lcd_write_nibble+0x58>)
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001c84:	f107 020f 	add.w	r2, r7, #15
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	214e      	movs	r1, #78	@ 0x4e
 8001c92:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <lcd_write_nibble+0x5c>)
 8001c94:	f000 fefe 	bl	8002a94 <HAL_I2C_Master_Transmit>
    data &= ~0x04; // Deshabilitar bit Enable
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, &data, 1, HAL_MAX_DELAY);
 8001ca2:	f107 020f 	add.w	r2, r7, #15
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	214e      	movs	r1, #78	@ 0x4e
 8001cb0:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <lcd_write_nibble+0x5c>)
 8001cb2:	f000 feef 	bl	8002a94 <HAL_I2C_Master_Transmit>
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200001a4 	.word	0x200001a4
 8001cc4:	20000150 	.word	0x20000150

08001cc8 <MX_I2C2_Init>:
  * @param None
  * @retval None
  */
/******************************************************************************************************************/
void MX_I2C2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <MX_I2C2_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001cd4:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <MX_I2C2_Init+0x58>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_I2C2_Init+0x50>)
 8001d06:	f000 fd81 	bl	800280c <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f7ff fa06 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000150 	.word	0x20000150
 8001d1c:	40005800 	.word	0x40005800
 8001d20:	000186a0 	.word	0x000186a0

08001d24 <keypad_init>:
/***********************************************************************************************************************
 * @brief Inicializacion de los pines GPIOs / Habilita las interrupciones para las columnas / Inicializa las filas en 1
 * @param void
 * @retval void
************************************************************************************************************************/
void keypad_init(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]

    // Configuración de los pines de columna como entradas con interrupciones en flanco descendente
    GPIO_InitStruct.Pin = C1_PIN | C2_PIN | C3_PIN;
 8001d38:	2334      	movs	r3, #52	@ 0x34
 8001d3a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d3c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d40:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(C_PORT, &GPIO_InitStruct); // C_PORT = Puerto de Columnas correspondientes al puerto E (Confuso)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481c      	ldr	r0, [pc, #112]	@ (8001dbc <keypad_init+0x98>)
 8001d4c:	f000 fb66 	bl	800241c <HAL_GPIO_Init>

    // Configuración de los pines de fila como salidas push-pull
    GPIO_InitStruct.Pin = R1_PIN | R2_PIN | R3_PIN | R4_PIN;
 8001d50:	f44f 73e4 	mov.w	r3, #456	@ 0x1c8
 8001d54:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(R_PORT, &GPIO_InitStruct);
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4816      	ldr	r0, [pc, #88]	@ (8001dc0 <keypad_init+0x9c>)
 8001d68:	f000 fb58 	bl	800241c <HAL_GPIO_Init>

    // Inicialmente, todas las filas en estado ALTO
    HAL_GPIO_WritePin(R_PORT, R1_PIN | R2_PIN | R3_PIN | R4_PIN, GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8001d72:	4813      	ldr	r0, [pc, #76]	@ (8001dc0 <keypad_init+0x9c>)
 8001d74:	f000 fcfe 	bl	8002774 <HAL_GPIO_WritePin>

    // Habilitar interrupciones para las columnas
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2008      	movs	r0, #8
 8001d7e:	f000 fa76 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d82:	2008      	movs	r0, #8
 8001d84:	f000 fa8f 	bl	80022a6 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f000 fa6e 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d92:	200a      	movs	r0, #10
 8001d94:	f000 fa87 	bl	80022a6 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2017      	movs	r0, #23
 8001d9e:	f000 fa66 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001da2:	2017      	movs	r0, #23
 8001da4:	f000 fa7f 	bl	80022a6 <HAL_NVIC_EnableIRQ>

    // Inicialización del debounce y delay
    debounceFSM_init();
 8001da8:	f7ff fbde 	bl	8001568 <debounceFSM_init>
    delayInit(&debounce_delay, 40);
 8001dac:	2128      	movs	r1, #40	@ 0x28
 8001dae:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <keypad_init+0xa0>)
 8001db0:	f7ff fc62 	bl	8001678 <delayInit>
}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	200001c0 	.word	0x200001c0

08001dc8 <buffer_add>:
/*****************************************************************************************************************
 * @brief: Agrega una tecla al buffer
 * @param recibe variable tipo caracter para agregar al buffer
 * @retval void
******************************************************************************************************************/
static void buffer_add(char key) {
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
    key_buffer[buffer_head] = key;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <buffer_add+0x5c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4914      	ldr	r1, [pc, #80]	@ (8001e28 <buffer_add+0x60>)
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	54ca      	strb	r2, [r1, r3]
    buffer_head = (buffer_head + 1) % BUFFER_SIZE;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <buffer_add+0x5c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	425a      	negs	r2, r3
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	f002 020f 	and.w	r2, r2, #15
 8001dec:	bf58      	it	pl
 8001dee:	4253      	negpl	r3, r2
 8001df0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <buffer_add+0x5c>)
 8001df2:	6013      	str	r3, [r2, #0]
    if (buffer_head == buffer_tail) {
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <buffer_add+0x5c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <buffer_add+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10b      	bne.n	8001e18 <buffer_add+0x50>
        buffer_tail = (buffer_tail + 1) % BUFFER_SIZE; // Sobrescribe la tecla más antigua si el buffer está lleno
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <buffer_add+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	425a      	negs	r2, r3
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	f002 020f 	and.w	r2, r2, #15
 8001e10:	bf58      	it	pl
 8001e12:	4253      	negpl	r3, r2
 8001e14:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <buffer_add+0x64>)
 8001e16:	6013      	str	r3, [r2, #0]
    }
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	200001b8 	.word	0x200001b8
 8001e28:	200001a8 	.word	0x200001a8
 8001e2c:	200001bc 	.word	0x200001bc

08001e30 <buffer_get>:
/*****************************************************************************************************************
 * @brief: Obtiene una tecla del buffer
 * @param void
 * @retval Devuelve la tecla presionada
******************************************************************************************************************/
char buffer_get(void) {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
    if (buffer_head == buffer_tail) return 0; // Si el buffer está vacío
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <buffer_get+0x48>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <buffer_get+0x4c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d101      	bne.n	8001e46 <buffer_get+0x16>
 8001e42:	2300      	movs	r3, #0
 8001e44:	e011      	b.n	8001e6a <buffer_get+0x3a>
    char key = key_buffer[buffer_tail];
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <buffer_get+0x4c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e80 <buffer_get+0x50>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	71fb      	strb	r3, [r7, #7]
    buffer_tail = (buffer_tail + 1) % BUFFER_SIZE;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <buffer_get+0x4c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	425a      	negs	r2, r3
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	f002 020f 	and.w	r2, r2, #15
 8001e60:	bf58      	it	pl
 8001e62:	4253      	negpl	r3, r2
 8001e64:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <buffer_get+0x4c>)
 8001e66:	6013      	str	r3, [r2, #0]
    return key;
 8001e68:	79fb      	ldrb	r3, [r7, #7]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200001b8 	.word	0x200001b8
 8001e7c:	200001bc 	.word	0x200001bc
 8001e80:	200001a8 	.word	0x200001a8

08001e84 <scan_keypad>:
/*****************************************************************************************************************
 * @brief: Escanea el teclado y agrega teclas al buffer usando la FSM de debounce
 * @param: void
 * @retval: void
******************************************************************************************************************/
void scan_keypad(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
    for (int row = 0; row < ROWS; row++) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e03f      	b.n	8001f10 <scan_keypad+0x8c>
        HAL_GPIO_WritePin(R_PORT, row_pins[row], GPIO_PIN_RESET);
 8001e90:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <scan_keypad+0x9c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4821      	ldr	r0, [pc, #132]	@ (8001f24 <scan_keypad+0xa0>)
 8001e9e:	f000 fc69 	bl	8002774 <HAL_GPIO_WritePin>
        for (int col = 0; col < COLS; col++) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	e024      	b.n	8001ef2 <scan_keypad+0x6e>
            debounceFSM_update(HAL_GPIO_ReadPin(C_PORT, col_pins[col]));
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f28 <scan_keypad+0xa4>)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	481e      	ldr	r0, [pc, #120]	@ (8001f2c <scan_keypad+0xa8>)
 8001eb4:	f000 fc46 	bl	8002744 <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fb67 	bl	8001598 <debounceFSM_update>
            if (readKey()) { // Se detectó una pulsación estable
 8001eca:	f7ff fb31 	bl	8001530 <readKey>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <scan_keypad+0x68>
                buffer_add(keymap[row][col]);
 8001ed4:	4916      	ldr	r1, [pc, #88]	@ (8001f30 <scan_keypad+0xac>)
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	18ca      	adds	r2, r1, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff6e 	bl	8001dc8 <buffer_add>
        for (int col = 0; col < COLS; col++) {
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	ddd7      	ble.n	8001ea8 <scan_keypad+0x24>
            }
        }
        HAL_GPIO_WritePin(R_PORT, row_pins[row], GPIO_PIN_SET);
 8001ef8:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <scan_keypad+0x9c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f00:	2201      	movs	r2, #1
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <scan_keypad+0xa0>)
 8001f06:	f000 fc35 	bl	8002774 <HAL_GPIO_WritePin>
    for (int row = 0; row < ROWS; row++) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	ddbc      	ble.n	8001e90 <scan_keypad+0xc>
    }
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000001c 	.word	0x2000001c
 8001f24:	40021400 	.word	0x40021400
 8001f28:	20000024 	.word	0x20000024
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	20000010 	.word	0x20000010

08001f34 <keypad_get_key>:
/*****************************************************************************************************************
 * @brief: Obtiene una tecla del buffer
 * @param void
 * @retval void
******************************************************************************************************************/
char keypad_get_key(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    return buffer_get();
 8001f38:	f7ff ff7a 	bl	8001e30 <buffer_get>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <HAL_Init+0x40>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_Init+0x40>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <HAL_Init+0x40>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f000 f973 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f808 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f78:	f7ff f8d8 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_InitTick+0x54>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_InitTick+0x58>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f999 	bl	80022de <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f000 f953 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	@ (8001fe4 <HAL_InitTick+0x5c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000030 	.word	0x20000030
 8001fe4:	2000002c 	.word	0x2000002c

08001fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	@ (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000030 	.word	0x20000030
 800200c:	200001cc 	.word	0x200001cc

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200001cc 	.word	0x200001cc

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000030 	.word	0x20000030

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	@ (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db12      	blt.n	8002148 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	490a      	ldr	r1, [pc, #40]	@ (8002154 <__NVIC_DisableIRQ+0x44>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	3320      	adds	r3, #32
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800213c:	f3bf 8f4f 	dsb	sy
}
 8002140:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002142:	f3bf 8f6f 	isb	sy
}
 8002146:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	@ (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	@ (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff05 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff1a 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff8e 	bl	80021ac <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5d 	bl	8002158 <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff0d 	bl	80020d4 <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff1d 	bl	8002110 <__NVIC_DisableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff94 	bl	8002214 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fe84 	bl	8002010 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d008      	beq.n	8002328 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	@ 0x80
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e052      	b.n	80023ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0216 	bic.w	r2, r2, #22
 8002336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002346:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <HAL_DMA_Abort+0x62>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0208 	bic.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e013      	b.n	80023a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff fe49 	bl	8002010 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d90c      	bls.n	80023a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e015      	b.n	80023ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e4      	bne.n	800237a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	223f      	movs	r2, #63	@ 0x3f
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2280      	movs	r2, #128	@ 0x80
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00c      	b.n	800240e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e165      	b.n	8002704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8154 	bne.w	80026fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80ae 	beq.w	80026fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b5d      	ldr	r3, [pc, #372]	@ (800271c <HAL_GPIO_Init+0x300>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a5c      	ldr	r2, [pc, #368]	@ (800271c <HAL_GPIO_Init+0x300>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b5a      	ldr	r3, [pc, #360]	@ (800271c <HAL_GPIO_Init+0x300>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a58      	ldr	r2, [pc, #352]	@ (8002720 <HAL_GPIO_Init+0x304>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002724 <HAL_GPIO_Init+0x308>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d025      	beq.n	8002636 <HAL_GPIO_Init+0x21a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <HAL_GPIO_Init+0x216>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4d      	ldr	r2, [pc, #308]	@ (800272c <HAL_GPIO_Init+0x310>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x212>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002730 <HAL_GPIO_Init+0x314>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x20e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4b      	ldr	r2, [pc, #300]	@ (8002734 <HAL_GPIO_Init+0x318>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x20a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4a      	ldr	r2, [pc, #296]	@ (8002738 <HAL_GPIO_Init+0x31c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x206>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a49      	ldr	r2, [pc, #292]	@ (800273c <HAL_GPIO_Init+0x320>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x202>
 800261a:	2306      	movs	r3, #6
 800261c:	e00c      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 800261e:	2307      	movs	r3, #7
 8002620:	e00a      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002622:	2305      	movs	r3, #5
 8002624:	e008      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002626:	2304      	movs	r3, #4
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 800262a:	2303      	movs	r3, #3
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002636:	2300      	movs	r3, #0
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002648:	4935      	ldr	r1, [pc, #212]	@ (8002720 <HAL_GPIO_Init+0x304>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_GPIO_Init+0x324>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a31      	ldr	r2, [pc, #196]	@ (8002740 <HAL_GPIO_Init+0x324>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <HAL_GPIO_Init+0x324>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a26      	ldr	r2, [pc, #152]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026aa:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	f67f ae96 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40021400 	.word	0x40021400
 800273c:	40021800 	.word	0x40021800
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b8:	887a      	ldrh	r2, [r7, #2]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	041a      	lsls	r2, r3, #16
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	400b      	ands	r3, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027e6:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f2:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f952 	bl	8001aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e12b      	b.n	8002a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fca2 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2224      	movs	r2, #36	@ 0x24
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800285e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800286e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002870:	f000 fe62 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a81      	ldr	r2, [pc, #516]	@ (8002a80 <HAL_I2C_Init+0x274>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d807      	bhi.n	8002890 <HAL_I2C_Init+0x84>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a80      	ldr	r2, [pc, #512]	@ (8002a84 <HAL_I2C_Init+0x278>)
 8002884:	4293      	cmp	r3, r2
 8002886:	bf94      	ite	ls
 8002888:	2301      	movls	r3, #1
 800288a:	2300      	movhi	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e006      	b.n	800289e <HAL_I2C_Init+0x92>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a7d      	ldr	r2, [pc, #500]	@ (8002a88 <HAL_I2C_Init+0x27c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0e7      	b.n	8002a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a78      	ldr	r2, [pc, #480]	@ (8002a8c <HAL_I2C_Init+0x280>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9b      	lsrs	r3, r3, #18
 80028b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002a80 <HAL_I2C_Init+0x274>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d802      	bhi.n	80028e0 <HAL_I2C_Init+0xd4>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	e009      	b.n	80028f4 <HAL_I2C_Init+0xe8>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	4a69      	ldr	r2, [pc, #420]	@ (8002a90 <HAL_I2C_Init+0x284>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	099b      	lsrs	r3, r3, #6
 80028f2:	3301      	adds	r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002906:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	495c      	ldr	r1, [pc, #368]	@ (8002a80 <HAL_I2C_Init+0x274>)
 8002910:	428b      	cmp	r3, r1
 8002912:	d819      	bhi.n	8002948 <HAL_I2C_Init+0x13c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e59      	subs	r1, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002922:	1c59      	adds	r1, r3, #1
 8002924:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002928:	400b      	ands	r3, r1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_I2C_Init+0x138>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e59      	subs	r1, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fbb1 f3f3 	udiv	r3, r1, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002942:	e051      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 8002944:	2304      	movs	r3, #4
 8002946:	e04f      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_I2C_Init+0x168>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e012      	b.n	800299a <HAL_I2C_Init+0x18e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x196>
 800299e:	2301      	movs	r3, #1
 80029a0:	e022      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <HAL_I2C_Init+0x1bc>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e58      	subs	r0, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	440b      	add	r3, r1
 80029b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6809      	ldr	r1, [r1, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6911      	ldr	r1, [r2, #16]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	000186a0 	.word	0x000186a0
 8002a84:	001e847f 	.word	0x001e847f
 8002a88:	003d08ff 	.word	0x003d08ff
 8002a8c:	431bde83 	.word	0x431bde83
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	817b      	strh	r3, [r7, #10]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff fab2 	bl	8002010 <HAL_GetTick>
 8002aac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	f040 80e0 	bne.w	8002c7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2319      	movs	r3, #25
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4970      	ldr	r1, [pc, #448]	@ (8002c88 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f964 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0d3      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x50>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e0cc      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d007      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2221      	movs	r2, #33	@ 0x21
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2210      	movs	r2, #16
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	893a      	ldrh	r2, [r7, #8]
 8002b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a50      	ldr	r2, [pc, #320]	@ (8002c8c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b4c:	8979      	ldrh	r1, [r7, #10]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f89c 	bl	8002c90 <I2C_MasterRequestWrite>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e08d      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b78:	e066      	b.n	8002c48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fa22 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d107      	bne.n	8002ba2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06b      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d11b      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x188>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d017      	beq.n	8002c1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	6a39      	ldr	r1, [r7, #32]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fa19 	bl	8003058 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d107      	bne.n	8002c44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e01a      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d194      	bne.n	8002b7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	00100002 	.word	0x00100002
 8002c8c:	ffff0000 	.word	0xffff0000

08002c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d006      	beq.n	8002cba <I2C_MasterRequestWrite+0x2a>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d003      	beq.n	8002cba <I2C_MasterRequestWrite+0x2a>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb8:	d108      	bne.n	8002ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e00b      	b.n	8002ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d107      	bne.n	8002ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f84f 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d0a:	d103      	bne.n	8002d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e035      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d20:	d108      	bne.n	8002d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	e01b      	b.n	8002d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d34:	897b      	ldrh	r3, [r7, #10]
 8002d36:	11db      	asrs	r3, r3, #7
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0306 	and.w	r3, r3, #6
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f063 030f 	orn	r3, r3, #15
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	490e      	ldr	r1, [pc, #56]	@ (8002d8c <I2C_MasterRequestWrite+0xfc>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f898 	bl	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e010      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4907      	ldr	r1, [pc, #28]	@ (8002d90 <I2C_MasterRequestWrite+0x100>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f888 	bl	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	00010008 	.word	0x00010008
 8002d90:	00010002 	.word	0x00010002

08002d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da4:	e048      	b.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d044      	beq.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7ff f92f 	bl	8002010 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d139      	bne.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10d      	bne.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	e00c      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d116      	bne.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e023      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	e00c      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d093      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e96:	e071      	b.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea6:	d123      	bne.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e067      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d041      	beq.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7ff f88a 	bl	8002010 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d136      	bne.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10c      	bne.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e00b      	b.n	8002f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e021      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10c      	bne.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e00b      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af6d 	bne.w	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd4:	e034      	b.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f886 	bl	80030e8 <I2C_IsAcknowledgeFailed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e034      	b.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d028      	beq.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7ff f80f 	bl	8002010 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11d      	bne.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	2b80      	cmp	r3, #128	@ 0x80
 8003010:	d016      	beq.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e007      	b.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b80      	cmp	r3, #128	@ 0x80
 800304c:	d1c3      	bne.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	e034      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f83e 	bl	80030e8 <I2C_IsAcknowledgeFailed>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e034      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d028      	beq.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe ffc7 	bl	8002010 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11d      	bne.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d016      	beq.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d1c3      	bne.n	8003066 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fe:	d11b      	bne.n	8003138 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003108:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0cc      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800315c:	4b68      	ldr	r3, [pc, #416]	@ (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d90c      	bls.n	8003184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b65      	ldr	r3, [pc, #404]	@ (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b63      	ldr	r3, [pc, #396]	@ (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b8      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800319c:	4b59      	ldr	r3, [pc, #356]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b4:	4b53      	ldr	r3, [pc, #332]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a52      	ldr	r2, [pc, #328]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	494d      	ldr	r1, [pc, #308]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d044      	beq.n	8003268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b47      	ldr	r3, [pc, #284]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d119      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e07f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003202:	2b03      	cmp	r3, #3
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003206:	4b3f      	ldr	r3, [pc, #252]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003216:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e067      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003226:	4b37      	ldr	r3, [pc, #220]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 0203 	bic.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4934      	ldr	r1, [pc, #208]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003238:	f7fe feea 	bl	8002010 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	e00a      	b.n	8003256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003240:	f7fe fee6 	bl	8002010 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e04f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 020c 	and.w	r2, r3, #12
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	429a      	cmp	r2, r3
 8003266:	d1eb      	bne.n	8003240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003268:	4b25      	ldr	r3, [pc, #148]	@ (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d20c      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e032      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4916      	ldr	r1, [pc, #88]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ba:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	490e      	ldr	r1, [pc, #56]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ce:	f000 f821 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 80032d2:	4602      	mov	r2, r0
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	490a      	ldr	r1, [pc, #40]	@ (8003308 <HAL_RCC_ClockConfig+0x1c0>)
 80032e0:	5ccb      	ldrb	r3, [r1, r3]
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	4a09      	ldr	r2, [pc, #36]	@ (800330c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fe4a 	bl	8001f88 <HAL_InitTick>

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00
 8003304:	40023800 	.word	0x40023800
 8003308:	080057a4 	.word	0x080057a4
 800330c:	20000008 	.word	0x20000008
 8003310:	2000002c 	.word	0x2000002c

08003314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b094      	sub	sp, #80	@ 0x50
 800331a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800332c:	4b79      	ldr	r3, [pc, #484]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b08      	cmp	r3, #8
 8003336:	d00d      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x40>
 8003338:	2b08      	cmp	r3, #8
 800333a:	f200 80e1 	bhi.w	8003500 <HAL_RCC_GetSysClockFreq+0x1ec>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x34>
 8003342:	2b04      	cmp	r3, #4
 8003344:	d003      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x3a>
 8003346:	e0db      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003348:	4b73      	ldr	r3, [pc, #460]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x204>)
 800334a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800334c:	e0db      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800334e:	4b73      	ldr	r3, [pc, #460]	@ (800351c <HAL_RCC_GetSysClockFreq+0x208>)
 8003350:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003352:	e0d8      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003354:	4b6f      	ldr	r3, [pc, #444]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800335c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800335e:	4b6d      	ldr	r3, [pc, #436]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d063      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336a:	4b6a      	ldr	r3, [pc, #424]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	099b      	lsrs	r3, r3, #6
 8003370:	2200      	movs	r2, #0
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003374:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
 800337e:	2300      	movs	r3, #0
 8003380:	637b      	str	r3, [r7, #52]	@ 0x34
 8003382:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003386:	4622      	mov	r2, r4
 8003388:	462b      	mov	r3, r5
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	0159      	lsls	r1, r3, #5
 8003394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003398:	0150      	lsls	r0, r2, #5
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4621      	mov	r1, r4
 80033a0:	1a51      	subs	r1, r2, r1
 80033a2:	6139      	str	r1, [r7, #16]
 80033a4:	4629      	mov	r1, r5
 80033a6:	eb63 0301 	sbc.w	r3, r3, r1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b8:	4659      	mov	r1, fp
 80033ba:	018b      	lsls	r3, r1, #6
 80033bc:	4651      	mov	r1, sl
 80033be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c2:	4651      	mov	r1, sl
 80033c4:	018a      	lsls	r2, r1, #6
 80033c6:	4651      	mov	r1, sl
 80033c8:	ebb2 0801 	subs.w	r8, r2, r1
 80033cc:	4659      	mov	r1, fp
 80033ce:	eb63 0901 	sbc.w	r9, r3, r1
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e6:	4690      	mov	r8, r2
 80033e8:	4699      	mov	r9, r3
 80033ea:	4623      	mov	r3, r4
 80033ec:	eb18 0303 	adds.w	r3, r8, r3
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	462b      	mov	r3, r5
 80033f4:	eb49 0303 	adc.w	r3, r9, r3
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003406:	4629      	mov	r1, r5
 8003408:	024b      	lsls	r3, r1, #9
 800340a:	4621      	mov	r1, r4
 800340c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003410:	4621      	mov	r1, r4
 8003412:	024a      	lsls	r2, r1, #9
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003424:	f7fc ff64 	bl	80002f0 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003430:	e058      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003432:	4b38      	ldr	r3, [pc, #224]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	099b      	lsrs	r3, r3, #6
 8003438:	2200      	movs	r2, #0
 800343a:	4618      	mov	r0, r3
 800343c:	4611      	mov	r1, r2
 800343e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
 8003448:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800344c:	4642      	mov	r2, r8
 800344e:	464b      	mov	r3, r9
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	0159      	lsls	r1, r3, #5
 800345a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345e:	0150      	lsls	r0, r2, #5
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4641      	mov	r1, r8
 8003466:	ebb2 0a01 	subs.w	sl, r2, r1
 800346a:	4649      	mov	r1, r9
 800346c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800347c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003480:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003484:	ebb2 040a 	subs.w	r4, r2, sl
 8003488:	eb63 050b 	sbc.w	r5, r3, fp
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	00eb      	lsls	r3, r5, #3
 8003496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349a:	00e2      	lsls	r2, r4, #3
 800349c:	4614      	mov	r4, r2
 800349e:	461d      	mov	r5, r3
 80034a0:	4643      	mov	r3, r8
 80034a2:	18e3      	adds	r3, r4, r3
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	464b      	mov	r3, r9
 80034a8:	eb45 0303 	adc.w	r3, r5, r3
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ba:	4629      	mov	r1, r5
 80034bc:	028b      	lsls	r3, r1, #10
 80034be:	4621      	mov	r1, r4
 80034c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c4:	4621      	mov	r1, r4
 80034c6:	028a      	lsls	r2, r1, #10
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ce:	2200      	movs	r2, #0
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	61fa      	str	r2, [r7, #28]
 80034d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d8:	f7fc ff0a 	bl	80002f0 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4613      	mov	r3, r2
 80034e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	3301      	adds	r3, #1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80034f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034fe:	e002      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x204>)
 8003502:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003508:	4618      	mov	r0, r3
 800350a:	3750      	adds	r7, #80	@ 0x50
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	00f42400 	.word	0x00f42400
 800351c:	007a1200 	.word	0x007a1200

08003520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000008 	.word	0x20000008

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff0 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	080057b4 	.word	0x080057b4

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003564:	f7ff ffdc 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0b5b      	lsrs	r3, r3, #13
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	080057b4 	.word	0x080057b4

08003588 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e273      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d075      	beq.n	8003692 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035a6:	4b88      	ldr	r3, [pc, #544]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d00c      	beq.n	80035cc <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b85      	ldr	r3, [pc, #532]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d112      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035be:	4b82      	ldr	r3, [pc, #520]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	4b7e      	ldr	r3, [pc, #504]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05b      	beq.n	8003690 <HAL_RCC_OscConfig+0x108>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d157      	bne.n	8003690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e24e      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d106      	bne.n	80035fc <HAL_RCC_OscConfig+0x74>
 80035ee:	4b76      	ldr	r3, [pc, #472]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e01d      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x98>
 8003606:	4b70      	ldr	r3, [pc, #448]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6f      	ldr	r2, [pc, #444]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b6d      	ldr	r3, [pc, #436]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6c      	ldr	r2, [pc, #432]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 8003620:	4b69      	ldr	r3, [pc, #420]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a68      	ldr	r2, [pc, #416]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b66      	ldr	r3, [pc, #408]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a65      	ldr	r2, [pc, #404]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fce6 	bl	8002010 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fce2 	bl	8002010 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e213      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b5b      	ldr	r3, [pc, #364]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0xc0>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fcd2 	bl	8002010 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fcce 	bl	8002010 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1ff      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	4b51      	ldr	r3, [pc, #324]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0xe8>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d063      	beq.n	8003766 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800369e:	4b4a      	ldr	r3, [pc, #296]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b47      	ldr	r3, [pc, #284]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d11c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b6:	4b44      	ldr	r3, [pc, #272]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d116      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	4b41      	ldr	r3, [pc, #260]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e1d3      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036da:	4b3b      	ldr	r3, [pc, #236]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4937      	ldr	r1, [pc, #220]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	e03a      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f8:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_RCC_OscConfig+0x244>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fc87 	bl	8002010 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003706:	f7fe fc83 	bl	8002010 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e1b4      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4925      	ldr	r1, [pc, #148]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003734:	4313      	orrs	r3, r2
 8003736:	600b      	str	r3, [r1, #0]
 8003738:	e015      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	4b24      	ldr	r3, [pc, #144]	@ (80037cc <HAL_RCC_OscConfig+0x244>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fc66 	bl	8002010 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003748:	f7fe fc62 	bl	8002010 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e193      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d036      	beq.n	80037e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <HAL_RCC_OscConfig+0x248>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe fc46 	bl	8002010 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003788:	f7fe fc42 	bl	8002010 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e173      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_RCC_OscConfig+0x240>)
 800379c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x200>
 80037a6:	e01b      	b.n	80037e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a8:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_RCC_OscConfig+0x248>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fc2f 	bl	8002010 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	e00e      	b.n	80037d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fe fc2b 	bl	8002010 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d907      	bls.n	80037d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e15c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470000 	.word	0x42470000
 80037d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ea      	bne.n	80037b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8097 	beq.w	800391c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f2:	4b83      	ldr	r3, [pc, #524]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b7f      	ldr	r3, [pc, #508]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	4a7e      	ldr	r2, [pc, #504]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	@ 0x40
 800380e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b79      	ldr	r3, [pc, #484]	@ (8003a04 <HAL_RCC_OscConfig+0x47c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b76      	ldr	r3, [pc, #472]	@ (8003a04 <HAL_RCC_OscConfig+0x47c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a75      	ldr	r2, [pc, #468]	@ (8003a04 <HAL_RCC_OscConfig+0x47c>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fbeb 	bl	8002010 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fe fbe7 	bl	8002010 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e118      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b6c      	ldr	r3, [pc, #432]	@ (8003a04 <HAL_RCC_OscConfig+0x47c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x2ea>
 8003864:	4b66      	ldr	r3, [pc, #408]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	4a65      	ldr	r2, [pc, #404]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003870:	e01c      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x30c>
 800387a:	4b61      	ldr	r3, [pc, #388]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	4a60      	ldr	r2, [pc, #384]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	@ 0x70
 8003886:	4b5e      	ldr	r3, [pc, #376]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388a:	4a5d      	ldr	r2, [pc, #372]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	@ 0x70
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003894:	4b5a      	ldr	r3, [pc, #360]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	4a59      	ldr	r2, [pc, #356]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a0:	4b57      	ldr	r3, [pc, #348]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a4:	4a56      	ldr	r2, [pc, #344]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 80038a6:	f023 0304 	bic.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe fbac 	bl	8002010 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe fba8 	bl	8002010 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0d7      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0ee      	beq.n	80038bc <HAL_RCC_OscConfig+0x334>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fe fb96 	bl	8002010 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fe fb92 	bl	8002010 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0c1      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	4b40      	ldr	r3, [pc, #256]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ee      	bne.n	80038e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	4a3a      	ldr	r2, [pc, #232]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80ad 	beq.w	8003a80 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003926:	4b36      	ldr	r3, [pc, #216]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b08      	cmp	r3, #8
 8003930:	d060      	beq.n	80039f4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d145      	bne.n	80039c6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b33      	ldr	r3, [pc, #204]	@ (8003a08 <HAL_RCC_OscConfig+0x480>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe fb66 	bl	8002010 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fb62 	bl	8002010 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e093      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b29      	ldr	r3, [pc, #164]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	071b      	lsls	r3, r3, #28
 8003992:	491b      	ldr	r1, [pc, #108]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003998:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x480>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe fb37 	bl	8002010 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fb33 	bl	8002010 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e064      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x41e>
 80039c4:	e05c      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c6:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <HAL_RCC_OscConfig+0x480>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fb20 	bl	8002010 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fe fb1c 	bl	8002010 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04d      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <HAL_RCC_OscConfig+0x478>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x44c>
 80039f2:	e045      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e040      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40007000 	.word	0x40007000
 8003a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d030      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d129      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d122      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d119      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	3b01      	subs	r3, #1
 8003a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d10f      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800

08003a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e042      	b.n	8003b28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fba8 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	@ 0x24
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fdf5 	bl	80046c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	@ 0x28
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d175      	bne.n	8003c3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_UART_Transmit+0x2c>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e06e      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2221      	movs	r2, #33	@ 0x21
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b6e:	f7fe fa4f 	bl	8002010 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d108      	bne.n	8003b9c <HAL_UART_Transmit+0x6c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e003      	b.n	8003ba4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ba4:	e02e      	b.n	8003c04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2180      	movs	r1, #128	@ 0x80
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fb91 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e03a      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e007      	b.n	8003bf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1cb      	bne.n	8003ba6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	@ 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fb5d 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e006      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b08a      	sub	sp, #40	@ 0x28
 8003c4a:	af02      	add	r7, sp, #8
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	f040 8081 	bne.w	8003d6a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_UART_Receive+0x2e>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e079      	b.n	8003d6c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2222      	movs	r2, #34	@ 0x22
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8c:	f7fe f9c0 	bl	8002010 <HAL_GetTick>
 8003c90:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca6:	d108      	bne.n	8003cba <HAL_UART_Receive+0x74>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e003      	b.n	8003cc2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cc2:	e047      	b.n	8003d54 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2120      	movs	r1, #32
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fb02 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e042      	b.n	8003d6c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10c      	bne.n	8003d06 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	3302      	adds	r3, #2
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	e01f      	b.n	8003d46 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0e:	d007      	beq.n	8003d20 <HAL_UART_Receive+0xda>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <HAL_UART_Receive+0xe8>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e008      	b.n	8003d40 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	3301      	adds	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1b2      	bne.n	8003cc4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b0ba      	sub	sp, #232	@ 0xe8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_UART_IRQHandler+0x66>
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fbb8 	bl	8004548 <UART_Receive_IT>
      return;
 8003dd8:	e25b      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80de 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x22c>
 8003de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80d1 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_UART_IRQHandler+0xae>
 8003e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xd2>
 8003e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f043 0202 	orr.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xf6>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_UART_IRQHandler+0x126>
 8003e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0208 	orr.w	r2, r3, #8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 81f2 	beq.w	8004288 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x14e>
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fb43 	bl	8004548 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ecc:	2b40      	cmp	r3, #64	@ 0x40
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_UART_IRQHandler+0x17a>
 8003ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d04f      	beq.n	8003f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa4b 	bl	800438a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d141      	bne.n	8003f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1d9      	bne.n	8003f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d013      	beq.n	8003f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004154 <HAL_UART_IRQHandler+0x3e0>)
 8003f5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fa37 	bl	80023d6 <HAL_DMA_Abort_IT>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e00e      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f994 	bl	80042ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e00a      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f990 	bl	80042ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e006      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f98c 	bl	80042ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f9a:	e175      	b.n	8004288 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	bf00      	nop
    return;
 8003f9e:	e173      	b.n	8004288 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 814f 	bne.w	8004248 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8148 	beq.w	8004248 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8141 	beq.w	8004248 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	f040 80b6 	bne.w	8004158 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8145 	beq.w	800428c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800400a:	429a      	cmp	r2, r3
 800400c:	f080 813e 	bcs.w	800428c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004016:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004022:	f000 8088 	beq.w	8004136 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800403c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004052:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800405e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800406a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1d9      	bne.n	8004026 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004096:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800409a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800409e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e1      	bne.n	8004072 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3314      	adds	r3, #20
 80040ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e3      	bne.n	80040ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004106:	f023 0310 	bic.w	r3, r3, #16
 800410a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004118:	65ba      	str	r2, [r7, #88]	@ 0x58
 800411a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800411e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e3      	bne.n	80040f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe f8e0 	bl	80022f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004144:	b29b      	uxth	r3, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f8b7 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004152:	e09b      	b.n	800428c <HAL_UART_IRQHandler+0x518>
 8004154:	08004451 	.word	0x08004451
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004160:	b29b      	uxth	r3, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 808e 	beq.w	8004290 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8089 	beq.w	8004290 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004194:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3314      	adds	r3, #20
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	623b      	str	r3, [r7, #32]
   return(result);
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041da:	633a      	str	r2, [r7, #48]	@ 0x30
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e3      	bne.n	80041b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004220:	61fa      	str	r2, [r7, #28]
 8004222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	617b      	str	r3, [r7, #20]
   return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e3      	bne.n	80041fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f83d 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004246:	e023      	b.n	8004290 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_UART_IRQHandler+0x4f4>
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f909 	bl	8004478 <UART_Transmit_IT>
    return;
 8004266:	e014      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <HAL_UART_IRQHandler+0x51e>
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f949 	bl	8004518 <UART_EndTransmit_IT>
    return;
 8004286:	e004      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
    return;
 8004288:	bf00      	nop
 800428a:	e002      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
      return;
 800428c:	bf00      	nop
 800428e:	e000      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
      return;
 8004290:	bf00      	nop
  }
}
 8004292:	37e8      	adds	r7, #232	@ 0xe8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	e03b      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d037      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fd fe8d 	bl	8002010 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <UART_WaitOnFlagUntilTimeout+0x30>
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e03a      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d023      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x8a>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b80      	cmp	r3, #128	@ 0x80
 800431e:	d020      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b40      	cmp	r3, #64	@ 0x40
 8004324:	d01d      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d116      	bne.n	8004362 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f81d 	bl	800438a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2208      	movs	r2, #8
 8004354:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e00f      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	429a      	cmp	r2, r3
 800437e:	d0b4      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800438a:	b480      	push	{r7}
 800438c:	b095      	sub	sp, #84	@ 0x54
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80043b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3314      	adds	r3, #20
 80043cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3314      	adds	r3, #20
 80043e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e5      	bne.n	80043c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d119      	bne.n	8004436 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	60bb      	str	r3, [r7, #8]
   return(result);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f023 0310 	bic.w	r3, r3, #16
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004422:	61ba      	str	r2, [r7, #24]
 8004424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6979      	ldr	r1, [r7, #20]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	613b      	str	r3, [r7, #16]
   return(result);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e5      	bne.n	8004402 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004444:	bf00      	nop
 8004446:	3754      	adds	r7, #84	@ 0x54
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff1e 	bl	80042ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b21      	cmp	r3, #33	@ 0x21
 800448a:	d13e      	bne.n	800450a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004494:	d114      	bne.n	80044c0 <UART_Transmit_IT+0x48>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d110      	bne.n	80044c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	1c9a      	adds	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]
 80044be:	e008      	b.n	80044d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	1c59      	adds	r1, r3, #1
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6211      	str	r1, [r2, #32]
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	4619      	mov	r1, r3
 80044e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10f      	bne.n	8004506 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004504:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800452e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7fc ffb9 	bl	80014b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	@ 0x30
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b22      	cmp	r3, #34	@ 0x22
 800455a:	f040 80ae 	bne.w	80046ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	d117      	bne.n	8004598 <UART_Receive_IT+0x50>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d113      	bne.n	8004598 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	b29a      	uxth	r2, r3
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	629a      	str	r2, [r3, #40]	@ 0x28
 8004596:	e026      	b.n	80045e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045aa:	d007      	beq.n	80045bc <UART_Receive_IT+0x74>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <UART_Receive_IT+0x82>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e008      	b.n	80045dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d15d      	bne.n	80046b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0220 	bic.w	r2, r2, #32
 8004608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	2b01      	cmp	r3, #1
 800463e:	d135      	bne.n	80046ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	613b      	str	r3, [r7, #16]
   return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f023 0310 	bic.w	r3, r3, #16
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004666:	623a      	str	r2, [r7, #32]
 8004668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	69f9      	ldr	r1, [r7, #28]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	61bb      	str	r3, [r7, #24]
   return(result);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e5      	bne.n	8004646 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d10a      	bne.n	800469e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fe0b 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
 80046aa:	e002      	b.n	80046b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fdf3 	bl	8004298 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e002      	b.n	80046bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3730      	adds	r7, #48	@ 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c8:	b0c0      	sub	sp, #256	@ 0x100
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	68d9      	ldr	r1, [r3, #12]
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	ea40 0301 	orr.w	r3, r0, r1
 80046ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	431a      	orrs	r2, r3
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800471c:	f021 010c 	bic.w	r1, r1, #12
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800472a:	430b      	orrs	r3, r1
 800472c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473e:	6999      	ldr	r1, [r3, #24]
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	ea40 0301 	orr.w	r3, r0, r1
 800474a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b95      	ldr	r3, [pc, #596]	@ (80049a8 <UART_SetConfig+0x2e4>)
 8004754:	429a      	cmp	r2, r3
 8004756:	d011      	beq.n	800477c <UART_SetConfig+0xb8>
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4b93      	ldr	r3, [pc, #588]	@ (80049ac <UART_SetConfig+0x2e8>)
 8004760:	429a      	cmp	r2, r3
 8004762:	d00b      	beq.n	800477c <UART_SetConfig+0xb8>
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b91      	ldr	r3, [pc, #580]	@ (80049b0 <UART_SetConfig+0x2ec>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d005      	beq.n	800477c <UART_SetConfig+0xb8>
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b8f      	ldr	r3, [pc, #572]	@ (80049b4 <UART_SetConfig+0x2f0>)
 8004778:	429a      	cmp	r2, r3
 800477a:	d104      	bne.n	8004786 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7fe fef0 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8004780:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004784:	e003      	b.n	800478e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004786:	f7fe fed7 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 800478a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004798:	f040 8110 	bne.w	80049bc <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047b6:	415b      	adcs	r3, r3
 80047b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047be:	4621      	mov	r1, r4
 80047c0:	eb12 0801 	adds.w	r8, r2, r1
 80047c4:	4629      	mov	r1, r5
 80047c6:	eb43 0901 	adc.w	r9, r3, r1
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047de:	4690      	mov	r8, r2
 80047e0:	4699      	mov	r9, r3
 80047e2:	4623      	mov	r3, r4
 80047e4:	eb18 0303 	adds.w	r3, r8, r3
 80047e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047ec:	462b      	mov	r3, r5
 80047ee:	eb49 0303 	adc.w	r3, r9, r3
 80047f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004802:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800480a:	460b      	mov	r3, r1
 800480c:	18db      	adds	r3, r3, r3
 800480e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004810:	4613      	mov	r3, r2
 8004812:	eb42 0303 	adc.w	r3, r2, r3
 8004816:	657b      	str	r3, [r7, #84]	@ 0x54
 8004818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800481c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004820:	f7fb fd66 	bl	80002f0 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4b63      	ldr	r3, [pc, #396]	@ (80049b8 <UART_SetConfig+0x2f4>)
 800482a:	fba3 2302 	umull	r2, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	011c      	lsls	r4, r3, #4
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800483c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800484c:	415b      	adcs	r3, r3
 800484e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004854:	4641      	mov	r1, r8
 8004856:	eb12 0a01 	adds.w	sl, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb43 0b01 	adc.w	fp, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800486c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004874:	4692      	mov	sl, r2
 8004876:	469b      	mov	fp, r3
 8004878:	4643      	mov	r3, r8
 800487a:	eb1a 0303 	adds.w	r3, sl, r3
 800487e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004882:	464b      	mov	r3, r9
 8004884:	eb4b 0303 	adc.w	r3, fp, r3
 8004888:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004898:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800489c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048a0:	460b      	mov	r3, r1
 80048a2:	18db      	adds	r3, r3, r3
 80048a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a6:	4613      	mov	r3, r2
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048b6:	f7fb fd1b 	bl	80002f0 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	4b3d      	ldr	r3, [pc, #244]	@ (80049b8 <UART_SetConfig+0x2f4>)
 80048c2:	fba3 2301 	umull	r2, r3, r3, r1
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2264      	movs	r2, #100	@ 0x64
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	1acb      	subs	r3, r1, r3
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048d6:	4b38      	ldr	r3, [pc, #224]	@ (80049b8 <UART_SetConfig+0x2f4>)
 80048d8:	fba3 2302 	umull	r2, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048e4:	441c      	add	r4, r3
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004900:	415b      	adcs	r3, r3
 8004902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004908:	4641      	mov	r1, r8
 800490a:	1851      	adds	r1, r2, r1
 800490c:	6339      	str	r1, [r7, #48]	@ 0x30
 800490e:	4649      	mov	r1, r9
 8004910:	414b      	adcs	r3, r1
 8004912:	637b      	str	r3, [r7, #52]	@ 0x34
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004920:	4659      	mov	r1, fp
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4651      	mov	r1, sl
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4642      	mov	r2, r8
 8004936:	189b      	adds	r3, r3, r2
 8004938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800493c:	464b      	mov	r3, r9
 800493e:	460a      	mov	r2, r1
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004954:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800495c:	460b      	mov	r3, r1
 800495e:	18db      	adds	r3, r3, r3
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004962:	4613      	mov	r3, r2
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800496e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004972:	f7fb fcbd 	bl	80002f0 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <UART_SetConfig+0x2f4>)
 800497c:	fba3 1302 	umull	r1, r3, r3, r2
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	2164      	movs	r1, #100	@ 0x64
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	3332      	adds	r3, #50	@ 0x32
 800498e:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <UART_SetConfig+0x2f4>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	f003 0207 	and.w	r2, r3, #7
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a4:	e10a      	b.n	8004bbc <UART_SetConfig+0x4f8>
 80049a6:	bf00      	nop
 80049a8:	40011000 	.word	0x40011000
 80049ac:	40011400 	.word	0x40011400
 80049b0:	40011800 	.word	0x40011800
 80049b4:	40011c00 	.word	0x40011c00
 80049b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049ce:	4642      	mov	r2, r8
 80049d0:	464b      	mov	r3, r9
 80049d2:	1891      	adds	r1, r2, r2
 80049d4:	6239      	str	r1, [r7, #32]
 80049d6:	415b      	adcs	r3, r3
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049de:	4641      	mov	r1, r8
 80049e0:	1854      	adds	r4, r2, r1
 80049e2:	4649      	mov	r1, r9
 80049e4:	eb43 0501 	adc.w	r5, r3, r1
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	00eb      	lsls	r3, r5, #3
 80049f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f6:	00e2      	lsls	r2, r4, #3
 80049f8:	4614      	mov	r4, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	4643      	mov	r3, r8
 80049fe:	18e3      	adds	r3, r4, r3
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a04:	464b      	mov	r3, r9
 8004a06:	eb45 0303 	adc.w	r3, r5, r3
 8004a0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	008b      	lsls	r3, r1, #2
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a34:	4621      	mov	r1, r4
 8004a36:	008a      	lsls	r2, r1, #2
 8004a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a3c:	f7fb fc58 	bl	80002f0 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4b60      	ldr	r3, [pc, #384]	@ (8004bc8 <UART_SetConfig+0x504>)
 8004a46:	fba3 2302 	umull	r2, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	011c      	lsls	r4, r3, #4
 8004a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a60:	4642      	mov	r2, r8
 8004a62:	464b      	mov	r3, r9
 8004a64:	1891      	adds	r1, r2, r2
 8004a66:	61b9      	str	r1, [r7, #24]
 8004a68:	415b      	adcs	r3, r3
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a70:	4641      	mov	r1, r8
 8004a72:	1851      	adds	r1, r2, r1
 8004a74:	6139      	str	r1, [r7, #16]
 8004a76:	4649      	mov	r1, r9
 8004a78:	414b      	adcs	r3, r1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a88:	4659      	mov	r1, fp
 8004a8a:	00cb      	lsls	r3, r1, #3
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a92:	4651      	mov	r1, sl
 8004a94:	00ca      	lsls	r2, r1, #3
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004aba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ac8:	4649      	mov	r1, r9
 8004aca:	008b      	lsls	r3, r1, #2
 8004acc:	4641      	mov	r1, r8
 8004ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	008a      	lsls	r2, r1, #2
 8004ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ada:	f7fb fc09 	bl	80002f0 <__aeabi_uldivmod>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4b38      	ldr	r3, [pc, #224]	@ (8004bc8 <UART_SetConfig+0x504>)
 8004ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2264      	movs	r2, #100	@ 0x64
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	1acb      	subs	r3, r1, r3
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	3332      	adds	r3, #50	@ 0x32
 8004af8:	4a33      	ldr	r2, [pc, #204]	@ (8004bc8 <UART_SetConfig+0x504>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b04:	441c      	add	r4, r3
 8004b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	1891      	adds	r1, r2, r2
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	415b      	adcs	r3, r3
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b24:	4641      	mov	r1, r8
 8004b26:	1851      	adds	r1, r2, r1
 8004b28:	6039      	str	r1, [r7, #0]
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	414b      	adcs	r3, r1
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	00cb      	lsls	r3, r1, #3
 8004b40:	4651      	mov	r1, sl
 8004b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b46:	4651      	mov	r1, sl
 8004b48:	00ca      	lsls	r2, r1, #3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4642      	mov	r2, r8
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b56:	464b      	mov	r3, r9
 8004b58:	460a      	mov	r2, r1
 8004b5a:	eb42 0303 	adc.w	r3, r2, r3
 8004b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b78:	4649      	mov	r1, r9
 8004b7a:	008b      	lsls	r3, r1, #2
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b82:	4641      	mov	r1, r8
 8004b84:	008a      	lsls	r2, r1, #2
 8004b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b8a:	f7fb fbb1 	bl	80002f0 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <UART_SetConfig+0x504>)
 8004b94:	fba3 1302 	umull	r1, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	2164      	movs	r1, #100	@ 0x64
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	3332      	adds	r3, #50	@ 0x32
 8004ba6:	4a08      	ldr	r2, [pc, #32]	@ (8004bc8 <UART_SetConfig+0x504>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4422      	add	r2, r4
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc8:	51eb851f 	.word	0x51eb851f

08004bcc <siprintf>:
 8004bcc:	b40e      	push	{r1, r2, r3}
 8004bce:	b500      	push	{lr}
 8004bd0:	b09c      	sub	sp, #112	@ 0x70
 8004bd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bd4:	9002      	str	r0, [sp, #8]
 8004bd6:	9006      	str	r0, [sp, #24]
 8004bd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bdc:	4809      	ldr	r0, [pc, #36]	@ (8004c04 <siprintf+0x38>)
 8004bde:	9107      	str	r1, [sp, #28]
 8004be0:	9104      	str	r1, [sp, #16]
 8004be2:	4909      	ldr	r1, [pc, #36]	@ (8004c08 <siprintf+0x3c>)
 8004be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004be8:	9105      	str	r1, [sp, #20]
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	a902      	add	r1, sp, #8
 8004bf0:	f000 f99c 	bl	8004f2c <_svfiprintf_r>
 8004bf4:	9b02      	ldr	r3, [sp, #8]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	b01c      	add	sp, #112	@ 0x70
 8004bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c00:	b003      	add	sp, #12
 8004c02:	4770      	bx	lr
 8004c04:	20000034 	.word	0x20000034
 8004c08:	ffff0208 	.word	0xffff0208

08004c0c <memset>:
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d100      	bne.n	8004c16 <memset+0xa>
 8004c14:	4770      	bx	lr
 8004c16:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1a:	e7f9      	b.n	8004c10 <memset+0x4>

08004c1c <__errno>:
 8004c1c:	4b01      	ldr	r3, [pc, #4]	@ (8004c24 <__errno+0x8>)
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20000034 	.word	0x20000034

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c60 <__libc_init_array+0x38>)
 8004c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c64 <__libc_init_array+0x3c>)
 8004c2e:	1b64      	subs	r4, r4, r5
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	2600      	movs	r6, #0
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	4d0b      	ldr	r5, [pc, #44]	@ (8004c68 <__libc_init_array+0x40>)
 8004c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c6c <__libc_init_array+0x44>)
 8004c3c:	f000 fc6e 	bl	800551c <_init>
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	2600      	movs	r6, #0
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	080057f8 	.word	0x080057f8
 8004c64:	080057f8 	.word	0x080057f8
 8004c68:	080057f8 	.word	0x080057f8
 8004c6c:	080057fc 	.word	0x080057fc

08004c70 <__retarget_lock_acquire_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_release_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <strcpy>:
 8004c74:	4603      	mov	r3, r0
 8004c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c7a:	f803 2b01 	strb.w	r2, [r3], #1
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d1f9      	bne.n	8004c76 <strcpy+0x2>
 8004c82:	4770      	bx	lr

08004c84 <_free_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4605      	mov	r5, r0
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	d041      	beq.n	8004d10 <_free_r+0x8c>
 8004c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c90:	1f0c      	subs	r4, r1, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bfb8      	it	lt
 8004c96:	18e4      	addlt	r4, r4, r3
 8004c98:	f000 f8e0 	bl	8004e5c <__malloc_lock>
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d14 <_free_r+0x90>)
 8004c9e:	6813      	ldr	r3, [r2, #0]
 8004ca0:	b933      	cbnz	r3, 8004cb0 <_free_r+0x2c>
 8004ca2:	6063      	str	r3, [r4, #4]
 8004ca4:	6014      	str	r4, [r2, #0]
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cac:	f000 b8dc 	b.w	8004e68 <__malloc_unlock>
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d908      	bls.n	8004cc6 <_free_r+0x42>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	1821      	adds	r1, r4, r0
 8004cb8:	428b      	cmp	r3, r1
 8004cba:	bf01      	itttt	eq
 8004cbc:	6819      	ldreq	r1, [r3, #0]
 8004cbe:	685b      	ldreq	r3, [r3, #4]
 8004cc0:	1809      	addeq	r1, r1, r0
 8004cc2:	6021      	streq	r1, [r4, #0]
 8004cc4:	e7ed      	b.n	8004ca2 <_free_r+0x1e>
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b10b      	cbz	r3, 8004cd0 <_free_r+0x4c>
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	d9fa      	bls.n	8004cc6 <_free_r+0x42>
 8004cd0:	6811      	ldr	r1, [r2, #0]
 8004cd2:	1850      	adds	r0, r2, r1
 8004cd4:	42a0      	cmp	r0, r4
 8004cd6:	d10b      	bne.n	8004cf0 <_free_r+0x6c>
 8004cd8:	6820      	ldr	r0, [r4, #0]
 8004cda:	4401      	add	r1, r0
 8004cdc:	1850      	adds	r0, r2, r1
 8004cde:	4283      	cmp	r3, r0
 8004ce0:	6011      	str	r1, [r2, #0]
 8004ce2:	d1e0      	bne.n	8004ca6 <_free_r+0x22>
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	6053      	str	r3, [r2, #4]
 8004cea:	4408      	add	r0, r1
 8004cec:	6010      	str	r0, [r2, #0]
 8004cee:	e7da      	b.n	8004ca6 <_free_r+0x22>
 8004cf0:	d902      	bls.n	8004cf8 <_free_r+0x74>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	602b      	str	r3, [r5, #0]
 8004cf6:	e7d6      	b.n	8004ca6 <_free_r+0x22>
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	1821      	adds	r1, r4, r0
 8004cfc:	428b      	cmp	r3, r1
 8004cfe:	bf04      	itt	eq
 8004d00:	6819      	ldreq	r1, [r3, #0]
 8004d02:	685b      	ldreq	r3, [r3, #4]
 8004d04:	6063      	str	r3, [r4, #4]
 8004d06:	bf04      	itt	eq
 8004d08:	1809      	addeq	r1, r1, r0
 8004d0a:	6021      	streq	r1, [r4, #0]
 8004d0c:	6054      	str	r4, [r2, #4]
 8004d0e:	e7ca      	b.n	8004ca6 <_free_r+0x22>
 8004d10:	bd38      	pop	{r3, r4, r5, pc}
 8004d12:	bf00      	nop
 8004d14:	20000314 	.word	0x20000314

08004d18 <sbrk_aligned>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	4e0f      	ldr	r6, [pc, #60]	@ (8004d58 <sbrk_aligned+0x40>)
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	6831      	ldr	r1, [r6, #0]
 8004d20:	4605      	mov	r5, r0
 8004d22:	b911      	cbnz	r1, 8004d2a <sbrk_aligned+0x12>
 8004d24:	f000 fba6 	bl	8005474 <_sbrk_r>
 8004d28:	6030      	str	r0, [r6, #0]
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f000 fba1 	bl	8005474 <_sbrk_r>
 8004d32:	1c43      	adds	r3, r0, #1
 8004d34:	d103      	bne.n	8004d3e <sbrk_aligned+0x26>
 8004d36:	f04f 34ff 	mov.w	r4, #4294967295
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	1cc4      	adds	r4, r0, #3
 8004d40:	f024 0403 	bic.w	r4, r4, #3
 8004d44:	42a0      	cmp	r0, r4
 8004d46:	d0f8      	beq.n	8004d3a <sbrk_aligned+0x22>
 8004d48:	1a21      	subs	r1, r4, r0
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 fb92 	bl	8005474 <_sbrk_r>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d1f2      	bne.n	8004d3a <sbrk_aligned+0x22>
 8004d54:	e7ef      	b.n	8004d36 <sbrk_aligned+0x1e>
 8004d56:	bf00      	nop
 8004d58:	20000310 	.word	0x20000310

08004d5c <_malloc_r>:
 8004d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d60:	1ccd      	adds	r5, r1, #3
 8004d62:	f025 0503 	bic.w	r5, r5, #3
 8004d66:	3508      	adds	r5, #8
 8004d68:	2d0c      	cmp	r5, #12
 8004d6a:	bf38      	it	cc
 8004d6c:	250c      	movcc	r5, #12
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	4606      	mov	r6, r0
 8004d72:	db01      	blt.n	8004d78 <_malloc_r+0x1c>
 8004d74:	42a9      	cmp	r1, r5
 8004d76:	d904      	bls.n	8004d82 <_malloc_r+0x26>
 8004d78:	230c      	movs	r3, #12
 8004d7a:	6033      	str	r3, [r6, #0]
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e58 <_malloc_r+0xfc>
 8004d86:	f000 f869 	bl	8004e5c <__malloc_lock>
 8004d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d8e:	461c      	mov	r4, r3
 8004d90:	bb44      	cbnz	r4, 8004de4 <_malloc_r+0x88>
 8004d92:	4629      	mov	r1, r5
 8004d94:	4630      	mov	r0, r6
 8004d96:	f7ff ffbf 	bl	8004d18 <sbrk_aligned>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	d158      	bne.n	8004e52 <_malloc_r+0xf6>
 8004da0:	f8d8 4000 	ldr.w	r4, [r8]
 8004da4:	4627      	mov	r7, r4
 8004da6:	2f00      	cmp	r7, #0
 8004da8:	d143      	bne.n	8004e32 <_malloc_r+0xd6>
 8004daa:	2c00      	cmp	r4, #0
 8004dac:	d04b      	beq.n	8004e46 <_malloc_r+0xea>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	4639      	mov	r1, r7
 8004db2:	4630      	mov	r0, r6
 8004db4:	eb04 0903 	add.w	r9, r4, r3
 8004db8:	f000 fb5c 	bl	8005474 <_sbrk_r>
 8004dbc:	4581      	cmp	r9, r0
 8004dbe:	d142      	bne.n	8004e46 <_malloc_r+0xea>
 8004dc0:	6821      	ldr	r1, [r4, #0]
 8004dc2:	1a6d      	subs	r5, r5, r1
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7ff ffa6 	bl	8004d18 <sbrk_aligned>
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d03a      	beq.n	8004e46 <_malloc_r+0xea>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	442b      	add	r3, r5
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	bb62      	cbnz	r2, 8004e38 <_malloc_r+0xdc>
 8004dde:	f8c8 7000 	str.w	r7, [r8]
 8004de2:	e00f      	b.n	8004e04 <_malloc_r+0xa8>
 8004de4:	6822      	ldr	r2, [r4, #0]
 8004de6:	1b52      	subs	r2, r2, r5
 8004de8:	d420      	bmi.n	8004e2c <_malloc_r+0xd0>
 8004dea:	2a0b      	cmp	r2, #11
 8004dec:	d917      	bls.n	8004e1e <_malloc_r+0xc2>
 8004dee:	1961      	adds	r1, r4, r5
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	6025      	str	r5, [r4, #0]
 8004df4:	bf18      	it	ne
 8004df6:	6059      	strne	r1, [r3, #4]
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	bf08      	it	eq
 8004dfc:	f8c8 1000 	streq.w	r1, [r8]
 8004e00:	5162      	str	r2, [r4, r5]
 8004e02:	604b      	str	r3, [r1, #4]
 8004e04:	4630      	mov	r0, r6
 8004e06:	f000 f82f 	bl	8004e68 <__malloc_unlock>
 8004e0a:	f104 000b 	add.w	r0, r4, #11
 8004e0e:	1d23      	adds	r3, r4, #4
 8004e10:	f020 0007 	bic.w	r0, r0, #7
 8004e14:	1ac2      	subs	r2, r0, r3
 8004e16:	bf1c      	itt	ne
 8004e18:	1a1b      	subne	r3, r3, r0
 8004e1a:	50a3      	strne	r3, [r4, r2]
 8004e1c:	e7af      	b.n	8004d7e <_malloc_r+0x22>
 8004e1e:	6862      	ldr	r2, [r4, #4]
 8004e20:	42a3      	cmp	r3, r4
 8004e22:	bf0c      	ite	eq
 8004e24:	f8c8 2000 	streq.w	r2, [r8]
 8004e28:	605a      	strne	r2, [r3, #4]
 8004e2a:	e7eb      	b.n	8004e04 <_malloc_r+0xa8>
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	6864      	ldr	r4, [r4, #4]
 8004e30:	e7ae      	b.n	8004d90 <_malloc_r+0x34>
 8004e32:	463c      	mov	r4, r7
 8004e34:	687f      	ldr	r7, [r7, #4]
 8004e36:	e7b6      	b.n	8004da6 <_malloc_r+0x4a>
 8004e38:	461a      	mov	r2, r3
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	42a3      	cmp	r3, r4
 8004e3e:	d1fb      	bne.n	8004e38 <_malloc_r+0xdc>
 8004e40:	2300      	movs	r3, #0
 8004e42:	6053      	str	r3, [r2, #4]
 8004e44:	e7de      	b.n	8004e04 <_malloc_r+0xa8>
 8004e46:	230c      	movs	r3, #12
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f000 f80c 	bl	8004e68 <__malloc_unlock>
 8004e50:	e794      	b.n	8004d7c <_malloc_r+0x20>
 8004e52:	6005      	str	r5, [r0, #0]
 8004e54:	e7d6      	b.n	8004e04 <_malloc_r+0xa8>
 8004e56:	bf00      	nop
 8004e58:	20000314 	.word	0x20000314

08004e5c <__malloc_lock>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	@ (8004e64 <__malloc_lock+0x8>)
 8004e5e:	f7ff bf07 	b.w	8004c70 <__retarget_lock_acquire_recursive>
 8004e62:	bf00      	nop
 8004e64:	2000030c 	.word	0x2000030c

08004e68 <__malloc_unlock>:
 8004e68:	4801      	ldr	r0, [pc, #4]	@ (8004e70 <__malloc_unlock+0x8>)
 8004e6a:	f7ff bf02 	b.w	8004c72 <__retarget_lock_release_recursive>
 8004e6e:	bf00      	nop
 8004e70:	2000030c 	.word	0x2000030c

08004e74 <__ssputs_r>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	688e      	ldr	r6, [r1, #8]
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	42be      	cmp	r6, r7
 8004e7e:	680b      	ldr	r3, [r1, #0]
 8004e80:	4682      	mov	sl, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4690      	mov	r8, r2
 8004e86:	d82d      	bhi.n	8004ee4 <__ssputs_r+0x70>
 8004e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e90:	d026      	beq.n	8004ee0 <__ssputs_r+0x6c>
 8004e92:	6965      	ldr	r5, [r4, #20]
 8004e94:	6909      	ldr	r1, [r1, #16]
 8004e96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e9a:	eba3 0901 	sub.w	r9, r3, r1
 8004e9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ea2:	1c7b      	adds	r3, r7, #1
 8004ea4:	444b      	add	r3, r9
 8004ea6:	106d      	asrs	r5, r5, #1
 8004ea8:	429d      	cmp	r5, r3
 8004eaa:	bf38      	it	cc
 8004eac:	461d      	movcc	r5, r3
 8004eae:	0553      	lsls	r3, r2, #21
 8004eb0:	d527      	bpl.n	8004f02 <__ssputs_r+0x8e>
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f7ff ff52 	bl	8004d5c <_malloc_r>
 8004eb8:	4606      	mov	r6, r0
 8004eba:	b360      	cbz	r0, 8004f16 <__ssputs_r+0xa2>
 8004ebc:	6921      	ldr	r1, [r4, #16]
 8004ebe:	464a      	mov	r2, r9
 8004ec0:	f000 fae8 	bl	8005494 <memcpy>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	6126      	str	r6, [r4, #16]
 8004ed2:	6165      	str	r5, [r4, #20]
 8004ed4:	444e      	add	r6, r9
 8004ed6:	eba5 0509 	sub.w	r5, r5, r9
 8004eda:	6026      	str	r6, [r4, #0]
 8004edc:	60a5      	str	r5, [r4, #8]
 8004ede:	463e      	mov	r6, r7
 8004ee0:	42be      	cmp	r6, r7
 8004ee2:	d900      	bls.n	8004ee6 <__ssputs_r+0x72>
 8004ee4:	463e      	mov	r6, r7
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4641      	mov	r1, r8
 8004eec:	f000 faa8 	bl	8005440 <memmove>
 8004ef0:	68a3      	ldr	r3, [r4, #8]
 8004ef2:	1b9b      	subs	r3, r3, r6
 8004ef4:	60a3      	str	r3, [r4, #8]
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	4433      	add	r3, r6
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	2000      	movs	r0, #0
 8004efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f02:	462a      	mov	r2, r5
 8004f04:	f000 fad4 	bl	80054b0 <_realloc_r>
 8004f08:	4606      	mov	r6, r0
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d1e0      	bne.n	8004ed0 <__ssputs_r+0x5c>
 8004f0e:	6921      	ldr	r1, [r4, #16]
 8004f10:	4650      	mov	r0, sl
 8004f12:	f7ff feb7 	bl	8004c84 <_free_r>
 8004f16:	230c      	movs	r3, #12
 8004f18:	f8ca 3000 	str.w	r3, [sl]
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	e7e9      	b.n	8004efe <__ssputs_r+0x8a>
	...

08004f2c <_svfiprintf_r>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	4698      	mov	r8, r3
 8004f32:	898b      	ldrh	r3, [r1, #12]
 8004f34:	061b      	lsls	r3, r3, #24
 8004f36:	b09d      	sub	sp, #116	@ 0x74
 8004f38:	4607      	mov	r7, r0
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	d510      	bpl.n	8004f62 <_svfiprintf_r+0x36>
 8004f40:	690b      	ldr	r3, [r1, #16]
 8004f42:	b973      	cbnz	r3, 8004f62 <_svfiprintf_r+0x36>
 8004f44:	2140      	movs	r1, #64	@ 0x40
 8004f46:	f7ff ff09 	bl	8004d5c <_malloc_r>
 8004f4a:	6028      	str	r0, [r5, #0]
 8004f4c:	6128      	str	r0, [r5, #16]
 8004f4e:	b930      	cbnz	r0, 8004f5e <_svfiprintf_r+0x32>
 8004f50:	230c      	movs	r3, #12
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295
 8004f58:	b01d      	add	sp, #116	@ 0x74
 8004f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5e:	2340      	movs	r3, #64	@ 0x40
 8004f60:	616b      	str	r3, [r5, #20]
 8004f62:	2300      	movs	r3, #0
 8004f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f66:	2320      	movs	r3, #32
 8004f68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f70:	2330      	movs	r3, #48	@ 0x30
 8004f72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005110 <_svfiprintf_r+0x1e4>
 8004f76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f7a:	f04f 0901 	mov.w	r9, #1
 8004f7e:	4623      	mov	r3, r4
 8004f80:	469a      	mov	sl, r3
 8004f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f86:	b10a      	cbz	r2, 8004f8c <_svfiprintf_r+0x60>
 8004f88:	2a25      	cmp	r2, #37	@ 0x25
 8004f8a:	d1f9      	bne.n	8004f80 <_svfiprintf_r+0x54>
 8004f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f90:	d00b      	beq.n	8004faa <_svfiprintf_r+0x7e>
 8004f92:	465b      	mov	r3, fp
 8004f94:	4622      	mov	r2, r4
 8004f96:	4629      	mov	r1, r5
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f7ff ff6b 	bl	8004e74 <__ssputs_r>
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f000 80a7 	beq.w	80050f2 <_svfiprintf_r+0x1c6>
 8004fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fa6:	445a      	add	r2, fp
 8004fa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004faa:	f89a 3000 	ldrb.w	r3, [sl]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 809f 	beq.w	80050f2 <_svfiprintf_r+0x1c6>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fbe:	f10a 0a01 	add.w	sl, sl, #1
 8004fc2:	9304      	str	r3, [sp, #16]
 8004fc4:	9307      	str	r3, [sp, #28]
 8004fc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fca:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fcc:	4654      	mov	r4, sl
 8004fce:	2205      	movs	r2, #5
 8004fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd4:	484e      	ldr	r0, [pc, #312]	@ (8005110 <_svfiprintf_r+0x1e4>)
 8004fd6:	f7fb f93b 	bl	8000250 <memchr>
 8004fda:	9a04      	ldr	r2, [sp, #16]
 8004fdc:	b9d8      	cbnz	r0, 8005016 <_svfiprintf_r+0xea>
 8004fde:	06d0      	lsls	r0, r2, #27
 8004fe0:	bf44      	itt	mi
 8004fe2:	2320      	movmi	r3, #32
 8004fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fe8:	0711      	lsls	r1, r2, #28
 8004fea:	bf44      	itt	mi
 8004fec:	232b      	movmi	r3, #43	@ 0x2b
 8004fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ff8:	d015      	beq.n	8005026 <_svfiprintf_r+0xfa>
 8004ffa:	9a07      	ldr	r2, [sp, #28]
 8004ffc:	4654      	mov	r4, sl
 8004ffe:	2000      	movs	r0, #0
 8005000:	f04f 0c0a 	mov.w	ip, #10
 8005004:	4621      	mov	r1, r4
 8005006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800500a:	3b30      	subs	r3, #48	@ 0x30
 800500c:	2b09      	cmp	r3, #9
 800500e:	d94b      	bls.n	80050a8 <_svfiprintf_r+0x17c>
 8005010:	b1b0      	cbz	r0, 8005040 <_svfiprintf_r+0x114>
 8005012:	9207      	str	r2, [sp, #28]
 8005014:	e014      	b.n	8005040 <_svfiprintf_r+0x114>
 8005016:	eba0 0308 	sub.w	r3, r0, r8
 800501a:	fa09 f303 	lsl.w	r3, r9, r3
 800501e:	4313      	orrs	r3, r2
 8005020:	9304      	str	r3, [sp, #16]
 8005022:	46a2      	mov	sl, r4
 8005024:	e7d2      	b.n	8004fcc <_svfiprintf_r+0xa0>
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	1d19      	adds	r1, r3, #4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	9103      	str	r1, [sp, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	bfbb      	ittet	lt
 8005032:	425b      	neglt	r3, r3
 8005034:	f042 0202 	orrlt.w	r2, r2, #2
 8005038:	9307      	strge	r3, [sp, #28]
 800503a:	9307      	strlt	r3, [sp, #28]
 800503c:	bfb8      	it	lt
 800503e:	9204      	strlt	r2, [sp, #16]
 8005040:	7823      	ldrb	r3, [r4, #0]
 8005042:	2b2e      	cmp	r3, #46	@ 0x2e
 8005044:	d10a      	bne.n	800505c <_svfiprintf_r+0x130>
 8005046:	7863      	ldrb	r3, [r4, #1]
 8005048:	2b2a      	cmp	r3, #42	@ 0x2a
 800504a:	d132      	bne.n	80050b2 <_svfiprintf_r+0x186>
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	1d1a      	adds	r2, r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	9203      	str	r2, [sp, #12]
 8005054:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005058:	3402      	adds	r4, #2
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005120 <_svfiprintf_r+0x1f4>
 8005060:	7821      	ldrb	r1, [r4, #0]
 8005062:	2203      	movs	r2, #3
 8005064:	4650      	mov	r0, sl
 8005066:	f7fb f8f3 	bl	8000250 <memchr>
 800506a:	b138      	cbz	r0, 800507c <_svfiprintf_r+0x150>
 800506c:	9b04      	ldr	r3, [sp, #16]
 800506e:	eba0 000a 	sub.w	r0, r0, sl
 8005072:	2240      	movs	r2, #64	@ 0x40
 8005074:	4082      	lsls	r2, r0
 8005076:	4313      	orrs	r3, r2
 8005078:	3401      	adds	r4, #1
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005080:	4824      	ldr	r0, [pc, #144]	@ (8005114 <_svfiprintf_r+0x1e8>)
 8005082:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005086:	2206      	movs	r2, #6
 8005088:	f7fb f8e2 	bl	8000250 <memchr>
 800508c:	2800      	cmp	r0, #0
 800508e:	d036      	beq.n	80050fe <_svfiprintf_r+0x1d2>
 8005090:	4b21      	ldr	r3, [pc, #132]	@ (8005118 <_svfiprintf_r+0x1ec>)
 8005092:	bb1b      	cbnz	r3, 80050dc <_svfiprintf_r+0x1b0>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	3307      	adds	r3, #7
 8005098:	f023 0307 	bic.w	r3, r3, #7
 800509c:	3308      	adds	r3, #8
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a2:	4433      	add	r3, r6
 80050a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050a6:	e76a      	b.n	8004f7e <_svfiprintf_r+0x52>
 80050a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ac:	460c      	mov	r4, r1
 80050ae:	2001      	movs	r0, #1
 80050b0:	e7a8      	b.n	8005004 <_svfiprintf_r+0xd8>
 80050b2:	2300      	movs	r3, #0
 80050b4:	3401      	adds	r4, #1
 80050b6:	9305      	str	r3, [sp, #20]
 80050b8:	4619      	mov	r1, r3
 80050ba:	f04f 0c0a 	mov.w	ip, #10
 80050be:	4620      	mov	r0, r4
 80050c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050c4:	3a30      	subs	r2, #48	@ 0x30
 80050c6:	2a09      	cmp	r2, #9
 80050c8:	d903      	bls.n	80050d2 <_svfiprintf_r+0x1a6>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0c6      	beq.n	800505c <_svfiprintf_r+0x130>
 80050ce:	9105      	str	r1, [sp, #20]
 80050d0:	e7c4      	b.n	800505c <_svfiprintf_r+0x130>
 80050d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050d6:	4604      	mov	r4, r0
 80050d8:	2301      	movs	r3, #1
 80050da:	e7f0      	b.n	80050be <_svfiprintf_r+0x192>
 80050dc:	ab03      	add	r3, sp, #12
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	462a      	mov	r2, r5
 80050e2:	4b0e      	ldr	r3, [pc, #56]	@ (800511c <_svfiprintf_r+0x1f0>)
 80050e4:	a904      	add	r1, sp, #16
 80050e6:	4638      	mov	r0, r7
 80050e8:	f3af 8000 	nop.w
 80050ec:	1c42      	adds	r2, r0, #1
 80050ee:	4606      	mov	r6, r0
 80050f0:	d1d6      	bne.n	80050a0 <_svfiprintf_r+0x174>
 80050f2:	89ab      	ldrh	r3, [r5, #12]
 80050f4:	065b      	lsls	r3, r3, #25
 80050f6:	f53f af2d 	bmi.w	8004f54 <_svfiprintf_r+0x28>
 80050fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050fc:	e72c      	b.n	8004f58 <_svfiprintf_r+0x2c>
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	462a      	mov	r2, r5
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <_svfiprintf_r+0x1f0>)
 8005106:	a904      	add	r1, sp, #16
 8005108:	4638      	mov	r0, r7
 800510a:	f000 f879 	bl	8005200 <_printf_i>
 800510e:	e7ed      	b.n	80050ec <_svfiprintf_r+0x1c0>
 8005110:	080057bc 	.word	0x080057bc
 8005114:	080057c6 	.word	0x080057c6
 8005118:	00000000 	.word	0x00000000
 800511c:	08004e75 	.word	0x08004e75
 8005120:	080057c2 	.word	0x080057c2

08005124 <_printf_common>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	4616      	mov	r6, r2
 800512a:	4698      	mov	r8, r3
 800512c:	688a      	ldr	r2, [r1, #8]
 800512e:	690b      	ldr	r3, [r1, #16]
 8005130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005134:	4293      	cmp	r3, r2
 8005136:	bfb8      	it	lt
 8005138:	4613      	movlt	r3, r2
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005140:	4607      	mov	r7, r0
 8005142:	460c      	mov	r4, r1
 8005144:	b10a      	cbz	r2, 800514a <_printf_common+0x26>
 8005146:	3301      	adds	r3, #1
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	0699      	lsls	r1, r3, #26
 800514e:	bf42      	ittt	mi
 8005150:	6833      	ldrmi	r3, [r6, #0]
 8005152:	3302      	addmi	r3, #2
 8005154:	6033      	strmi	r3, [r6, #0]
 8005156:	6825      	ldr	r5, [r4, #0]
 8005158:	f015 0506 	ands.w	r5, r5, #6
 800515c:	d106      	bne.n	800516c <_printf_common+0x48>
 800515e:	f104 0a19 	add.w	sl, r4, #25
 8005162:	68e3      	ldr	r3, [r4, #12]
 8005164:	6832      	ldr	r2, [r6, #0]
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	42ab      	cmp	r3, r5
 800516a:	dc26      	bgt.n	80051ba <_printf_common+0x96>
 800516c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005170:	6822      	ldr	r2, [r4, #0]
 8005172:	3b00      	subs	r3, #0
 8005174:	bf18      	it	ne
 8005176:	2301      	movne	r3, #1
 8005178:	0692      	lsls	r2, r2, #26
 800517a:	d42b      	bmi.n	80051d4 <_printf_common+0xb0>
 800517c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005180:	4641      	mov	r1, r8
 8005182:	4638      	mov	r0, r7
 8005184:	47c8      	blx	r9
 8005186:	3001      	adds	r0, #1
 8005188:	d01e      	beq.n	80051c8 <_printf_common+0xa4>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	6922      	ldr	r2, [r4, #16]
 800518e:	f003 0306 	and.w	r3, r3, #6
 8005192:	2b04      	cmp	r3, #4
 8005194:	bf02      	ittt	eq
 8005196:	68e5      	ldreq	r5, [r4, #12]
 8005198:	6833      	ldreq	r3, [r6, #0]
 800519a:	1aed      	subeq	r5, r5, r3
 800519c:	68a3      	ldr	r3, [r4, #8]
 800519e:	bf0c      	ite	eq
 80051a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a4:	2500      	movne	r5, #0
 80051a6:	4293      	cmp	r3, r2
 80051a8:	bfc4      	itt	gt
 80051aa:	1a9b      	subgt	r3, r3, r2
 80051ac:	18ed      	addgt	r5, r5, r3
 80051ae:	2600      	movs	r6, #0
 80051b0:	341a      	adds	r4, #26
 80051b2:	42b5      	cmp	r5, r6
 80051b4:	d11a      	bne.n	80051ec <_printf_common+0xc8>
 80051b6:	2000      	movs	r0, #0
 80051b8:	e008      	b.n	80051cc <_printf_common+0xa8>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4652      	mov	r2, sl
 80051be:	4641      	mov	r1, r8
 80051c0:	4638      	mov	r0, r7
 80051c2:	47c8      	blx	r9
 80051c4:	3001      	adds	r0, #1
 80051c6:	d103      	bne.n	80051d0 <_printf_common+0xac>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d0:	3501      	adds	r5, #1
 80051d2:	e7c6      	b.n	8005162 <_printf_common+0x3e>
 80051d4:	18e1      	adds	r1, r4, r3
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	2030      	movs	r0, #48	@ 0x30
 80051da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051de:	4422      	add	r2, r4
 80051e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051e8:	3302      	adds	r3, #2
 80051ea:	e7c7      	b.n	800517c <_printf_common+0x58>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4622      	mov	r2, r4
 80051f0:	4641      	mov	r1, r8
 80051f2:	4638      	mov	r0, r7
 80051f4:	47c8      	blx	r9
 80051f6:	3001      	adds	r0, #1
 80051f8:	d0e6      	beq.n	80051c8 <_printf_common+0xa4>
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7d9      	b.n	80051b2 <_printf_common+0x8e>
	...

08005200 <_printf_i>:
 8005200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	7e0f      	ldrb	r7, [r1, #24]
 8005206:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005208:	2f78      	cmp	r7, #120	@ 0x78
 800520a:	4691      	mov	r9, r2
 800520c:	4680      	mov	r8, r0
 800520e:	460c      	mov	r4, r1
 8005210:	469a      	mov	sl, r3
 8005212:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005216:	d807      	bhi.n	8005228 <_printf_i+0x28>
 8005218:	2f62      	cmp	r7, #98	@ 0x62
 800521a:	d80a      	bhi.n	8005232 <_printf_i+0x32>
 800521c:	2f00      	cmp	r7, #0
 800521e:	f000 80d2 	beq.w	80053c6 <_printf_i+0x1c6>
 8005222:	2f58      	cmp	r7, #88	@ 0x58
 8005224:	f000 80b9 	beq.w	800539a <_printf_i+0x19a>
 8005228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800522c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005230:	e03a      	b.n	80052a8 <_printf_i+0xa8>
 8005232:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005236:	2b15      	cmp	r3, #21
 8005238:	d8f6      	bhi.n	8005228 <_printf_i+0x28>
 800523a:	a101      	add	r1, pc, #4	@ (adr r1, 8005240 <_printf_i+0x40>)
 800523c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005240:	08005299 	.word	0x08005299
 8005244:	080052ad 	.word	0x080052ad
 8005248:	08005229 	.word	0x08005229
 800524c:	08005229 	.word	0x08005229
 8005250:	08005229 	.word	0x08005229
 8005254:	08005229 	.word	0x08005229
 8005258:	080052ad 	.word	0x080052ad
 800525c:	08005229 	.word	0x08005229
 8005260:	08005229 	.word	0x08005229
 8005264:	08005229 	.word	0x08005229
 8005268:	08005229 	.word	0x08005229
 800526c:	080053ad 	.word	0x080053ad
 8005270:	080052d7 	.word	0x080052d7
 8005274:	08005367 	.word	0x08005367
 8005278:	08005229 	.word	0x08005229
 800527c:	08005229 	.word	0x08005229
 8005280:	080053cf 	.word	0x080053cf
 8005284:	08005229 	.word	0x08005229
 8005288:	080052d7 	.word	0x080052d7
 800528c:	08005229 	.word	0x08005229
 8005290:	08005229 	.word	0x08005229
 8005294:	0800536f 	.word	0x0800536f
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6032      	str	r2, [r6, #0]
 80052a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a8:	2301      	movs	r3, #1
 80052aa:	e09d      	b.n	80053e8 <_printf_i+0x1e8>
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	1d19      	adds	r1, r3, #4
 80052b2:	6031      	str	r1, [r6, #0]
 80052b4:	0606      	lsls	r6, r0, #24
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0xbc>
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	e003      	b.n	80052c4 <_printf_i+0xc4>
 80052bc:	0645      	lsls	r5, r0, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0xb8>
 80052c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xd0>
 80052c8:	232d      	movs	r3, #45	@ 0x2d
 80052ca:	426d      	negs	r5, r5
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d0:	4859      	ldr	r0, [pc, #356]	@ (8005438 <_printf_i+0x238>)
 80052d2:	230a      	movs	r3, #10
 80052d4:	e011      	b.n	80052fa <_printf_i+0xfa>
 80052d6:	6821      	ldr	r1, [r4, #0]
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	0608      	lsls	r0, r1, #24
 80052dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e0:	d402      	bmi.n	80052e8 <_printf_i+0xe8>
 80052e2:	0649      	lsls	r1, r1, #25
 80052e4:	bf48      	it	mi
 80052e6:	b2ad      	uxthmi	r5, r5
 80052e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ea:	4853      	ldr	r0, [pc, #332]	@ (8005438 <_printf_i+0x238>)
 80052ec:	6033      	str	r3, [r6, #0]
 80052ee:	bf14      	ite	ne
 80052f0:	230a      	movne	r3, #10
 80052f2:	2308      	moveq	r3, #8
 80052f4:	2100      	movs	r1, #0
 80052f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052fa:	6866      	ldr	r6, [r4, #4]
 80052fc:	60a6      	str	r6, [r4, #8]
 80052fe:	2e00      	cmp	r6, #0
 8005300:	bfa2      	ittt	ge
 8005302:	6821      	ldrge	r1, [r4, #0]
 8005304:	f021 0104 	bicge.w	r1, r1, #4
 8005308:	6021      	strge	r1, [r4, #0]
 800530a:	b90d      	cbnz	r5, 8005310 <_printf_i+0x110>
 800530c:	2e00      	cmp	r6, #0
 800530e:	d04b      	beq.n	80053a8 <_printf_i+0x1a8>
 8005310:	4616      	mov	r6, r2
 8005312:	fbb5 f1f3 	udiv	r1, r5, r3
 8005316:	fb03 5711 	mls	r7, r3, r1, r5
 800531a:	5dc7      	ldrb	r7, [r0, r7]
 800531c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005320:	462f      	mov	r7, r5
 8005322:	42bb      	cmp	r3, r7
 8005324:	460d      	mov	r5, r1
 8005326:	d9f4      	bls.n	8005312 <_printf_i+0x112>
 8005328:	2b08      	cmp	r3, #8
 800532a:	d10b      	bne.n	8005344 <_printf_i+0x144>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	07df      	lsls	r7, r3, #31
 8005330:	d508      	bpl.n	8005344 <_printf_i+0x144>
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	6861      	ldr	r1, [r4, #4]
 8005336:	4299      	cmp	r1, r3
 8005338:	bfde      	ittt	le
 800533a:	2330      	movle	r3, #48	@ 0x30
 800533c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005340:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005344:	1b92      	subs	r2, r2, r6
 8005346:	6122      	str	r2, [r4, #16]
 8005348:	f8cd a000 	str.w	sl, [sp]
 800534c:	464b      	mov	r3, r9
 800534e:	aa03      	add	r2, sp, #12
 8005350:	4621      	mov	r1, r4
 8005352:	4640      	mov	r0, r8
 8005354:	f7ff fee6 	bl	8005124 <_printf_common>
 8005358:	3001      	adds	r0, #1
 800535a:	d14a      	bne.n	80053f2 <_printf_i+0x1f2>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	b004      	add	sp, #16
 8005362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	f043 0320 	orr.w	r3, r3, #32
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	4833      	ldr	r0, [pc, #204]	@ (800543c <_printf_i+0x23c>)
 8005370:	2778      	movs	r7, #120	@ 0x78
 8005372:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	6831      	ldr	r1, [r6, #0]
 800537a:	061f      	lsls	r7, r3, #24
 800537c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005380:	d402      	bmi.n	8005388 <_printf_i+0x188>
 8005382:	065f      	lsls	r7, r3, #25
 8005384:	bf48      	it	mi
 8005386:	b2ad      	uxthmi	r5, r5
 8005388:	6031      	str	r1, [r6, #0]
 800538a:	07d9      	lsls	r1, r3, #31
 800538c:	bf44      	itt	mi
 800538e:	f043 0320 	orrmi.w	r3, r3, #32
 8005392:	6023      	strmi	r3, [r4, #0]
 8005394:	b11d      	cbz	r5, 800539e <_printf_i+0x19e>
 8005396:	2310      	movs	r3, #16
 8005398:	e7ac      	b.n	80052f4 <_printf_i+0xf4>
 800539a:	4827      	ldr	r0, [pc, #156]	@ (8005438 <_printf_i+0x238>)
 800539c:	e7e9      	b.n	8005372 <_printf_i+0x172>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	e7f6      	b.n	8005396 <_printf_i+0x196>
 80053a8:	4616      	mov	r6, r2
 80053aa:	e7bd      	b.n	8005328 <_printf_i+0x128>
 80053ac:	6833      	ldr	r3, [r6, #0]
 80053ae:	6825      	ldr	r5, [r4, #0]
 80053b0:	6961      	ldr	r1, [r4, #20]
 80053b2:	1d18      	adds	r0, r3, #4
 80053b4:	6030      	str	r0, [r6, #0]
 80053b6:	062e      	lsls	r6, r5, #24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0x1c0>
 80053bc:	6019      	str	r1, [r3, #0]
 80053be:	e002      	b.n	80053c6 <_printf_i+0x1c6>
 80053c0:	0668      	lsls	r0, r5, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0x1bc>
 80053c4:	8019      	strh	r1, [r3, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	4616      	mov	r6, r2
 80053cc:	e7bc      	b.n	8005348 <_printf_i+0x148>
 80053ce:	6833      	ldr	r3, [r6, #0]
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	6032      	str	r2, [r6, #0]
 80053d4:	681e      	ldr	r6, [r3, #0]
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	2100      	movs	r1, #0
 80053da:	4630      	mov	r0, r6
 80053dc:	f7fa ff38 	bl	8000250 <memchr>
 80053e0:	b108      	cbz	r0, 80053e6 <_printf_i+0x1e6>
 80053e2:	1b80      	subs	r0, r0, r6
 80053e4:	6060      	str	r0, [r4, #4]
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	2300      	movs	r3, #0
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f0:	e7aa      	b.n	8005348 <_printf_i+0x148>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d0ad      	beq.n	800535c <_printf_i+0x15c>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	079b      	lsls	r3, r3, #30
 8005404:	d413      	bmi.n	800542e <_printf_i+0x22e>
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	4298      	cmp	r0, r3
 800540c:	bfb8      	it	lt
 800540e:	4618      	movlt	r0, r3
 8005410:	e7a6      	b.n	8005360 <_printf_i+0x160>
 8005412:	2301      	movs	r3, #1
 8005414:	4632      	mov	r2, r6
 8005416:	4649      	mov	r1, r9
 8005418:	4640      	mov	r0, r8
 800541a:	47d0      	blx	sl
 800541c:	3001      	adds	r0, #1
 800541e:	d09d      	beq.n	800535c <_printf_i+0x15c>
 8005420:	3501      	adds	r5, #1
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	9903      	ldr	r1, [sp, #12]
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	42ab      	cmp	r3, r5
 800542a:	dcf2      	bgt.n	8005412 <_printf_i+0x212>
 800542c:	e7eb      	b.n	8005406 <_printf_i+0x206>
 800542e:	2500      	movs	r5, #0
 8005430:	f104 0619 	add.w	r6, r4, #25
 8005434:	e7f5      	b.n	8005422 <_printf_i+0x222>
 8005436:	bf00      	nop
 8005438:	080057cd 	.word	0x080057cd
 800543c:	080057de 	.word	0x080057de

08005440 <memmove>:
 8005440:	4288      	cmp	r0, r1
 8005442:	b510      	push	{r4, lr}
 8005444:	eb01 0402 	add.w	r4, r1, r2
 8005448:	d902      	bls.n	8005450 <memmove+0x10>
 800544a:	4284      	cmp	r4, r0
 800544c:	4623      	mov	r3, r4
 800544e:	d807      	bhi.n	8005460 <memmove+0x20>
 8005450:	1e43      	subs	r3, r0, #1
 8005452:	42a1      	cmp	r1, r4
 8005454:	d008      	beq.n	8005468 <memmove+0x28>
 8005456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545e:	e7f8      	b.n	8005452 <memmove+0x12>
 8005460:	4402      	add	r2, r0
 8005462:	4601      	mov	r1, r0
 8005464:	428a      	cmp	r2, r1
 8005466:	d100      	bne.n	800546a <memmove+0x2a>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005472:	e7f7      	b.n	8005464 <memmove+0x24>

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d06      	ldr	r5, [pc, #24]	@ (8005490 <_sbrk_r+0x1c>)
 8005478:	2300      	movs	r3, #0
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fb ff7a 	bl	8001378 <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20000308 	.word	0x20000308

08005494 <memcpy>:
 8005494:	440a      	add	r2, r1
 8005496:	4291      	cmp	r1, r2
 8005498:	f100 33ff 	add.w	r3, r0, #4294967295
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	4770      	bx	lr
 80054a0:	b510      	push	{r4, lr}
 80054a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054aa:	4291      	cmp	r1, r2
 80054ac:	d1f9      	bne.n	80054a2 <memcpy+0xe>
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <_realloc_r>:
 80054b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b4:	4680      	mov	r8, r0
 80054b6:	4615      	mov	r5, r2
 80054b8:	460c      	mov	r4, r1
 80054ba:	b921      	cbnz	r1, 80054c6 <_realloc_r+0x16>
 80054bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c0:	4611      	mov	r1, r2
 80054c2:	f7ff bc4b 	b.w	8004d5c <_malloc_r>
 80054c6:	b92a      	cbnz	r2, 80054d4 <_realloc_r+0x24>
 80054c8:	f7ff fbdc 	bl	8004c84 <_free_r>
 80054cc:	2400      	movs	r4, #0
 80054ce:	4620      	mov	r0, r4
 80054d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d4:	f000 f81a 	bl	800550c <_malloc_usable_size_r>
 80054d8:	4285      	cmp	r5, r0
 80054da:	4606      	mov	r6, r0
 80054dc:	d802      	bhi.n	80054e4 <_realloc_r+0x34>
 80054de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054e2:	d8f4      	bhi.n	80054ce <_realloc_r+0x1e>
 80054e4:	4629      	mov	r1, r5
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fc38 	bl	8004d5c <_malloc_r>
 80054ec:	4607      	mov	r7, r0
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d0ec      	beq.n	80054cc <_realloc_r+0x1c>
 80054f2:	42b5      	cmp	r5, r6
 80054f4:	462a      	mov	r2, r5
 80054f6:	4621      	mov	r1, r4
 80054f8:	bf28      	it	cs
 80054fa:	4632      	movcs	r2, r6
 80054fc:	f7ff ffca 	bl	8005494 <memcpy>
 8005500:	4621      	mov	r1, r4
 8005502:	4640      	mov	r0, r8
 8005504:	f7ff fbbe 	bl	8004c84 <_free_r>
 8005508:	463c      	mov	r4, r7
 800550a:	e7e0      	b.n	80054ce <_realloc_r+0x1e>

0800550c <_malloc_usable_size_r>:
 800550c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005510:	1f18      	subs	r0, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	bfbc      	itt	lt
 8005516:	580b      	ldrlt	r3, [r1, r0]
 8005518:	18c0      	addlt	r0, r0, r3
 800551a:	4770      	bx	lr

0800551c <_init>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	bf00      	nop
 8005520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005522:	bc08      	pop	{r3}
 8005524:	469e      	mov	lr, r3
 8005526:	4770      	bx	lr

08005528 <_fini>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr
